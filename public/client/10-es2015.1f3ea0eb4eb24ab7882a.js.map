{"version":3,"sources":["webpack:///src/common/core/ui/confirm-modal/confirm-modal.component.ts","webpack:///src/common/core/ui/confirm-modal/confirm-modal.component.html","webpack:///src/common/file-preview/preview-url-transformer.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/interval.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","webpack:///src/common/uploads/formatted-file-size.pipe.ts","webpack:///src/common/file-preview/preview-files.service.ts","webpack:///src/app/shared/file-preview-overlay/file-preview-toolbar/file-preview-toolbar.component.html","webpack:///src/app/shared/file-preview-overlay/file-preview-toolbar/file-preview-toolbar.component.ts","webpack:///src/app/shared/file-preview-overlay/file-preview-overlay.component.ts","webpack:///src/app/shared/file-preview-overlay/file-preview-overlay.component.html","webpack:///src/app/shared/file-mime.service.ts","webpack:///src/app/shared/reply-attachment-list/reply-attachment-list.component.html","webpack:///src/app/shared/reply-attachment-list/reply-attachment-list.component.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js","webpack:///src/common/file-preview/file-preview.module.ts","webpack:///src/common/uploads/uploads.module.ts","webpack:///src/app/shared/tag.service.ts","webpack:///src/app/shared/reply-attachment-list/reply-attachment-list.module.ts","webpack:///src/common/text-editor/editors/tinymce-text-editor.service.ts","webpack:///src/common/text-editor/validation/text-editor-image-validator.ts","webpack:///src/common/text-editor/text-editor.component.html","webpack:///src/common/text-editor/text-editor.component.ts","webpack:///src/common/file-preview/base-file-preview.ts","webpack:///node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js","webpack:///src/common/core/ui/custom-scrollbar/supports-native-scrollbar-styling.ts","webpack:///src/common/core/ui/custom-scrollbar/custom-scrollbar.directive.ts","webpack:///src/common/file-preview/default-preview/default-preview.component.ts","webpack:///src/common/file-preview/default-preview/default-preview.component.html","webpack:///src/common/core/ui/custom-scrollbar/custom-scrollbar.module.ts","webpack:///src/common/file-preview/current-preview-file.ts","webpack:///src/common/core/ui/format-pipes/format-pipes.module.ts","webpack:///src/common/file-preview/preview-container/preview-container.component.html","webpack:///src/common/file-preview/preview-container/preview-container.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttle.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttleTime.js","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.html","webpack:///src/app/help-center/manage/new-article/article-settings-modal/article-settings-modal.component.ts","webpack:///src/app/help-center/manage/new-article/article-settings-modal/article-settings-modal.component.html","webpack:///src/common/core/utils/str-contains.ts","webpack:///src/app/help-center/manage/categories-filterer.ts","webpack:///src/app/help-center/manage/categories-manager/categories-manager.component.html","webpack:///src/app/help-center/manage/categories-manager/categories-manager.component.ts","webpack:///src/app/help-center/shared/article-modal/article-modal.component.ts","webpack:///src/app/help-center/shared/article-modal/article-modal.component.html","webpack:///src/app/shared/models/Article.ts","webpack:///src/app/shared/models/Category.ts","webpack:///src/app/help-center/manage/category-modal/category-modal.component.html","webpack:///src/app/help-center/manage/category-modal/category-modal.component.ts","webpack:///src/app/help-center/manage/new-article/new-article.component.html","webpack:///src/app/help-center/manage/new-article/new-article.component.ts","webpack:///src/app/help-center/manage/new-article/new-article-resolve.service.ts","webpack:///src/app/help-center/manage/articles-list/articles-list-filters/articles-list-filters.component.ts","webpack:///src/app/help-center/manage/articles-list/articles-list-filters/articles-list-filters.component.html","webpack:///src/app/help-center/manage/articles-list/articles-list.component.html","webpack:///src/app/help-center/manage/articles-list/articles-list.component.ts","webpack:///src/app/help-center/manage/help-center-manage.component.ts","webpack:///src/app/help-center/manage/help-center-manage.component.html","webpack:///src/app/help-center/manage/categories-list/category-list-item/category-list-item.component.html","webpack:///src/app/help-center/manage/categories-list/category-list-item/category-list-item.component.ts","webpack:///src/app/help-center/manage/categories-list/categories-list.component.html","webpack:///src/app/help-center/manage/categories-list/categories-list.component.ts","webpack:///src/app/help-center/manage/help-center-manage.routing.ts","webpack:///src/app/help-center/manage/help-center-manage.module.ts","webpack:///src/common/uploads/utils/download-file-from-url.ts","webpack:///src/common/file-preview/text-preview/text-preview.component.html","webpack:///src/common/file-preview/text-preview/text-preview.component.ts","webpack:///src/common/file-preview/audio-preview/audio-preview.component.html","webpack:///src/common/file-preview/audio-preview/audio-preview.component.ts","webpack:///src/common/file-preview/video-preview/video-preview.component.html","webpack:///src/common/file-preview/video-preview/video-preview.component.ts","webpack:///src/common/file-preview/image-preview/image-preview.component.ts","webpack:///src/common/file-preview/image-preview/image-preview.component.html","webpack:///src/common/file-preview/pdf-preview/pdf-preview.component.ts","webpack:///src/common/file-preview/pdf-preview/pdf-preview.component.html","webpack:///src/common/file-preview/google-docs-viewer/google-docs-viewer.component.html","webpack:///src/common/file-preview/google-docs-viewer/google-docs-viewer.component.ts","webpack:///src/common/file-preview/available-previews.ts","webpack:///src/app/shared/tags-manager/tags-manager.component.ts","webpack:///src/app/shared/tags-manager/tags-manager.component.html","webpack:///src/app/shared/tags-manager/tags-manager.module.ts"],"names":["ConfirmModalComponent","dialogRef","data","i18n","settings","this","close","title","t","body","bodyBold","ok","cancel","confirm","PREVIEW_URL_TRANSFORMER","factory","entry","url","providedIn","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","super","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","value","c","markForCheck","monitor","subscribe","focusOrigin","Promise","resolve","then","stopMonitoring","event","stopPropagation","emit","_inputElement","nativeElement","_emitChangeEvent","fn","isDisabled","disabled","options","focusVia","detectChanges","ɵfac","ɵcmp","type","selectors","viewQuery","rf","ctx","_t","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","$event","focus","inputs","disableRipple","color","required","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","_onChangeEvent","_onInputClick","_onLabelTextChange","_r208","_r212","inputId","textContent","trim","toString","directives","styles","encapsulation","changeDetection","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","MatSlideToggleModule","imports","dispatch","state","subscriber","counter","period","next","schedule","extendStyles","dest","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","split","map","part","passiveEventListenerOptions","passive","activeEventListenerOptions","_config","_document","_viewportRuler","_dragDropRegistry","_passiveTransform","x","y","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","length","targetHandle","find","handle","target","contains","has","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","Math","abs","_pickupPositionOnPage","dragStartThreshold","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","handles","forEach","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","undefined","boundaryElement","unsubscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","transform","add","delete","direction","container","position","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","parent","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","appendChild","replaceChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","scroll","pipe","startWith","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","startDragging","currentIndex","getItemIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","getRootNode","elementRect","deepCloneNode","left","top","pointerEvents","margin","zIndex","classList","Array","isArray","className","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","clamp","right","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","parentNode","removeChild","rootNode","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","sortingDisabled","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_viewportScrollPosition","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_handleScroll","_updateAfterScroll","scrollTop","scrollLeft","_startScrollInterval","scheduler","a","isNumeric","Observable","animationFrame","takeUntil","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","registerDropContainer","_removeListeners","removeDropContainer","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","pointerX","pointerY","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","getPlaceholderElement","newPositionReference","splice","getRootElement","push","_cacheItemPositions","_reset","items","_withDropContainer","connectedTo","slice","orientation","findIndex","reverse","currentItem","size","pointerDelta","_isPointerNearDropContainer","siblings","isHorizontal","siblingAtNewPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","adjustClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","_clientRect","getViewportSize","window","getMutableClientRect","elementToMeasure","sort","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","floor","_cacheOwnPosition","scrollPosition","newTop","newLeft","extraClientRect","topDifference","leftDifference","_sortFromLastPointerPosition","isInsideClientRect","_canReceive","elementFromPoint","_getShadowRoot","activeSiblings","isReceiving","ShadowRoot","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","startsWith","upEvent","set","e","config","_clearGlobalListeners","instance","ɵprov","token","DEFAULT_CONFIG","DragDrop","CDK_DRAG_PARENT","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","ɵdir","CdkDragPlaceholder","templateRef","CdkDragPreview","CDK_DROP_LIST","CDK_DRAG_CONFIG","CdkDrag","dropContainer","_viewContainerRef","dragDrop","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_syncInputs","_handleEvents","reset","getFreeDragPosition","onStable","take","_updateRootElement","changes","tap","childHandleElements","filter","withHandles","switchMap","merge","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","dispose","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","boundary","ref","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","contentQueries","dirIndex","selector","currentElement","matches","msMatchesSelector","parentElement","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_group","_dropListRef","createDropList","_setupInputSyncSubscription","_dropLists","withItems","reduce","filteredItems","list","withOrientation","useValue","DragDropModule","providers","FormattedFileSizePipe","bytes","precision","isNaN","String","isFinite","PreviewFilesService","availablePreviews","injector","files","portal","meta","previewUriTransformer","download","haveNext","updateMeta","updatePortal","havePrevious","newPointer","oldPointer","pointer","total","current","getCurrent","createInjector","activeFile","injectionTokens","WeakMap","transformer","closed","previewFiles","FilePreviewToolbarComponent","showLogo","disableDownload","showCloseButton","FilePreviewOverlayComponent","el","overlayRef","entries","ticketEntry","setPreviewUriTransformer","urlTransformer","bind","bindToDownload","previewContainer","closest","downloadSub","getAllEntries","downloadFile","hashes","hash","join","getBaseUrl","closeOverlay","FileMime","iconsMap","text","audio","video","document","image","mime","getFileType","ReplyAttachmentListComponent","overlay","uploadQueue","cancelButtonVisible","detached","attachments","ent","attachment","open","origin","MatChipBase","_MatChipMixinBase","MatChipAvatar","MatChipTrailingIcon","MatChip","platform","globalRippleOptions","animationMode","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","coercedValue","_dispatchSelectionChange","_value","selectable","selected","hasAttribute","tagName","chip","_removeTriggerEvents","_markForCheck","isUserInput","removable","keyCode","remove","toggleSelected","MatChipRemove","avatar","trailingIcon","removeIcon","_handleClick","_handleKeydown","_blur","ariaSelected","_parentChip","parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","MatChipListChange","MatChipList","controlType","_lastDestroyedChipIndex","_uid","_tabIndex","_userTabIndex","_multiple","_compareWith","o1","o2","ariaOrientation","valueChange","valueAccessor","multiple","_selectionModel","empty","_syncChipsState","_initializeSelection","writeValue","_chipInput","stateChanges","focused","_hasFocusedChip","chips","_keyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","tabOut","_allowFocusEscape","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","updateErrorState","_dropSubscriptions","inputElement","ids","_ariaDescribedby","_setSelectionByValue","_originatesFromChip","setFirstItemActive","_focusInput","_isInputEmpty","setLastItemActive","onKeydown","newChipIndex","setActiveItem","_clearSelection","deselect","currentValue","_selectValue","_sortValues","correspondingChip","selectViaInteraction","select","skip","fallbackValue","valueToEmit","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","some","_keydown","role","errorState","compareWith","errorStateMatcher","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_isSeparatorKey","input","separators","_focus","_onInput","invalid","chipList","ɵ0","MatChipsModule","FilePreviewModule","useClass","UploadsModule","TagService","http","baseUri","params","getWithCache","post","put","query","notType","perPage","get","ReplyAttachmentListModule","TinymceTextEditor","zone","lazyLoader","breakpoints","makeBootstrapPromise","editorIsReady","tinymceInstance","setContent","undoManager","waitForEditor","hasUndo","hasRedo","queryCommandState","execCommand","getContent","contents","transact","selection","setCursorLocation","nodeChanged","collapse","insertContents","bootstrapPromise","loadTinymce","initTinymce","loadAsset","textAreaEl","plugins","branding","browser_spellcheck","max_height","maxHeight","min_height","minHeight","autoresize_on_init","paste_as_text","elementpath","statusbar","menubar","convert_urls","forced_root_block","element_format","body_class","content_style","content_css","default_link_target","link_assume_external_targets","target_list","link_title","image_dimensions","image_description","setup","editor","on","onChange","shortcuts","onCtrlEnter","init_instance_callback","bootstrapPromiseResolve","isMobile$","toolbar","concat","extended_valid_elements","getAssetUrl","editorEl","offsetHeight","tinymce","init","TextEditorImageValidator","DEFAULT_MAX_SIZE_MB","validations","maxSize","convertToBytes","types","TextEditorComponent","currentUser","renderer","overlayPanel","imageValidator","sourceAreaControl","activeEditor","showAdvancedControls","basic","onFileUpload","bootTextEditor","destroyEditor","command","BeColorPickerModule","components","panel","valueChanged","debounceTime","contentAreaContainer","setStyle","sourceTextArea","setValue","getContents","source_view","fileList","uri","Image","validator","httpParams","diskPrefix","inlineUploadPrefix","response","insertImage","fileEntry","setContents","attrs","href","setConfig","visualTextArea","BaseFilePreview","file","sanitizer","filePreviewWrapper","bypassSecurityTrustResourceUrl","getSrc","responseType","obj","val","div","elMatches","Element","prototype","webkitMatchesSelector","mozMatchesSelector","call","queryChildren","children","child","cls","scrollingClassTimeout","addScrollingClass","removeScrollingClass","isAlive","scrollingThreshold","EventElement","handlers","prototypeAccessors","isEmpty","configurable","eventName","unbind","this$1","unbindAll","Object","keys","every","defineProperties","EventManager","eventElements","createEvent","CustomEvent","evt","initCustomEvent","processScrollDiff","axis","diff","useScrollingClass","forceFireReachEvent","fields","contentHeight","containerHeight","up","down","reach","dispatchEvent","toInt","eventElement","ee","once","onceHandler","env","isWebKit","documentElement","supportsTouch","navigator","maxTouchPoints","DocumentTouch","supportsIePointer","msMaxTouchPoints","isChrome","test","userAgent","updateGeometry","roundedScrollTop","rect","containerWidth","ceil","contentWidth","scrollbarXRail","scrollbarYRail","suppressScrollX","scrollXMarginOffset","scrollbarXActive","railXWidth","railXMarginWidth","railXRatio","scrollbarXWidth","getThumbSize","scrollbarXLeft","negativeScrollAdjustment","suppressScrollY","scrollYMarginOffset","scrollbarYActive","railYHeight","railYMarginHeight","railYRatio","scrollbarYHeight","scrollbarYTop","xRailOffset","isRtl","isScrollbarXUsingBottom","scrollbarXBottom","scrollbarXTop","yRailOffset","isScrollbarYUsingRight","scrollbarYRight","scrollbarYOuterWidth","scrollbarYLeft","scrollbarX","railBorderXWidth","scrollbarY","railBorderYWidth","thumbSize","minScrollbarLength","maxScrollbarLength","bindMouseScrollHandler","startingScrollTop","startingMousePageY","mouseMoveHandler","mouseUpHandler","ownerDocument","bindMoves","touchMode","positionTop","pageYOffset","positionLeft","pageXOffset","keyboard","isDefaultPrevented","defaultPrevented","activeElement","contentDocument","shadowRoot","deltaX","deltaY","which","metaKey","altKey","shiftKey","wheelPropagation","wheel","mousewheelHandler","wheelDeltaX","wheelDeltaY","deltaMode","wheelDelta","querySelector","cursor","overflowY","match","maxScrollTop","overflowX","maxScrollLeft","shouldPrevent","useBothWheelAxes","wheelSpeed","isTop","isBottom","isLeft","isRight","offsetWidth","ctrlKey","onwheel","onmousewheel","startOffset","startTime","speed","easingLoop","touchStart","touchMove","touchEnd","PointerEvent","MSPointerEvent","applyTouchMove","differenceX","differenceY","getTouch","shouldHandle","pointerType","buttons","MSPOINTER_TYPE_MOUSE","getTime","clearInterval","currentOffset","currentTime","timeGap","magnitudeX","magnitudeY","scrollY","swipeEasing","setInterval","isInitialized","PerfectScrollbar","userSettings","result","originalScrollLeft","blur","isNegativeScroll","railXStyle","borderLeftWidth","borderRightWidth","marginLeft","marginRight","railYStyle","paddingLeft","paddingRight","borderTopWidth","borderBottomWidth","marginTop","marginBottom","handlerName","lastScrollTop","lastScrollLeft","onScroll","update","removePsClasses","SUPPORTS_NATIVE_SCROLLBAR_STYLING","appVersion","overflow","innerHTML","CustomScrollbarDirective","ngZone","mutationObserverFactory","supportsNativeStyling","subscriptions","minLength","suppressX","native","debouncer","addClass","shouldUseNative","scrollbar","bindToContentChange","sub","disconnect","create","mutations","observe","childList","subtree","DefaultPreviewComponent","message","CustomScrollbarModule","CURRENT_PREVIEW_FILE","FormatPipesModule","PreviewContainerComponent","comp","defaultThrottleConfig","leading","trailing","ThrottleTimeOperator","Subscriber","destination","_hasTrailingValue","_trailingValue","throttled","dispatchNext","arg","clearThrottle","UploadProgressBarComponent","cd","hidden","totalProgress","lift","progress","count$","pending","ArticleSettingsModalComponent","model","hydrate","slug","article","description","strContains","haystack","needle","categories","filtered","category","assign","CategoriesManagerComponent","api","storage","searchQuery","selectedCategories","allCategories","bindSearchQuery","initialCategories","refresh","getCategories","setCategories","categoryIsSelected","parentId","deselectChildren","childIsSelected","valueChanges","distinctUntilChanged","deselectAll","ArticleModalComponent","Article","visibility","Category","CategoryModalComponent","toast","parent_id","updating","errors","createOrUpdateCategory","getPayload","errorResponse","messages","fetchCategories","uploadedFiles","openInsertImageDialog","NewArticleComponent","modal","helpCenter","route","router","articleModel","draft","resolves","method","navigateByUrl","panelClass","show","afterClosed","textEditor","categoriesManager","getSelectedCategories","tags","tagsManager","getSelectedTags","uploads","setSelectedCategories","setSelectedTags","tag","toggle","openArticleSettingsModal","saveOrUpdateArticle","uploadFiles","openNewCategoryModal","openPreviewModal","NewArticleResolve","forkJoin","getArticle","toPromise","navigate","ArticlesListFiltersComponent","filters","getExactSelectedCategories","applyFilter","ArticlesListComponent","paginator","selectedLayout","reloadArticles","articleId","confirmed","deleteArticles","paginate","pagination","getQueryParams","scrollContainer","page","pageIndex","pageSize","articlesListFilters","getFilters","merged","orderBy","articlesOrder","selectedValue","setLayout","HelpCenterManageComponent","CategoryListItemComponent","deleteCategory","detachCategory","navigateToArticlesList","openUpdateCategoryModal","maybeDeleteCategory","CategoriesListComponent","filteredCategories","categoryChildrenVisible","updateCategories","filterCategories","reorderCategories","toggleCategoryChildren","showNewCategoryModal","routing","forChild","path","component","canActivate","redirectTo","permissions","HcManageModule","downloadFileFromUrl","link","click","TextPreviewComponent","content$","BehaviorSubject","fileTooLarge$","file_size","loadFileContents","content","AudioPreviewComponent","invalidMedia","canPlayVideo","player","src","play","canPlayType","playerEl","VideoPreviewComponent","ImagePreviewComponent","PdfPreviewComponent","GoogleDocsViewerComponent","loading$","showDefaultPreview$","showDefaultPreview","iframe","onload","timeoutRef","stopLoading","getIframeSrc","catch","location","reject","previewUrl","preview_token","getGoogleDocsUrl","encodeURIComponent","AVAILABLE_PREVIEWS","DefaultPreviews","pdf","spreadsheet","powerPoint","word","TagsManagerComponent","tagService","selectedTags","readonly","formControl","allTags$","suggestedTags$","getTags","q","suggestions","includes","addTags","TagsManagerModule"],"mappings":"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","file":"x","sourcesContent":["import {ChangeDetectionStrategy, Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {Translations} from '../../translations/translations.service';\r\nimport {Settings} from '../../config/settings.service';\r\n\r\nexport interface ConfirmModalData {\r\n    title: string;\r\n    body: string;\r\n    bodyBold?: string;\r\n    ok?: string;\r\n    cancel?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'confirm-modal',\r\n    templateUrl: './confirm-modal.component.html',\r\n    styleUrls: ['./confirm-modal.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ConfirmModalComponent implements OnInit {\r\n    constructor(\r\n        private dialogRef: MatDialogRef<ConfirmModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: ConfirmModalData,\r\n        private i18n: Translations,\r\n        public settings: Settings,\r\n    ) {}\r\n\r\n    public close() {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.data.title = this.i18n.t(this.data.title);\r\n        this.data.body = this.i18n.t(this.data.body);\r\n        if (this.data.bodyBold) this.data.bodyBold = this.i18n.t(this.data.bodyBold);\r\n        this.data.ok = this.data.ok ? this.i18n.t(this.data.ok) : this.i18n.t('Confirm');\r\n        this.data.cancel = this.data.cancel ? this.i18n.t(this.data.cancel) : this.i18n.t('Cancel');\r\n    }\r\n\r\n    public confirm() {\r\n        this.dialogRef.close(true);\r\n    }\r\n}","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title>{{data.title}}</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<div class=\"mat-dialog-contents\" mat-dialog-content>\r\n    <p>{{data.body}}</p>\r\n    <p class=\"bold\" *ngIf=\"data.bodyBold\">{{data.bodyBold}}</p>\r\n</div>\r\n\r\n<div class=\"buttons right mat-dialog-actions\" mat-dialog-actions>\r\n    <button (click)=\"close()\" type=\"button\" mat-button class=\"button cancel cancel-button\">{{data.cancel}}</button>\r\n    <button type=\"submit\" mat-raised-button color=\"accent\" class=\"button primary submit-button\" cdkFocusInitial (click)=\"confirm()\">{{data.ok}}</button>\r\n</div>\r\n","import { InjectionToken } from '@angular/core';\r\nimport { FileEntry } from '@common/uploads/types/file-entry';\r\n\r\nexport type PreviewUrlTransformer = (entry: FileEntry) => string;\r\n\r\nexport const PREVIEW_URL_TRANSFORMER = new InjectionToken<PreviewUrlTransformer>('PREVIEW_URL_TRANSFORMER', {\r\n    factory: () => {\r\n        return entry => entry.url;\r\n    },\r\n    providedIn: 'root',\r\n});\r\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-slide-toggle` options that can be overridden.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nfunction MatSlideToggleDefaultOptions() { }\nif (false) {\n    /**\n     * Whether toggle action triggers value changes in slide toggle.\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableToggleValue;\n    /**\n     * Whether drag action triggers value changes in slide toggle.\n     * @deprecated No longer being used.\n     * \\@breaking-change 10.0.0\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableDragValue;\n}\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => ({ disableToggleValue: false }))\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggle)),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\nif (false) {\n    /**\n     * The source MatSlideToggle of the event.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.source;\n    /**\n     * The new `checked` value of the MatSlideToggle.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.checked;\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatSlideToggleBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 10.0.0\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._onTouched()));\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlideToggle_focus_HostBindingHandler($event) { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener($event) { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r208 = ɵngcc0.ɵɵreference(1);\n        const _r212 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r212.textContent || !_r212.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r208)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_required;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._uniqueId;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._required;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._checked;\n    /**\n     * Reference to the thumb HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbEl;\n    /**\n     * Reference to the thumb bar HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbBarEl;\n    /**\n     * Name value will be applied to the input element if present.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.name;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.id;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.labelPosition;\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabel;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabelledby;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.change;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.toggleChange;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatSlideToggle.prototype.dragChange;\n    /**\n     * Reference to the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._inputElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._changeDetectorRef;\n    /** @type {?} */\n    MatSlideToggle.prototype.defaults;\n    /** @type {?} */\n    MatSlideToggle.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggleRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ],\n        _MatSlideToggleRequiredValidatorModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatSlideToggle,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map","import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _supportsShadowDom } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const pointerPosition = this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialContainer.getItemIndex(this),\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = `${elementRect.width}px`;\n            preview.style.height = `${elementRect.height}px`;\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(event) {\n        /** @type {?} */\n        const point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Cached scroll position on the page when the element was picked up.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollPosition;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNode = viewRef.rootNodes[0];\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n        /** @type {?} */\n        const wrapper = _document.createElement('div');\n        wrapper.appendChild(rootNode);\n        return wrapper;\n    }\n    return (/** @type {?} */ (rootNode));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the container's scroll position.\n         */\n        this._scrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the scroll position of the viewport.\n         */\n        this._viewportScrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n         */\n        this._handleScroll = (/**\n         * @return {?}\n         */\n        () => {\n            if (!this.isDragging()) {\n                return;\n            }\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\n        });\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._removeListeners();\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => element.addEventListener('scroll', this._handleScroll)));\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n        if (newIndex === -1) {\n            // We use the coordinates of where the item entered the drop\n            // zone to figure out at which index it should be inserted.\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling the container.\n        if (this._isPointerNearDropContainer(pointerX, pointerY)) {\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            [verticalScrollDirection, horizontalScrollDirection] =\n                getElementScrollDirections(element, this._clientRect, pointerX, pointerY);\n            if (verticalScrollDirection || horizontalScrollDirection) {\n                scrollNode = element;\n            }\n        }\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    _cacheOwnPosition() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._clientRect = getMutableClientRect(element);\n        this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._removeListeners();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    _isPointerNearDropContainer(pointerX, pointerY) {\n        const { top, right, bottom, left, width, height } = this._clientRect;\n        /** @type {?} */\n        const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheOwnPosition();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrollPosition Object that is keeping track of the scroll position.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @param {?=} extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n     *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n     *  the `ClientRect` of the list.\n     * @return {?}\n     */\n    _updateAfterScroll(scrollPosition, newTop, newLeft, extraClientRect) {\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        if (extraClientRect) {\n            adjustClientRect(extraClientRect, topDifference, leftDifference);\n        }\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Removes the event listeners associated with this drop list.\n     * @private\n     * @return {?}\n     */\n    _removeListeners() {\n        coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const newPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left, this._clientRect);\n            }\n            else if (this.isReceiving()) {\n                this._cacheOwnPosition();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            this._cachedShadowRoot = getShadowRoot(coerceElement(this.element)) || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Keeps track of the container's scroll position.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollPosition;\n    /**\n     * Keeps track of the scroll position of the viewport.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollPosition;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._handleScroll;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * Gets the shadow root of an element, if any.\n * @param {?} element\n * @return {?}\n */\nfunction getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        /** @type {?} */\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        if (rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, config);\n        this._dragRef.data = this;\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], disabled: [\"cdkDragDisabled\", \"disabled\"], data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        this._disabled = false;\n        /**\n         * Whether sorting within this drop list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        (items) => {\n            this._dropListRef.withItems(items.reduce((/**\n             * @param {?} filteredItems\n             * @param {?} drag\n             * @return {?}\n             */\n            (filteredItems, drag) => {\n                if (drag.dropContainer === this) {\n                    filteredItems.push(drag._dragRef);\n                }\n                return filteredItems;\n            }), (/** @type {?} */ ([]))));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], contentQueries: function CdkDropList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDrag, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._draggables = _t);\n    } }, hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], data: [\"cdkDropListData\", \"data\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\nCdkDropList.propDecorators = {\n    _draggables: [{ type: ContentChildren, args: [CdkDrag, { descendants: true },] }],\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], id: [{\n            type: Input\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], _draggables: [{\n            type: ContentChildren,\n            args: [CdkDrag, { descendants: true }]\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }] }); })();\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     */\n    CdkDropList.prototype._draggables;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { prettyBytes } from '../core/utils/pretty-bytes';\r\n\r\n@Pipe({\r\n    name: 'formattedFileSize',\r\n    pure: true,\r\n})\r\nexport class FormattedFileSizePipe implements PipeTransform {\r\n    transform(bytes: number = 0, precision?: number|string): string {\r\n        if (isNaN(parseFloat(String(bytes))) || ! isFinite(bytes)) return '-';\r\n        return prettyBytes(bytes, precision);\r\n    }\r\n}\r\n","import {Inject, Injectable, Injector} from '@angular/core';\r\nimport {FileEntry} from '../uploads/types/file-entry';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {AVAILABLE_PREVIEWS, DefaultPreviews} from './available-previews';\r\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\r\nimport {CURRENT_PREVIEW_FILE} from './current-preview-file';\r\nimport {DefaultPreviewComponent} from './default-preview/default-preview.component';\r\nimport {filter} from 'rxjs/operators';\r\nimport {PREVIEW_URL_TRANSFORMER, PreviewUrlTransformer} from './preview-url-transformer';\r\n\r\ninterface PreviewFilesMeta {\r\n    entry?: FileEntry;\r\n    pointer?: number;\r\n    total?: number;\r\n    haveNext?: boolean;\r\n    havePrevious?: boolean;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PreviewFilesService {\r\n    private files: FileEntry[] = [];\r\n    private portal = new BehaviorSubject(null);\r\n    private meta: BehaviorSubject<PreviewFilesMeta> = new BehaviorSubject({});\r\n    private previewUriTransformer: PreviewUrlTransformer|null = null;\r\n    public download = new Subject();\r\n\r\n    constructor(\r\n        @Inject(AVAILABLE_PREVIEWS) private availablePreviews: DefaultPreviews,\r\n        private injector: Injector,\r\n    ) {}\r\n\r\n    public pagination(): Observable<PreviewFilesMeta> {\r\n        return this.meta\r\n            .pipe(filter(data => data && !!data.entry));\r\n    }\r\n\r\n    public getCurrent(): FileEntry {\r\n        return this.meta.value.entry;\r\n    }\r\n\r\n    public getAllEntries() {\r\n        return this.files;\r\n    }\r\n\r\n    public getPortal(): Observable<ComponentPortal<any>> {\r\n        return this.portal.asObservable();\r\n    }\r\n\r\n    public showNext() {\r\n        if ( ! this.meta.value.haveNext) return;\r\n        this.updateMeta('next');\r\n        this.updatePortal();\r\n    }\r\n\r\n    public showPrevious() {\r\n        if ( ! this.meta.value.havePrevious) return;\r\n        this.updateMeta('previous');\r\n        this.updatePortal();\r\n    }\r\n\r\n    private updateMeta(dir?: 'next'|'previous'|number) {\r\n        let newPointer = 0;\r\n\r\n        if (typeof dir === 'string') {\r\n            const oldPointer = this.meta.value.pointer;\r\n            newPointer = dir === 'next' ? oldPointer + 1 : oldPointer - 1;\r\n        } else if (typeof dir === 'number') {\r\n            newPointer = dir;\r\n        }\r\n\r\n        this.meta.next({\r\n            pointer: newPointer,\r\n            entry: this.files[newPointer],\r\n            total: this.files.length,\r\n            haveNext: (newPointer + 1) < this.files.length,\r\n            havePrevious: (newPointer - 1) > -1,\r\n        });\r\n    }\r\n\r\n    private updatePortal() {\r\n        const current = this.getCurrent();\r\n        const comp = (current && this.availablePreviews[current.type]) || DefaultPreviewComponent;\r\n        this.portal.next(new ComponentPortal(comp, null, this.createInjector()));\r\n    }\r\n\r\n    public set(files: FileEntry[], activeFile?: number) {\r\n        if ( ! files || files.length === 0) return;\r\n        this.files = files.filter(entry => entry.type !== 'folder');\r\n        this.updateMeta(activeFile);\r\n        this.updatePortal();\r\n    }\r\n\r\n    private createInjector(): PortalInjector {\r\n        const injectionTokens = new WeakMap();\r\n\r\n        // set currently active preview file\r\n        injectionTokens.set(CURRENT_PREVIEW_FILE, this.getCurrent());\r\n\r\n        // override preview backend uri, if specified\r\n        if (this.previewUriTransformer) {\r\n            injectionTokens.set(PREVIEW_URL_TRANSFORMER, this.previewUriTransformer);\r\n        }\r\n\r\n        return new PortalInjector(this.injector, injectionTokens);\r\n    }\r\n\r\n    public destroy() {\r\n        this.meta.next({});\r\n        this.files = null;\r\n        this.portal.next(null);\r\n    }\r\n\r\n    /**\r\n     * Provide transformer function for preview file backend url.\r\n     * (for changing base uri, adding url params etc)\r\n     */\r\n    public setPreviewUriTransformer(transformer: PreviewUrlTransformer) {\r\n        this.previewUriTransformer = transformer;\r\n    }\r\n}\r\n","<button mat-icon-button class=\"back-button\" (click)=\"closed.emit(true)\" *ngIf=\"showCloseButton\">\r\n    <mat-icon svgIcon=\"arrow-back\"></mat-icon>\r\n</button>\r\n<ng-container *ngIf=\"previewFiles.pagination() | async as pagination\">\r\n    <div class=\"entry-name\">\r\n        {{pagination.entry.name}}\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"previewFiles.pagination() | async as pagination\">\r\n        <div class=\"navigation\">\r\n            <button mat-icon-button class=\"previous\" [disabled]=\"!pagination.havePrevious\" (click)=\"previewFiles.showPrevious()\">\r\n                <mat-icon svgIcon=\"keyboard-arrow-left\"></mat-icon>\r\n            </button>\r\n\r\n            <span class=\"meta\">{{pagination.pointer + 1}} of {{pagination.total}}</span>\r\n\r\n            <button mat-icon-button class=\"next\" [disabled]=\"!pagination.haveNext\" (click)=\"previewFiles.showNext()\">\r\n                <mat-icon svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <div class=\"actions\">\r\n        <button mat-icon-button (click)=\"downloadFiles()\" [disabled]=\"disableDownload\">\r\n            <mat-icon svgIcon=\"file-download\"></mat-icon>\r\n        </button>\r\n        <ng-content></ng-content>\r\n    </div>\r\n</ng-container>\r\n<a routerLink=\"/drive\" class=\"logo\" *ngIf=\"showLogo && settings.has('branding.logo_light')\">\r\n    <img *ngIf=\"showLogo && settings.get('branding.logo_light')\" [src]=\"settings.getBaseUrl(true) + settings.get('branding.logo_light')\">\r\n</a>","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\r\nimport {PreviewFilesService} from '@common/file-preview/preview-files.service';\r\nimport {Settings} from '@common/core/config/settings.service';\r\n\r\n@Component({\r\n    selector: 'file-preview-toolbar',\r\n    templateUrl: './file-preview-toolbar.component.html',\r\n    styleUrls: ['./file-preview-toolbar.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FilePreviewToolbarComponent {\r\n    @Input() showLogo = false;\r\n    @Input() disableDownload = false;\r\n    @Input() showCloseButton = false;\r\n\r\n    @Output() closed = new EventEmitter();\r\n\r\n    constructor(\r\n        public previewFiles: PreviewFilesService,\r\n        public settings: Settings,\r\n    ) {}\r\n\r\n    public downloadFiles() {\r\n        this.previewFiles.download.next();\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Inject,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\r\nimport {PreviewFilesService} from '@common/file-preview/preview-files.service';\r\nimport {OVERLAY_PANEL_DATA} from '@common/core/ui/overlay-panel/overlay-panel-data';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {downloadFileFromUrl} from '@common/uploads/utils/download-file-from-url';\r\nimport {FileEntry} from '@common/uploads/types/file-entry';\r\n\r\nexport interface FilePreviewOverlayData {\r\n    entries: FileEntry[];\r\n    ticketEntry?: boolean;\r\n}\r\n\r\n@Component({\r\n    selector: 'file-preview-overlay',\r\n    templateUrl: './file-preview-overlay.component.html',\r\n    styleUrls: ['./file-preview-overlay.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FilePreviewOverlayComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    public entries: FileEntry[] = [];\r\n    @ViewChild('previewContainer', { read: ElementRef, static: true }) previewContainer: ElementRef;\r\n    @ViewChild('moreOptionsButton', { read: ElementRef, static: false }) optionsButton: ElementRef;\r\n    private downloadSub: Subscription;\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        private overlayRef: OverlayPanelRef,\r\n        private previewFiles: PreviewFilesService,\r\n        private settings: Settings,\r\n        @Inject(OVERLAY_PANEL_DATA) public data: FilePreviewOverlayData\r\n    ) {\r\n        this.entries = data.entries;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.data.ticketEntry) {\r\n            this.previewFiles.setPreviewUriTransformer(this.urlTransformer.bind(this));\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.bindToDownload();\r\n\r\n        this.previewContainer.nativeElement.addEventListener('click', e => {\r\n            if ( ! e.target.closest('.preview-object')) {\r\n                this.overlayRef.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.downloadSub.unsubscribe();\r\n    }\r\n\r\n    public closeOverlay() {\r\n        this.overlayRef.close();\r\n    }\r\n\r\n    private bindToDownload() {\r\n        this.downloadSub = this.previewFiles.download.subscribe(() => {\r\n            const entries = this.previewFiles.getAllEntries();\r\n            this.downloadFile(entries);\r\n        });\r\n    }\r\n\r\n    private downloadFile(entries: FileEntry[]) {\r\n        const hashes = entries.map(entry => entry.hash).join(',');\r\n        let url = `${this.settings.getBaseUrl()}secure/uploads/download?hashes=${hashes}`;\r\n        if (this.data.ticketEntry) url += '&ticketEntry=true';\r\n        downloadFileFromUrl(url);\r\n    }\r\n\r\n    public urlTransformer(entry: FileEntry) {\r\n        return `${entry.url}?ticketEntry=true`;\r\n    }\r\n}\r\n","<file-preview-toolbar [showCloseButton]=\"true\" (closed)=\"closeOverlay()\"></file-preview-toolbar>\r\n<preview-container [files]=\"entries\" #previewContainer></preview-container>","import {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FileMime {\r\n\r\n    /**\r\n     * Map of mime file type to material design icon name.\r\n     */\r\n    private iconsMap = {\r\n        text: 'insert-drive-file',\r\n        audio: 'volume-up',\r\n        video: 'videocam',\r\n        document: 'assignment',\r\n        image: 'image'\r\n    };\r\n\r\n    /**\r\n     * Return file type based on specified mime.\r\n     */\r\n    public getFileType(mime: string): string {\r\n        return mime.split('/')[0];\r\n    }\r\n\r\n    /**\r\n     * Return icon name based on specified mime.\r\n     */\r\n    public getIconName(mime: string): string {\r\n        const type = this.getFileType(mime);\r\n        return this.iconsMap[type] || this.iconsMap['text'];\r\n    }\r\n}\r\n","<div class=\"attachments-list-item\" *ngFor=\"let attachment of attachments\" (click)=\"showPreviewOverlay(attachment)\">\r\n    <mat-icon class=\"attachment-info type-icon\" [svgIcon]=\"mime.getIconName(attachment.mime)\" [ngClass]=\"mime.getIconName(attachment.mime)\"></mat-icon>\r\n    <div class=\"attachment-info name\">{{ attachment.name }}</div>\r\n    <div class=\"attachment-info size\">{{ attachment.file_size | formattedFileSize }}</div>\r\n    <button class=\"remove-attachment\"\r\n            type=\"button\"\r\n            mat-icon-button\r\n            *ngIf=\"cancelButtonVisible\"\r\n            (click)=\"detachEntry(attachment); $event.stopPropagation()\"\r\n    >\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation} from '@angular/core';\r\nimport {FileMime} from '../file-mime.service';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\nimport {FilePreviewOverlayComponent} from '../file-preview-overlay/file-preview-overlay.component';\r\nimport {FileEntry} from '@common/uploads/types/file-entry';\r\n\r\n@Component({\r\n    selector: 'reply-attachment-list',\r\n    templateUrl: './reply-attachment-list.component.html',\r\n    styleUrls: ['./reply-attachment-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ReplyAttachmentListComponent {\r\n    @Input() attachments: FileEntry[];\r\n    @Input() cancelButtonVisible = true;\r\n\r\n    @Output() detached: EventEmitter<FileEntry> = new EventEmitter();\r\n\r\n    constructor(\r\n        public mime: FileMime,\r\n        private overlay: OverlayPanel,\r\n        public uploadQueue: UploadQueueService,\r\n    ) {\r\n    }\r\n\r\n    public detachEntry(entry: FileEntry) {\r\n        const i = this.attachments.findIndex(ent => ent.id === entry.id);\r\n        if (i > -1) {\r\n            this.attachments.splice(i, 1);\r\n            this.detached.emit(entry);\r\n        }\r\n    }\r\n\r\n    public showPreviewOverlay(attachment: FileEntry) {\r\n        this.overlay.open(FilePreviewOverlayComponent, {\r\n                position: 'center',\r\n                origin: 'global',\r\n                data: {entries: [attachment], ticketEntry: true}\r\n            },\r\n        );\r\n    }\r\n}\r\n","import { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, mixinDisableRipple, mixinDisabled, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an event fired on an individual `mat-chip`.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nfunction MatChipEvent() { }\nif (false) {\n    /**\n     * The chip the event was fired on.\n     * @type {?}\n     */\n    MatChipEvent.prototype.chip;\n}\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\nif (false) {\n    /**\n     * Reference to the chip that emitted the event.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.source;\n    /**\n     * Whether the chip that emitted the event is selected.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.selected;\n    /**\n     * Whether the selection change was a result of a user interaction.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.isUserInput;\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?=} animationMode\n     * @param {?=} _changeDetectorRef\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode, _changeDetectorRef) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        /** @type {?} */\n        const basicChipAttrName = 'mat-basic-chip';\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._elementRef.nativeElement));\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._markForCheck();\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._markForCheck();\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            }));\n        }));\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _markForCheck() {\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler($event) { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler($event) { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disabled: \"disabled\", disableRipple: \"disableRipple\", selected: \"selected\", value: \"value\", selectable: \"selectable\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: ChangeDetectorRef }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatChipRemove)),] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip',\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MatChipAvatar]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MatChipTrailingIcon]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatChipRemove))]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selected;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selectable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_removable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disableRipple;\n    /**\n     * Reference to the RippleRenderer for the chip.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRipple;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\n     * is set to the global ripple options since we don't have any configurable options for\n     * the chip ripples.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChip.prototype.rippleConfig;\n    /**\n     * Whether the chip has focus.\n     * @type {?}\n     */\n    MatChip.prototype._hasFocus;\n    /**\n     * Whether animations for the chip are enabled.\n     * @type {?}\n     */\n    MatChip.prototype._animationsDisabled;\n    /**\n     * Whether the chip list is selectable\n     * @type {?}\n     */\n    MatChip.prototype.chipListSelectable;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     * @type {?}\n     */\n    MatChip.prototype._chipListMultiple;\n    /**\n     * The chip avatar\n     * @type {?}\n     */\n    MatChip.prototype.avatar;\n    /**\n     * The chip's trailing icon.\n     * @type {?}\n     */\n    MatChip.prototype.trailingIcon;\n    /**\n     * The chip's remove toggler.\n     * @type {?}\n     */\n    MatChip.prototype.removeIcon;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selected;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selectable;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._removable;\n    /**\n     * Emits when the chip is focused.\n     * @type {?}\n     */\n    MatChip.prototype._onFocus;\n    /**\n     * Emits when the chip is blured.\n     * @type {?}\n     */\n    MatChip.prototype._onBlur;\n    /**\n     * Emitted when the chip is selected or deselected.\n     * @type {?}\n     */\n    MatChip.prototype.selectionChange;\n    /**\n     * Emitted when the chip is destroyed.\n     * @type {?}\n     */\n    MatChip.prototype.destroyed;\n    /**\n     * Emitted when a chip is to be removed.\n     * @type {?}\n     */\n    MatChip.prototype.removed;\n    /** @type {?} */\n    MatChip.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._changeDetectorRef;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     */\n    constructor(_parentChip) {\n        this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        /** @type {?} */\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [\"type\", \"button\", 1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } } });\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)',\n                    // Prevent accidental form submissions.\n                    'type': 'button'\n                }\n            }]\n    }], function () { return [{ type: MatChip }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipRemove.prototype._parentChip;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-default-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default options, for the chips module, that can be overridden.\n * @record\n */\nfunction MatChipsDefaultOptions() { }\nif (false) {\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     * @type {?}\n     */\n    MatChipsDefaultOptions.prototype.separatorKeyCodes;\n}\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipListBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatChipListBase.prototype._parentForm;\n    /** @type {?} */\n    MatChipListBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipListBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * Chip list that emitted the event.\n     * @type {?}\n     */\n    MatChipListChange.prototype.source;\n    /**\n     * Value of the chip list when the event was emitted.\n     * @type {?}\n     */\n    MatChipListChange.prototype.value;\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Function when changed\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._multiple = false;\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.chipListSelectable = this._selectable));\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.selectionChange)));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onFocus)));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onBlur)));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.destroyed)));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            dir => this._keyManager.withHorizontalOrientation(dir)));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._syncChipsState();\n                }));\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                /** @type {?} */\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.deselect()));\n        if (Array.isArray(value)) {\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            currentValue => this._selectValue(currentValue, isUserInput)));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        }));\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        }));\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        }));\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.value));\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                }));\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach((/**\n                 * @param {?} chip\n                 * @return {?}\n                 */\n                chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                }));\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        }));\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        }));\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._blur();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        }));\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._hasFocus));\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                chip.disabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            }));\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler($event) { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler($event) { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_required;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_selectable;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.controlType;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._lastDestroyedChipIndex;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._destroyed;\n    /**\n     * Subscription to focus changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipFocusSubscription;\n    /**\n     * Subscription to blur changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipBlurSubscription;\n    /**\n     * Subscription to selection changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipSelectionSubscription;\n    /**\n     * Subscription to remove changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipRemoveSubscription;\n    /**\n     * The chip input to add more chips\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._chipInput;\n    /**\n     * Uid of the chip list\n     * @type {?}\n     */\n    MatChipList.prototype._uid;\n    /**\n     * The aria-describedby attribute on the chip list for improved a11y.\n     * @type {?}\n     */\n    MatChipList.prototype._ariaDescribedby;\n    /**\n     * Tab index for the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype._tabIndex;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     * @type {?}\n     */\n    MatChipList.prototype._userTabIndex;\n    /**\n     * The FocusKeyManager which handles focus.\n     * @type {?}\n     */\n    MatChipList.prototype._keyManager;\n    /**\n     * Function when touched\n     * @type {?}\n     */\n    MatChipList.prototype._onTouched;\n    /**\n     * Function when changed\n     * @type {?}\n     */\n    MatChipList.prototype._onChange;\n    /** @type {?} */\n    MatChipList.prototype._selectionModel;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatChipList.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._compareWith;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._disabled;\n    /**\n     * Orientation of the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.ariaOrientation;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._selectable;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     * @type {?}\n     */\n    MatChipList.prototype.change;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.valueChange;\n    /**\n     * The chip components contained within this chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.chips;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._dir;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.ngControl;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an input event on a `matChipInput`.\n * @record\n */\nfunction MatChipInputEvent() { }\nif (false) {\n    /**\n     * The native `<input>` element that the event is being fired for.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.input;\n    /**\n     * The value of the input.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.value;\n}\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler($event) { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler($event) { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler($event) { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_addOnBlur;\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_disabled;\n    /**\n     * Whether the control is focused.\n     * @type {?}\n     */\n    MatChipInput.prototype.focused;\n    /** @type {?} */\n    MatChipInput.prototype._chipList;\n    /** @type {?} */\n    MatChipInput.prototype._addOnBlur;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     * @type {?}\n     */\n    MatChipInput.prototype.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     * @type {?}\n     */\n    MatChipInput.prototype.chipEnd;\n    /**\n     * The input's placeholder text.\n     * @type {?}\n     */\n    MatChipInput.prototype.placeholder;\n    /**\n     * Unique id for the input.\n     * @type {?}\n     */\n    MatChipInput.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._disabled;\n    /**\n     * The native input element to which this directive is attached.\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._defaultOptions;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chips-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); }, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ( /** @type {?} */(ɵ0))\n        }\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon], exports: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ( /** @type {?} */(ɵ0))\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };\n\n//# sourceMappingURL=chips.js.map","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TextPreviewComponent} from './text-preview/text-preview.component';\r\nimport {AVAILABLE_PREVIEWS, DefaultPreviews} from './available-previews';\r\nimport {PreviewContainerComponent} from './preview-container/preview-container.component';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {VideoPreviewComponent} from './video-preview/video-preview.component';\r\nimport {ImagePreviewComponent} from './image-preview/image-preview.component';\r\nimport {PdfPreviewComponent} from './pdf-preview/pdf-preview.component';\r\nimport {DefaultPreviewComponent} from './default-preview/default-preview.component';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {AudioPreviewComponent} from './audio-preview/audio-preview.component';\r\nimport {GoogleDocsViewerComponent} from './google-docs-viewer/google-docs-viewer.component';\r\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {PreviewFilesService} from '@common/file-preview/preview-files.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n\r\n        // material\r\n        PortalModule,\r\n        MatButtonModule,\r\n        LoadingIndicatorModule,\r\n    ],\r\n    exports: [\r\n        PreviewContainerComponent,\r\n    ],\r\n    declarations: [\r\n        PreviewContainerComponent,\r\n        TextPreviewComponent,\r\n        VideoPreviewComponent,\r\n        ImagePreviewComponent,\r\n        PdfPreviewComponent,\r\n        DefaultPreviewComponent,\r\n        AudioPreviewComponent,\r\n        GoogleDocsViewerComponent\r\n    ],\r\n    entryComponents: [\r\n        TextPreviewComponent,\r\n        VideoPreviewComponent,\r\n        ImagePreviewComponent,\r\n        PdfPreviewComponent,\r\n        DefaultPreviewComponent,\r\n        AudioPreviewComponent,\r\n        GoogleDocsViewerComponent,\r\n    ],\r\n    providers: [\r\n        OverlayPanel,\r\n        PreviewFilesService,\r\n        {provide: AVAILABLE_PREVIEWS, useClass: DefaultPreviews},\r\n    ]\r\n})\r\nexport class FilePreviewModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {UploadButtonDirective} from './directives/upload-button.directive';\r\nimport {UploadDropzoneDirective} from './directives/upload-dropzone.directive';\r\nimport {UploadProgressBarComponent} from './upload-progress-bar/upload-progress-bar.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n\r\n        // material\r\n        MatButtonModule,\r\n        MatProgressBarModule,\r\n        MatIconModule,\r\n    ],\r\n    declarations: [\r\n        UploadDropzoneDirective,\r\n        UploadButtonDirective,\r\n        UploadProgressBarComponent,\r\n    ],\r\n    exports: [\r\n        UploadDropzoneDirective,\r\n        UploadButtonDirective,\r\n        UploadProgressBarComponent,\r\n    ],\r\n})\r\nexport class UploadsModule {\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\r\nimport {BackendResponse} from '@common/core/types/backend-response';\r\nimport {Tag} from './models/Tag';\r\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\r\nimport {PaginationParams} from '@common/core/types/pagination/pagination-params';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TagService {\r\n    private baseUri = 'tags';\r\n\r\n    constructor(private http: HttpCacheClient) {}\r\n\r\n    public getTags(params?: PaginationParams): PaginatedBackendResponse<Tag> {\r\n        return this.http.getWithCache(this.baseUri, params);\r\n    }\r\n\r\n    public createNew(data: Partial<Tag>): BackendResponse<{tag: Tag}> {\r\n        return this.http.post(this.baseUri, data);\r\n    }\r\n\r\n    public update(id: number, data: Partial<Tag>): BackendResponse<{tag: Tag}> {\r\n        return this.http.put(this.baseUri + '/' + id, data);\r\n    }\r\n\r\n    public deleteMultiple(ids: number[]) {\r\n        return this.http.delete(this.baseUri + '/delete-multiple', {ids});\r\n    }\r\n\r\n    public search(query: string, params: PaginationParams = {}): PaginatedBackendResponse<Tag> {\r\n        params = {\r\n            ...{query, notType: 'status', perPage: 10},\r\n            ...params\r\n        };\r\n        return this.http.get(this.baseUri, params);\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReplyAttachmentListComponent} from './reply-attachment-list.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {FormatPipesModule} from '@common/core/ui/format-pipes/format-pipes.module';\nimport {FilePreviewOverlayComponent} from '../file-preview-overlay/file-preview-overlay.component';\nimport {FilePreviewToolbarComponent} from '../file-preview-overlay/file-preview-toolbar/file-preview-toolbar.component';\nimport {FilePreviewModule} from '@common/file-preview/file-preview.module';\n\n@NgModule({\n    declarations: [\n        ReplyAttachmentListComponent,\n        FilePreviewOverlayComponent,\n        FilePreviewToolbarComponent,\n    ],\n    imports: [\n        CommonModule,\n        FilePreviewModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        FormatPipesModule,\n    ],\n    exports: [\n        ReplyAttachmentListComponent,\n    ],\n})\nexport class ReplyAttachmentListModule {\n}\n","import {Injectable, NgZone} from '@angular/core';\r\nimport {Settings} from '../../core/config/settings.service';\r\nimport {LazyLoaderService} from '../../core/utils/lazy-loader.service';\r\nimport {BreakpointsService} from '../../core/ui/breakpoints.service';\r\nimport {Editor, EditorManager} from 'tinymce';\r\nimport {Translations} from '../../core/translations/translations.service';\r\n\r\nconst EDITOR_TOOLBAR_HEIGHT = 74;\r\n\r\ndeclare const tinymce: EditorManager;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TinymceTextEditor {\r\n    private bootstrapPromise: Promise<Editor> | boolean;\r\n    private bootstrapPromiseResolve: any;\r\n    private config: { [key: string]: any };\r\n    public tinymceInstance: Editor|any;\r\n\r\n    constructor(\r\n        private settings: Settings,\r\n        private zone: NgZone,\r\n        private lazyLoader: LazyLoaderService,\r\n        private breakpoints: BreakpointsService,\r\n        private i18n: Translations,\r\n    ) {\r\n        this.makeBootstrapPromise();\r\n    }\r\n\r\n    public reset() {\r\n        if (!this.editorIsReady()) return;\r\n        this.tinymceInstance.setContent('');\r\n        this.tinymceInstance.undoManager.clear();\r\n    }\r\n\r\n    public focus() {\r\n        this.waitForEditor().then(() => {\r\n            this.tinymceInstance.focus(false);\r\n        });\r\n    }\r\n\r\n    public hasUndo(): boolean {\r\n        return this.editorIsReady() && this.tinymceInstance.undoManager.hasUndo();\r\n    }\r\n\r\n    public hasRedo(): boolean {\r\n        return this.editorIsReady() && this.tinymceInstance.undoManager.hasRedo();\r\n    }\r\n\r\n    /**\r\n     * Queries the current state for specified tinymce command.\r\n     * For example if the current selection is \"bold\".\r\n     */\r\n    public queryCommandState(name: string): boolean | number {\r\n        return this.editorIsReady() && this.tinymceInstance.queryCommandState(name);\r\n    }\r\n\r\n    public execCommand(name: string, value: string | number = null) {\r\n        this.waitForEditor().then(() => {\r\n            this.zone.run(() => {\r\n                this.tinymceInstance.execCommand(name, false, value);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getContents(params?: Object): string {\r\n        if (!this.editorIsReady()) return '';\r\n        return this.tinymceInstance.getContent(params);\r\n    }\r\n\r\n    public setContents(contents: string) {\r\n        this.waitForEditor().then(() => {\r\n            if (!this.tinymceInstance.undoManager) return;\r\n\r\n            this.tinymceInstance.undoManager.transact(() => {\r\n                this.tinymceInstance.setContent(contents);\r\n            });\r\n\r\n            this.tinymceInstance.selection.setCursorLocation();\r\n            this.tinymceInstance.nodeChanged();\r\n            this.tinymceInstance.execCommand('mceResize');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert specified contents at the end of tinymce.\r\n     */\r\n    public insertContents(contents) {\r\n        this.waitForEditor().then(() => {\r\n            this.tinymceInstance.execCommand('mceInsertContent', false, contents);\r\n            setTimeout(() => this.tinymceInstance.selection.collapse());\r\n        });\r\n    }\r\n\r\n    public insertImage(url: string) {\r\n        this.waitForEditor().then(() => {\r\n            this.insertContents('<img src=\"' + url + '\"/>');\r\n            setTimeout(() => this.execCommand('mceAutoResize'), 500);\r\n        });\r\n    }\r\n\r\n    public waitForEditor(): Promise<Editor> {\r\n        // editor already bootstrapped\r\n        if (this.tinymceInstance) {\r\n            return new Promise(resolve => resolve(this.tinymceInstance));\r\n        }\r\n        // editor is still bootstrapping\r\n        if (this.bootstrapPromise) {\r\n            return this.bootstrapPromise as Promise<Editor>;\r\n        }\r\n    }\r\n\r\n    public setConfig(config: object) {\r\n        this.config = config;\r\n        this.loadTinymce().then(() => {\r\n            this.initTinymce();\r\n        });\r\n    }\r\n\r\n    private editorIsReady(): boolean {\r\n        return !this.bootstrapPromise && !!this.tinymceInstance && !!this.tinymceInstance.undoManager;\r\n    }\r\n\r\n    private loadTinymce(): Promise<any> {\r\n        return this.lazyLoader.loadAsset('js/tinymce/tinymce.min.js', {type: 'js'});\r\n    }\r\n\r\n    private initTinymce() {\r\n        const config: any = {\r\n            target: this.config.textAreaEl.nativeElement,\r\n            plugins: ['link', 'codesample', 'paste', 'autoresize'],\r\n            branding: false,\r\n            browser_spellcheck: true,\r\n            max_height: this.config.maxHeight,\r\n            min_height: this.config.minHeight,\r\n            autoresize_on_init: false,\r\n            paste_as_text: true,\r\n            elementpath: false,\r\n            statusbar: false,\r\n            menubar: false,\r\n            convert_urls: false,\r\n            forced_root_block: false,\r\n            element_format: 'html',\r\n            body_class: 'editor-body',\r\n            content_style: `html {font-size: 62.5%;}\r\n.editor-body {font-size: 1.4rem;font-family: \"Roboto\", \"Helvetica Neue\", sans-serif;color: rgba(0, 0, 0, .87);}\r\nimg {max-width: 100%}\r\ncode[class*=language-], pre[class*=language-] {font-size: inherit;}`,\r\n            content_css: ['https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic'],\r\n            default_link_target: '_blank',\r\n            link_assume_external_targets: true,\r\n            target_list: false,\r\n            link_title: false,\r\n            image_dimensions: false,\r\n            image_description: false,\r\n            setup: editor => {\r\n                this.tinymceInstance = editor;\r\n                editor.on('change', () => this.config.onChange.emit(editor.getContent()));\r\n\r\n                editor.on('click', () => {\r\n                    // need to run angular zone on editor (iframe) click\r\n                    // so custom editor buttons are highlighted properly\r\n                    this.zone.run(() => {\r\n                    });\r\n                });\r\n\r\n                editor.shortcuts.add('ctrl+13', 'desc', () => {\r\n                    this.zone.run(() => {\r\n                        this.config.onChange.emit(editor.getContent());\r\n                        this.config.onCtrlEnter.emit();\r\n                    });\r\n                });\r\n            },\r\n            init_instance_callback: () => {\r\n                this.bootstrapPromise = false;\r\n                this.bootstrapPromiseResolve(this.tinymceInstance);\r\n            }\r\n        };\r\n\r\n        // need to show toolbar on mobile, otherwise tinymce will error out\r\n        if (!this.breakpoints.isMobile$.value) {\r\n            config.toolbar = false;\r\n        }\r\n\r\n        if (this.config['showAdvancedControls']) {\r\n            config.plugins = config.plugins.concat(['media', 'hr', 'visualblocks', 'visualchars', 'wordcount']);\r\n            config.forced_root_block = 'p';\r\n            config.statusbar = true;\r\n            config.autoresize_on_init = true;\r\n            config.extended_valid_elements = 'svg[*],use[*],iframe[src],script[src]';\r\n            config.elementpath = true;\r\n            config.content_css.push(this.settings.getAssetUrl() + 'css/advanced-editor-styles.css');\r\n            config.target_list = [\r\n                {title: this.i18n.t('Current window'), value: ''},\r\n                {title: this.i18n.t('New Window'), value: '_blank'},\r\n            ];\r\n        }\r\n\r\n        if (this.config['minHeight'] === 'auto') {\r\n            const height = this.config.editorEl.nativeElement.parentElement.offsetHeight - EDITOR_TOOLBAR_HEIGHT - 4;\r\n            config.min_height = height;\r\n            config.max_height = height;\r\n        }\r\n\r\n        tinymce.init(config);\r\n    }\r\n\r\n    public destroyEditor() {\r\n        // catch error that sometimes occurs on EDGE when\r\n        // trying to destroy editor that is no longer in the DOM\r\n        try {\r\n            if (this.tinymceInstance) {\r\n                this.tinymceInstance.remove();\r\n            }\r\n\r\n            this.tinymceInstance = null;\r\n            this.makeBootstrapPromise();\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a tinymce bootstrap promise.\r\n     */\r\n    private makeBootstrapPromise() {\r\n        this.bootstrapPromise = new Promise(resolve => this.bootstrapPromiseResolve = resolve);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UploadValidator } from '../../uploads/validation/upload-validator';\r\nimport { FileSizeValidation } from '../../uploads/validation/validations/file-size-validation';\r\nimport { convertToBytes } from '../../core/utils/convertToBytes';\r\nimport { FileTypeValidation } from '../../uploads/validation/validations/file-type-validation';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TextEditorImageValidator extends UploadValidator {\r\n    protected readonly DEFAULT_MAX_SIZE_MB = 3;\r\n\r\n    protected initValidations() {\r\n        const validations = [\r\n            new FileSizeValidation(\r\n                {maxSize: convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')},\r\n                this.i18n\r\n            ),\r\n            new FileTypeValidation({types: ['image']}, this.i18n),\r\n        ];\r\n\r\n        this.validations.push(...validations);\r\n    }\r\n}\r\n","<div class=\"editor-header\">\r\n    <div class=\"toolbar-row\">\r\n        <div class=\"header-actions\" *ngIf=\"inlineUploadPrefix && currentUser.hasPermission('files.create')\">\r\n            <button class=\"no-style editor-button\" type=\"button\" [matTooltip]=\"'Add Attachment' | trans\"\r\n                    (click)=\"openFileUploadDialog()\">\r\n                <mat-icon svgIcon=\"attachment\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\" *ngIf=\"!basic\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('codesample')\"\r\n                    [matTooltip]=\"'Insert Code Sample' | trans\">\r\n                <mat-icon svgIcon=\"code\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('undo')\"\r\n                    [class.disabled]=\"!hasUndo()\" [matTooltip]=\"'Undo' | trans\">\r\n                <mat-icon svgIcon=\"undo\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('redo')\"\r\n                    [class.disabled]=\"!hasRedo()\" [matTooltip]=\"'Redo' | trans\">\r\n                <mat-icon svgIcon=\"redo\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('bold')\"\r\n                    [class.active]=\"queryCommandState('bold')\" [matTooltip]=\"'Bold' | trans\">\r\n                <mat-icon svgIcon=\"format-bold\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('italic')\"\r\n                    [class.active]=\"queryCommandState('italic')\" [matTooltip]=\"'Italic' | trans\">\r\n                <mat-icon svgIcon=\"format-italic\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('underline')\"\r\n                    [class.active]=\"queryCommandState('underline')\" [matTooltip]=\"'Underline' | trans\">\r\n                <mat-icon svgIcon=\"format-underlined\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('insertunorderedlist')\"\r\n                    [class.active]=\"queryCommandState('unorderedlist')\" [matTooltip]=\"'Unordered List' | trans\">\r\n                <mat-icon svgIcon=\"format-list-bulleted\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('insertorderedlist')\"\r\n                    [class.active]=\"queryCommandState('orderedlist')\" [matTooltip]=\"'Ordered List' | trans\">\r\n                <mat-icon svgIcon=\"format-list-numbered\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\" *ngIf=\"!basic\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('mceLink')\"\r\n                    [class.active]=\"queryCommandState('link')\" [matTooltip]=\"'Insert Link' | trans\">\r\n                <mat-icon svgIcon=\"link\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button image-modal-button\" (click)=\"openInsertImageModal()\"\r\n                    *ngIf=\"currentUser.hasPermission('files.create')\" [matTooltip]=\"'Insert Image' | trans\">\r\n                <mat-icon svgIcon=\"image\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <ng-content select=\"[customButtons]\"></ng-content>\r\n\r\n        <div class=\"header-actions last\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('removeformat')\"\r\n                    [matTooltip]=\"'Remove Formatting' | trans\">\r\n                <mat-icon svgIcon=\"format-clear\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <ng-content select=\"[header]\"></ng-content>\r\n    </div>\r\n    <div class=\"toolbar-row\" *ngIf=\"showAdvancedControls\">\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" [matMenuTriggerFor]=\"insertMenu\"\r\n                    class=\"no-style editor-button text-button insert-button\">\r\n                <span trans>Insert</span>\r\n                <mat-icon svgIcon=\"arrow-drop-down\" class=\"caret\"></mat-icon>\r\n            </button>\r\n            <mat-menu #insertMenu>\r\n                <div mat-menu-item (click)=\"execCommand('InsertHorizontalRule')\">\r\n                    <mat-icon svgIcon=\"remove\"></mat-icon>\r\n                    <span trans>Horizontal Line</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('mceLink')\">\r\n                    <mat-icon svgIcon=\"link\"></mat-icon>\r\n                    <span trans>Link</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('mceMedia')\">\r\n                    <mat-icon svgIcon=\"videocam\"></mat-icon>\r\n                    <span trans>Media</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"insertInfoContainer('important')\" trans>\r\n                    <mat-icon svgIcon=\"star\"></mat-icon>\r\n                    <span trans>Important</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"insertInfoContainer('warning')\" trans>\r\n                    <mat-icon svgIcon=\"warning\"></mat-icon>\r\n                    <span trans>Warning</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"insertInfoContainer('note')\" trans>\r\n                    <mat-icon svgIcon=\"note\"></mat-icon>\r\n                    <span trans>Note</span>\r\n                </div>\r\n            </mat-menu>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" [matMenuTriggerFor]=\"formatMenu\" class=\"no-style editor-button text-button format-button\">\r\n                <span trans>Format</span>\r\n                <mat-icon svgIcon=\"arrow-drop-down\" class=\"caret\"></mat-icon>\r\n            </button>\r\n            <mat-menu #formatMenu class=\"format-menu menu-with-alt-text\">\r\n                <div mat-menu-item (click)=\"execCommand('FormatBlock', 'h1')\">\r\n                    <div class=\"text\" trans>Heading 1</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+1</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('FormatBlock', 'h2')\">\r\n                    <div class=\"text\" trans>Heading 2</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+2</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('FormatBlock', 'h3')\">\r\n                    <div class=\"text\" trans>Heading 3</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+3</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('strikethrough')\">\r\n                    <div class=\"text\" trans>Strikethrough</div>\r\n                    <div class=\"alt-text\">Alt+Shift+5</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('superscript')\">\r\n                    <div class=\"text\" trans>Superscript</div>\r\n                    <div class=\"alt-text\">Ctrl+.</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('subscript')\">\r\n                    <div class=\"text\" trans>Subscript</div>\r\n                    <div class=\"alt-text\">Ctrl+,</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('mceBlockQuote')\">\r\n                    <div class=\"text\" trans>Blockquote</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+B</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('FormatBlock', 'p')\">\r\n                    <div class=\"text\" trans>Paragraph</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+0</div>\r\n                </div>\r\n            </mat-menu>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" [matMenuTriggerFor]=\"colorMenu\" class=\"no-style editor-button text-button color-button\" #colorPickerOrigin>\r\n                <span trans>Color</span>\r\n                <mat-icon svgIcon=\"arrow-drop-down\" class=\"caret\"></mat-icon>\r\n            </button>\r\n            <mat-menu #colorMenu class=\"color-dropdown\">\r\n                <div mat-menu-item class=\"text-color-item\" (click)=\"showColorPicker('ForeColor', colorPickerOrigin)\">\r\n                    <mat-icon svgIcon=\"format-color-text\"></mat-icon>\r\n                    <span trans>Text Color</span>\r\n                </div>\r\n                <div mat-menu-item class=\"bg-color-item\" (click)=\"showColorPicker('HiliteColor', colorPickerOrigin)\">\r\n                    <mat-icon svgIcon=\"format-color-fill\"></mat-icon>\r\n                    <span trans>Background Color</span>\r\n                </div>\r\n            </mat-menu>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('justifyLeft')\"\r\n                    [class.active]=\"queryCommandState('justifyLeft')\" [matTooltip]=\"'Align Left' | trans\">\r\n                <mat-icon svgIcon=\"format-align-left\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('justifyCenter')\"\r\n                    [class.active]=\"queryCommandState('justifyCenter')\" [matTooltip]=\"'Center' | trans\">\r\n                <mat-icon svgIcon=\"format-align-center\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('justifyRight')\"\r\n                    [class.active]=\"queryCommandState('justifyRight')\" [matTooltip]=\"'Align Right' | trans\">\r\n                <mat-icon svgIcon=\"format-align-right\"></mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('Outdent')\" [matTooltip]=\"'Decrease Indent' | trans\">\r\n                <mat-icon svgIcon=\"format-indent-decrease\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('Indent')\" [matTooltip]=\"'Increase Indent' | trans\">\r\n                <mat-icon svgIcon=\"format-indent-increase\"></mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"header-actions editor-toggle-buttons\">\r\n            <button type=\"button\" class=\"no-style editor-button visual-mode-button\"\r\n                    [class.active]=\"activeEditor === 'visual'\" (click)=\"showVisualEditor()\" trans>Visual\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button source-mode-button\"\r\n                    [class.active]=\"activeEditor === 'source'\" (click)=\"showSourceEditor()\" trans>Source\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<textarea class=\"source-textarea\" #sourceArea rows=\"8\" [style.min-height]=\"minHeight\" style=\"display: none\" [formControl]=\"sourceAreaControl\" (blur)=\"setContents(sourceAreaControl.value)\"></textarea>\r\n<textarea class=\"visual-textarea\" #visualArea rows=\"8\" [style.min-height]=\"minHeight\"></textarea>\r\n\r\n<ng-content select=\"[footer]\"></ng-content>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    Output,\r\n    Renderer2,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {TinymceTextEditor} from './editors/tinymce-text-editor.service';\r\nimport {Settings} from '../core/config/settings.service';\r\nimport {OverlayPanel} from '../core/ui/overlay-panel/overlay-panel.service';\r\nimport {openUploadWindow} from '../uploads/utils/open-upload-window';\r\nimport {UploadQueueService} from '../uploads/upload-queue/upload-queue.service';\r\nimport {TextEditorImageValidator} from './validation/text-editor-image-validator';\r\nimport {UploadInputTypes} from '../uploads/upload-input-config';\r\nimport {CurrentUser} from '../auth/current-user';\r\nimport {BOTTOM_POSITION} from '../core/ui/overlay-panel/positions/bottom-position';\r\nimport {ucFirst} from '../core/utils/uc-first';\r\nimport {FormControl} from '@angular/forms';\r\nimport {debounceTime} from 'rxjs/operators';\r\nimport {UploadUri} from '@common/uploads/types/upload-uri.enum';\r\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\r\nimport {UploadedFile} from '@common/uploads/uploaded-file';\r\n\r\nexport interface LinkAttrs {\r\n    text: string;\r\n    href: string;\r\n    target?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'text-editor',\r\n    templateUrl: './text-editor.component.html',\r\n    styleUrls: ['./text-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [\r\n        UploadQueueService,\r\n    ]\r\n})\r\nexport class TextEditorComponent implements OnDestroy, AfterViewInit {\r\n    @ViewChild('visualArea', { static: true }) visualTextArea: ElementRef;\r\n    @ViewChild('sourceArea', { static: true }) sourceTextArea: ElementRef;\r\n\r\n    public sourceAreaControl = new FormControl();\r\n    public activeEditor = 'visual';\r\n\r\n    @Input() showAdvancedControls = false;\r\n    @Input() basic = false;\r\n    @Input() minHeight: number|string = 183;\r\n    @Input() maxHeight = 530;\r\n    @Input() inlineUploadPrefix: string;\r\n\r\n    @Output() onChange: EventEmitter<string> = new EventEmitter();\r\n    @Output() onCtrlEnter = new EventEmitter();\r\n    @Output() onFileUpload = new EventEmitter<UploadedFile[]>();\r\n\r\n    constructor(\r\n        public editor: TinymceTextEditor,\r\n        public currentUser: CurrentUser,\r\n        private uploadQueue: UploadQueueService,\r\n        private settings: Settings,\r\n        private renderer: Renderer2,\r\n        public el: ElementRef,\r\n        private overlayPanel: OverlayPanel,\r\n        private imageValidator: TextEditorImageValidator,\r\n    ) {}\r\n\r\n    ngAfterViewInit() {\r\n        this.bootTextEditor();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroyEditor();\r\n    }\r\n\r\n    public reset() {\r\n        this.editor.reset();\r\n    }\r\n\r\n    public focus() {\r\n        this.editor.focus();\r\n    }\r\n\r\n    public hasUndo(): boolean {\r\n        return this.editor.hasUndo();\r\n    }\r\n\r\n    public hasRedo(): boolean {\r\n        return this.editor.hasRedo();\r\n    }\r\n\r\n    /**\r\n     * Queries the current state for specified text editor command.\r\n     * For example if the current selection is \"bold\".\r\n     */\r\n    public queryCommandState(name: string): boolean|number {\r\n        return this.editor.queryCommandState(name);\r\n    }\r\n\r\n    public execCommand(name: string, value: string|number = null) {\r\n        this.editor.execCommand(name, value);\r\n    }\r\n\r\n    /**\r\n     * Insert information container of specified type into the editor.\r\n     */\r\n    public insertInfoContainer(type: string) {\r\n        // TODO: refactor into shortcodes maybe if need more of similar buttons in the future\r\n        // TODO: translate once angular translation service is available\r\n        this.insertContents(\r\n            `<div class=\"widget widget-${type}\"><div class=\"title\">${ucFirst(type)}:</div><br></div><br>`\r\n        );\r\n    }\r\n\r\n    public async showColorPicker(command: string, origin: HTMLElement) {\r\n        const { BeColorPickerModule } = await import('@common/core/ui/color-picker/be-color-picker.module');\r\n        this.overlayPanel.open(BeColorPickerModule.components.panel, {origin: new ElementRef(origin), position: BOTTOM_POSITION})\r\n            .valueChanged().pipe(debounceTime(50)).subscribe(color => {\r\n                this.execCommand(command, color);\r\n            });\r\n    }\r\n\r\n    public showVisualEditor() {\r\n        if ( ! this.editor.tinymceInstance.contentAreaContainer || this.activeEditor === 'visual') return;\r\n\r\n        this.activeEditor = 'visual';\r\n\r\n        this.renderer.setStyle(this.editor.tinymceInstance.contentAreaContainer, 'display', 'block');\r\n        this.renderer.setStyle(this.sourceTextArea.nativeElement, 'display', 'none');\r\n\r\n        this.editor.focus();\r\n    }\r\n\r\n    public showSourceEditor() {\r\n        if ( ! this.editor.tinymceInstance.contentAreaContainer || this.activeEditor === 'source') return;\r\n\r\n        this.activeEditor = 'source';\r\n\r\n        this.renderer.setStyle(this.sourceTextArea.nativeElement, 'height', this.editor.tinymceInstance.contentAreaContainer.offsetHeight + 'px');\r\n        this.renderer.setStyle(this.sourceTextArea.nativeElement, 'display', 'block');\r\n        this.renderer.setStyle(this.editor.tinymceInstance.contentAreaContainer, 'display', 'none');\r\n\r\n        this.sourceAreaControl.setValue(this.editor.getContents({source_view: true}));\r\n    }\r\n\r\n    public openFileUploadDialog() {\r\n        openUploadWindow({multiple: true}).then(fileList => {\r\n            this.onFileUpload.emit(fileList);\r\n        });\r\n    }\r\n\r\n    public openInsertImageModal() {\r\n        const params: UploadApiConfig = {\r\n            uri: UploadUri.Image,\r\n            validator: this.imageValidator,\r\n            httpParams: {diskPrefix: this.inlineUploadPrefix}\r\n        };\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(files => {\r\n            this.uploadQueue.start(files, params).subscribe(response => {\r\n                this.insertImage(this.settings.getBaseUrl(true) + response.fileEntry.url);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getContents(): string {\r\n        return this.editor.getContents();\r\n    }\r\n\r\n    public setContents(contents: string) {\r\n        this.editor.setContents(contents);\r\n    }\r\n\r\n    public insertContents(contents) {\r\n        this.editor.insertContents(contents);\r\n    }\r\n\r\n    public insertImage(url: string) {\r\n        this.editor.insertImage(url);\r\n    }\r\n\r\n    public insertLink(attrs: LinkAttrs) {\r\n        const target = attrs.target || 'self';\r\n        this.insertContents(`<a href=\"${attrs.href}\" target=\"${target}\">${attrs.text}</a>`);\r\n    }\r\n\r\n    public destroyEditor() {\r\n        this.editor.destroyEditor();\r\n    }\r\n\r\n    private bootTextEditor() {\r\n        this.editor.setConfig({\r\n            textAreaEl: this.visualTextArea,\r\n            editorEl: this.el,\r\n            minHeight: this.minHeight,\r\n            maxHeight: this.maxHeight,\r\n            onChange: this.onChange,\r\n            onCtrlEnter: this.onCtrlEnter,\r\n            showAdvancedControls: this.showAdvancedControls,\r\n        });\r\n    }\r\n}\r\n","import { EventEmitter, HostBinding, Inject, Directive } from '@angular/core';\r\nimport { CURRENT_PREVIEW_FILE } from './current-preview-file';\r\nimport { FileEntry } from '../uploads/types/file-entry';\r\nimport { PREVIEW_URL_TRANSFORMER, PreviewUrlTransformer } from './preview-url-transformer';\r\nimport { Settings } from '../core/config/settings.service';\r\nimport { Observable } from 'rxjs';\r\nimport { AppHttpClient } from '../core/http/app-http-client.service';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { CurrentUser } from '../auth/current-user';\r\n\r\n@Directive()\nexport abstract class BaseFilePreview {\r\n    @HostBinding('class.file-preview-wrapper') filePreviewWrapper = true;\r\n    public download = new EventEmitter();\r\n\r\n    constructor(\r\n        @Inject(CURRENT_PREVIEW_FILE) protected file: FileEntry,\r\n        @Inject(PREVIEW_URL_TRANSFORMER) protected transformer: PreviewUrlTransformer,\r\n        protected settings: Settings,\r\n        protected http: AppHttpClient,\r\n        protected sanitizer: DomSanitizer,\r\n        protected currentUser: CurrentUser,\r\n    ) {}\r\n\r\n    public getSrc(): string {\r\n        return this.transformer(this.file);\r\n    }\r\n\r\n    public getSafeSrc(): SafeResourceUrl {\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(this.getSrc());\r\n    }\r\n\r\n    public getContents(): Observable<string> {\r\n        return this.http.get(this.getSrc(), null, {responseType: 'text'});\r\n    }\r\n}\r\n","/*!\n * perfect-scrollbar v1.5.0\n * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors\n * Licensed under MIT\n */\n\nfunction get(element) {\n  return getComputedStyle(element);\n}\n\nfunction set(element, obj) {\n  for (var key in obj) {\n    var val = obj[key];\n    if (typeof val === 'number') {\n      val = val + \"px\";\n    }\n    element.style[key] = val;\n  }\n  return element;\n}\n\nfunction div(className) {\n  var div = document.createElement('div');\n  div.className = className;\n  return div;\n}\n\nvar elMatches =\n  typeof Element !== 'undefined' &&\n  (Element.prototype.matches ||\n    Element.prototype.webkitMatchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector);\n\nfunction matches(element, query) {\n  if (!elMatches) {\n    throw new Error('No element matching method supported');\n  }\n\n  return elMatches.call(element, query);\n}\n\nfunction remove(element) {\n  if (element.remove) {\n    element.remove();\n  } else {\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n}\n\nfunction queryChildren(element, selector) {\n  return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }\n  );\n}\n\nvar cls = {\n  main: 'ps',\n  rtl: 'ps__rtl',\n  element: {\n    thumb: function (x) { return (\"ps__thumb-\" + x); },\n    rail: function (x) { return (\"ps__rail-\" + x); },\n    consuming: 'ps__child--consume',\n  },\n  state: {\n    focus: 'ps--focus',\n    clicking: 'ps--clicking',\n    active: function (x) { return (\"ps--active-\" + x); },\n    scrolling: function (x) { return (\"ps--scrolling-\" + x); },\n  },\n};\n\n/*\n * Helper methods\n */\nvar scrollingClassTimeout = { x: null, y: null };\n\nfunction addScrollingClass(i, x) {\n  var classList = i.element.classList;\n  var className = cls.state.scrolling(x);\n\n  if (classList.contains(className)) {\n    clearTimeout(scrollingClassTimeout[x]);\n  } else {\n    classList.add(className);\n  }\n}\n\nfunction removeScrollingClass(i, x) {\n  scrollingClassTimeout[x] = setTimeout(\n    function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },\n    i.settings.scrollingThreshold\n  );\n}\n\nfunction setScrollingClassInstantly(i, x) {\n  addScrollingClass(i, x);\n  removeScrollingClass(i, x);\n}\n\nvar EventElement = function EventElement(element) {\n  this.element = element;\n  this.handlers = {};\n};\n\nvar prototypeAccessors = { isEmpty: { configurable: true } };\n\nEventElement.prototype.bind = function bind (eventName, handler) {\n  if (typeof this.handlers[eventName] === 'undefined') {\n    this.handlers[eventName] = [];\n  }\n  this.handlers[eventName].push(handler);\n  this.element.addEventListener(eventName, handler, false);\n};\n\nEventElement.prototype.unbind = function unbind (eventName, target) {\n    var this$1 = this;\n\n  this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {\n    if (target && handler !== target) {\n      return true;\n    }\n    this$1.element.removeEventListener(eventName, handler, false);\n    return false;\n  });\n};\n\nEventElement.prototype.unbindAll = function unbindAll () {\n  for (var name in this.handlers) {\n    this.unbind(name);\n  }\n};\n\nprototypeAccessors.isEmpty.get = function () {\n    var this$1 = this;\n\n  return Object.keys(this.handlers).every(\n    function (key) { return this$1.handlers[key].length === 0; }\n  );\n};\n\nObject.defineProperties( EventElement.prototype, prototypeAccessors );\n\nvar EventManager = function EventManager() {\n  this.eventElements = [];\n};\n\nEventManager.prototype.eventElement = function eventElement (element) {\n  var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];\n  if (!ee) {\n    ee = new EventElement(element);\n    this.eventElements.push(ee);\n  }\n  return ee;\n};\n\nEventManager.prototype.bind = function bind (element, eventName, handler) {\n  this.eventElement(element).bind(eventName, handler);\n};\n\nEventManager.prototype.unbind = function unbind (element, eventName, handler) {\n  var ee = this.eventElement(element);\n  ee.unbind(eventName, handler);\n\n  if (ee.isEmpty) {\n    // remove\n    this.eventElements.splice(this.eventElements.indexOf(ee), 1);\n  }\n};\n\nEventManager.prototype.unbindAll = function unbindAll () {\n  this.eventElements.forEach(function (e) { return e.unbindAll(); });\n  this.eventElements = [];\n};\n\nEventManager.prototype.once = function once (element, eventName, handler) {\n  var ee = this.eventElement(element);\n  var onceHandler = function (evt) {\n    ee.unbind(eventName, onceHandler);\n    handler(evt);\n  };\n  ee.bind(eventName, onceHandler);\n};\n\nfunction createEvent(name) {\n  if (typeof window.CustomEvent === 'function') {\n    return new CustomEvent(name);\n  } else {\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(name, false, false, undefined);\n    return evt;\n  }\n}\n\nfunction processScrollDiff(\n  i,\n  axis,\n  diff,\n  useScrollingClass,\n  forceFireReachEvent\n) {\n  if ( useScrollingClass === void 0 ) useScrollingClass = true;\n  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;\n\n  var fields;\n  if (axis === 'top') {\n    fields = [\n      'contentHeight',\n      'containerHeight',\n      'scrollTop',\n      'y',\n      'up',\n      'down' ];\n  } else if (axis === 'left') {\n    fields = [\n      'contentWidth',\n      'containerWidth',\n      'scrollLeft',\n      'x',\n      'left',\n      'right' ];\n  } else {\n    throw new Error('A proper axis should be provided');\n  }\n\n  processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);\n}\n\nfunction processScrollDiff$1(\n  i,\n  diff,\n  ref,\n  useScrollingClass,\n  forceFireReachEvent\n) {\n  var contentHeight = ref[0];\n  var containerHeight = ref[1];\n  var scrollTop = ref[2];\n  var y = ref[3];\n  var up = ref[4];\n  var down = ref[5];\n  if ( useScrollingClass === void 0 ) useScrollingClass = true;\n  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;\n\n  var element = i.element;\n\n  // reset reach\n  i.reach[y] = null;\n\n  // 1 for subpixel rounding\n  if (element[scrollTop] < 1) {\n    i.reach[y] = 'start';\n  }\n\n  // 1 for subpixel rounding\n  if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {\n    i.reach[y] = 'end';\n  }\n\n  if (diff) {\n    element.dispatchEvent(createEvent((\"ps-scroll-\" + y)));\n\n    if (diff < 0) {\n      element.dispatchEvent(createEvent((\"ps-scroll-\" + up)));\n    } else if (diff > 0) {\n      element.dispatchEvent(createEvent((\"ps-scroll-\" + down)));\n    }\n\n    if (useScrollingClass) {\n      setScrollingClassInstantly(i, y);\n    }\n  }\n\n  if (i.reach[y] && (diff || forceFireReachEvent)) {\n    element.dispatchEvent(createEvent((\"ps-\" + y + \"-reach-\" + (i.reach[y]))));\n  }\n}\n\nfunction toInt(x) {\n  return parseInt(x, 10) || 0;\n}\n\nfunction isEditable(el) {\n  return (\n    matches(el, 'input,[contenteditable]') ||\n    matches(el, 'select,[contenteditable]') ||\n    matches(el, 'textarea,[contenteditable]') ||\n    matches(el, 'button,[contenteditable]')\n  );\n}\n\nfunction outerWidth(element) {\n  var styles = get(element);\n  return (\n    toInt(styles.width) +\n    toInt(styles.paddingLeft) +\n    toInt(styles.paddingRight) +\n    toInt(styles.borderLeftWidth) +\n    toInt(styles.borderRightWidth)\n  );\n}\n\nvar env = {\n  isWebKit:\n    typeof document !== 'undefined' &&\n    'WebkitAppearance' in document.documentElement.style,\n  supportsTouch:\n    typeof window !== 'undefined' &&\n    ('ontouchstart' in window ||\n      ('maxTouchPoints' in window.navigator &&\n        window.navigator.maxTouchPoints > 0) ||\n      (window.DocumentTouch && document instanceof window.DocumentTouch)),\n  supportsIePointer:\n    typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,\n  isChrome:\n    typeof navigator !== 'undefined' &&\n    /Chrome/i.test(navigator && navigator.userAgent),\n};\n\nfunction updateGeometry(i) {\n  var element = i.element;\n  var roundedScrollTop = Math.floor(element.scrollTop);\n  var rect = element.getBoundingClientRect();\n\n  i.containerWidth = Math.ceil(rect.width);\n  i.containerHeight = Math.ceil(rect.height);\n  i.contentWidth = element.scrollWidth;\n  i.contentHeight = element.scrollHeight;\n\n  if (!element.contains(i.scrollbarXRail)) {\n    // clean up and append\n    queryChildren(element, cls.element.rail('x')).forEach(function (el) { return remove(el); }\n    );\n    element.appendChild(i.scrollbarXRail);\n  }\n  if (!element.contains(i.scrollbarYRail)) {\n    // clean up and append\n    queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }\n    );\n    element.appendChild(i.scrollbarYRail);\n  }\n\n  if (\n    !i.settings.suppressScrollX &&\n    i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth\n  ) {\n    i.scrollbarXActive = true;\n    i.railXWidth = i.containerWidth - i.railXMarginWidth;\n    i.railXRatio = i.containerWidth / i.railXWidth;\n    i.scrollbarXWidth = getThumbSize(\n      i,\n      toInt((i.railXWidth * i.containerWidth) / i.contentWidth)\n    );\n    i.scrollbarXLeft = toInt(\n      ((i.negativeScrollAdjustment + element.scrollLeft) *\n        (i.railXWidth - i.scrollbarXWidth)) /\n        (i.contentWidth - i.containerWidth)\n    );\n  } else {\n    i.scrollbarXActive = false;\n  }\n\n  if (\n    !i.settings.suppressScrollY &&\n    i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight\n  ) {\n    i.scrollbarYActive = true;\n    i.railYHeight = i.containerHeight - i.railYMarginHeight;\n    i.railYRatio = i.containerHeight / i.railYHeight;\n    i.scrollbarYHeight = getThumbSize(\n      i,\n      toInt((i.railYHeight * i.containerHeight) / i.contentHeight)\n    );\n    i.scrollbarYTop = toInt(\n      (roundedScrollTop * (i.railYHeight - i.scrollbarYHeight)) /\n        (i.contentHeight - i.containerHeight)\n    );\n  } else {\n    i.scrollbarYActive = false;\n  }\n\n  if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {\n    i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;\n  }\n  if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {\n    i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;\n  }\n\n  updateCss(element, i);\n\n  if (i.scrollbarXActive) {\n    element.classList.add(cls.state.active('x'));\n  } else {\n    element.classList.remove(cls.state.active('x'));\n    i.scrollbarXWidth = 0;\n    i.scrollbarXLeft = 0;\n    element.scrollLeft = i.isRtl === true ? i.contentWidth : 0;\n  }\n  if (i.scrollbarYActive) {\n    element.classList.add(cls.state.active('y'));\n  } else {\n    element.classList.remove(cls.state.active('y'));\n    i.scrollbarYHeight = 0;\n    i.scrollbarYTop = 0;\n    element.scrollTop = 0;\n  }\n}\n\nfunction getThumbSize(i, thumbSize) {\n  if (i.settings.minScrollbarLength) {\n    thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);\n  }\n  if (i.settings.maxScrollbarLength) {\n    thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);\n  }\n  return thumbSize;\n}\n\nfunction updateCss(element, i) {\n  var xRailOffset = { width: i.railXWidth };\n  var roundedScrollTop = Math.floor(element.scrollTop);\n\n  if (i.isRtl) {\n    xRailOffset.left =\n      i.negativeScrollAdjustment +\n      element.scrollLeft +\n      i.containerWidth -\n      i.contentWidth;\n  } else {\n    xRailOffset.left = element.scrollLeft;\n  }\n  if (i.isScrollbarXUsingBottom) {\n    xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;\n  } else {\n    xRailOffset.top = i.scrollbarXTop + roundedScrollTop;\n  }\n  set(i.scrollbarXRail, xRailOffset);\n\n  var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };\n  if (i.isScrollbarYUsingRight) {\n    if (i.isRtl) {\n      yRailOffset.right =\n        i.contentWidth -\n        (i.negativeScrollAdjustment + element.scrollLeft) -\n        i.scrollbarYRight -\n        i.scrollbarYOuterWidth -\n        9;\n    } else {\n      yRailOffset.right = i.scrollbarYRight - element.scrollLeft;\n    }\n  } else {\n    if (i.isRtl) {\n      yRailOffset.left =\n        i.negativeScrollAdjustment +\n        element.scrollLeft +\n        i.containerWidth * 2 -\n        i.contentWidth -\n        i.scrollbarYLeft -\n        i.scrollbarYOuterWidth;\n    } else {\n      yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;\n    }\n  }\n  set(i.scrollbarYRail, yRailOffset);\n\n  set(i.scrollbarX, {\n    left: i.scrollbarXLeft,\n    width: i.scrollbarXWidth - i.railBorderXWidth,\n  });\n  set(i.scrollbarY, {\n    top: i.scrollbarYTop,\n    height: i.scrollbarYHeight - i.railBorderYWidth,\n  });\n}\n\nfunction clickRail(i) {\n  var element = i.element;\n\n  i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });\n  i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {\n    var positionTop =\n      e.pageY -\n      window.pageYOffset -\n      i.scrollbarYRail.getBoundingClientRect().top;\n    var direction = positionTop > i.scrollbarYTop ? 1 : -1;\n\n    i.element.scrollTop += direction * i.containerHeight;\n    updateGeometry(i);\n\n    e.stopPropagation();\n  });\n\n  i.event.bind(i.scrollbarX, 'mousedown', function (e) { return e.stopPropagation(); });\n  i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {\n    var positionLeft =\n      e.pageX -\n      window.pageXOffset -\n      i.scrollbarXRail.getBoundingClientRect().left;\n    var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;\n\n    i.element.scrollLeft += direction * i.containerWidth;\n    updateGeometry(i);\n\n    e.stopPropagation();\n  });\n}\n\nfunction dragThumb(i) {\n  bindMouseScrollHandler(i, [\n    'containerWidth',\n    'contentWidth',\n    'pageX',\n    'railXWidth',\n    'scrollbarX',\n    'scrollbarXWidth',\n    'scrollLeft',\n    'x',\n    'scrollbarXRail' ]);\n  bindMouseScrollHandler(i, [\n    'containerHeight',\n    'contentHeight',\n    'pageY',\n    'railYHeight',\n    'scrollbarY',\n    'scrollbarYHeight',\n    'scrollTop',\n    'y',\n    'scrollbarYRail' ]);\n}\n\nfunction bindMouseScrollHandler(\n  i,\n  ref\n) {\n  var containerHeight = ref[0];\n  var contentHeight = ref[1];\n  var pageY = ref[2];\n  var railYHeight = ref[3];\n  var scrollbarY = ref[4];\n  var scrollbarYHeight = ref[5];\n  var scrollTop = ref[6];\n  var y = ref[7];\n  var scrollbarYRail = ref[8];\n\n  var element = i.element;\n\n  var startingScrollTop = null;\n  var startingMousePageY = null;\n  var scrollBy = null;\n\n  function mouseMoveHandler(e) {\n    if (e.touches && e.touches[0]) {\n      e[pageY] = e.touches[0].pageY;\n    }\n    element[scrollTop] =\n      startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);\n    addScrollingClass(i, y);\n    updateGeometry(i);\n\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  function mouseUpHandler() {\n    removeScrollingClass(i, y);\n    i[scrollbarYRail].classList.remove(cls.state.clicking);\n    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);\n  }\n\n  function bindMoves(e, touchMode) {\n    startingScrollTop = element[scrollTop];\n    if (touchMode && e.touches) {\n      e[pageY] = e.touches[0].pageY;\n    }\n    startingMousePageY = e[pageY];\n    scrollBy =\n      (i[contentHeight] - i[containerHeight]) /\n      (i[railYHeight] - i[scrollbarYHeight]);\n    if (!touchMode) {\n      i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);\n      i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);\n      e.preventDefault();\n    } else {\n      i.event.bind(i.ownerDocument, 'touchmove', mouseMoveHandler);\n    }\n\n    i[scrollbarYRail].classList.add(cls.state.clicking);\n\n    e.stopPropagation();\n  }\n\n  i.event.bind(i[scrollbarY], 'mousedown', function (e) {\n    bindMoves(e);\n  });\n  i.event.bind(i[scrollbarY], 'touchstart', function (e) {\n    bindMoves(e, true);\n  });\n}\n\nfunction keyboard(i) {\n  var element = i.element;\n\n  var elementHovered = function () { return matches(element, ':hover'); };\n  var scrollbarFocused = function () { return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus'); };\n\n  function shouldPreventDefault(deltaX, deltaY) {\n    var scrollTop = Math.floor(element.scrollTop);\n    if (deltaX === 0) {\n      if (!i.scrollbarYActive) {\n        return false;\n      }\n      if (\n        (scrollTop === 0 && deltaY > 0) ||\n        (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)\n      ) {\n        return !i.settings.wheelPropagation;\n      }\n    }\n\n    var scrollLeft = element.scrollLeft;\n    if (deltaY === 0) {\n      if (!i.scrollbarXActive) {\n        return false;\n      }\n      if (\n        (scrollLeft === 0 && deltaX < 0) ||\n        (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)\n      ) {\n        return !i.settings.wheelPropagation;\n      }\n    }\n    return true;\n  }\n\n  i.event.bind(i.ownerDocument, 'keydown', function (e) {\n    if (\n      (e.isDefaultPrevented && e.isDefaultPrevented()) ||\n      e.defaultPrevented\n    ) {\n      return;\n    }\n\n    if (!elementHovered() && !scrollbarFocused()) {\n      return;\n    }\n\n    var activeElement = document.activeElement\n      ? document.activeElement\n      : i.ownerDocument.activeElement;\n    if (activeElement) {\n      if (activeElement.tagName === 'IFRAME') {\n        activeElement = activeElement.contentDocument.activeElement;\n      } else {\n        // go deeper if element is a webcomponent\n        while (activeElement.shadowRoot) {\n          activeElement = activeElement.shadowRoot.activeElement;\n        }\n      }\n      if (isEditable(activeElement)) {\n        return;\n      }\n    }\n\n    var deltaX = 0;\n    var deltaY = 0;\n\n    switch (e.which) {\n      case 37: // left\n        if (e.metaKey) {\n          deltaX = -i.contentWidth;\n        } else if (e.altKey) {\n          deltaX = -i.containerWidth;\n        } else {\n          deltaX = -30;\n        }\n        break;\n      case 38: // up\n        if (e.metaKey) {\n          deltaY = i.contentHeight;\n        } else if (e.altKey) {\n          deltaY = i.containerHeight;\n        } else {\n          deltaY = 30;\n        }\n        break;\n      case 39: // right\n        if (e.metaKey) {\n          deltaX = i.contentWidth;\n        } else if (e.altKey) {\n          deltaX = i.containerWidth;\n        } else {\n          deltaX = 30;\n        }\n        break;\n      case 40: // down\n        if (e.metaKey) {\n          deltaY = -i.contentHeight;\n        } else if (e.altKey) {\n          deltaY = -i.containerHeight;\n        } else {\n          deltaY = -30;\n        }\n        break;\n      case 32: // space bar\n        if (e.shiftKey) {\n          deltaY = i.containerHeight;\n        } else {\n          deltaY = -i.containerHeight;\n        }\n        break;\n      case 33: // page up\n        deltaY = i.containerHeight;\n        break;\n      case 34: // page down\n        deltaY = -i.containerHeight;\n        break;\n      case 36: // home\n        deltaY = i.contentHeight;\n        break;\n      case 35: // end\n        deltaY = -i.contentHeight;\n        break;\n      default:\n        return;\n    }\n\n    if (i.settings.suppressScrollX && deltaX !== 0) {\n      return;\n    }\n    if (i.settings.suppressScrollY && deltaY !== 0) {\n      return;\n    }\n\n    element.scrollTop -= deltaY;\n    element.scrollLeft += deltaX;\n    updateGeometry(i);\n\n    if (shouldPreventDefault(deltaX, deltaY)) {\n      e.preventDefault();\n    }\n  });\n}\n\nfunction wheel(i) {\n  var element = i.element;\n\n  function shouldPreventDefault(deltaX, deltaY) {\n    var roundedScrollTop = Math.floor(element.scrollTop);\n    var isTop = element.scrollTop === 0;\n    var isBottom =\n      roundedScrollTop + element.offsetHeight === element.scrollHeight;\n    var isLeft = element.scrollLeft === 0;\n    var isRight =\n      element.scrollLeft + element.offsetWidth === element.scrollWidth;\n\n    var hitsBound;\n\n    // pick axis with primary direction\n    if (Math.abs(deltaY) > Math.abs(deltaX)) {\n      hitsBound = isTop || isBottom;\n    } else {\n      hitsBound = isLeft || isRight;\n    }\n\n    return hitsBound ? !i.settings.wheelPropagation : true;\n  }\n\n  function getDeltaFromEvent(e) {\n    var deltaX = e.deltaX;\n    var deltaY = -1 * e.deltaY;\n\n    if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {\n      // OS X Safari\n      deltaX = (-1 * e.wheelDeltaX) / 6;\n      deltaY = e.wheelDeltaY / 6;\n    }\n\n    if (e.deltaMode && e.deltaMode === 1) {\n      // Firefox in deltaMode 1: Line scrolling\n      deltaX *= 10;\n      deltaY *= 10;\n    }\n\n    if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {\n      // IE in some mouse drivers\n      deltaX = 0;\n      deltaY = e.wheelDelta;\n    }\n\n    if (e.shiftKey) {\n      // reverse axis with shift key\n      return [-deltaY, -deltaX];\n    }\n    return [deltaX, deltaY];\n  }\n\n  function shouldBeConsumedByChild(target, deltaX, deltaY) {\n    // FIXME: this is a workaround for <select> issue in FF and IE #571\n    if (!env.isWebKit && element.querySelector('select:focus')) {\n      return true;\n    }\n\n    if (!element.contains(target)) {\n      return false;\n    }\n\n    var cursor = target;\n\n    while (cursor && cursor !== element) {\n      if (cursor.classList.contains(cls.element.consuming)) {\n        return true;\n      }\n\n      var style = get(cursor);\n\n      // if deltaY && vertical scrollable\n      if (deltaY && style.overflowY.match(/(scroll|auto)/)) {\n        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\n        if (maxScrollTop > 0) {\n          if (\n            (cursor.scrollTop > 0 && deltaY < 0) ||\n            (cursor.scrollTop < maxScrollTop && deltaY > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n      // if deltaX && horizontal scrollable\n      if (deltaX && style.overflowX.match(/(scroll|auto)/)) {\n        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\n        if (maxScrollLeft > 0) {\n          if (\n            (cursor.scrollLeft > 0 && deltaX < 0) ||\n            (cursor.scrollLeft < maxScrollLeft && deltaX > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n\n      cursor = cursor.parentNode;\n    }\n\n    return false;\n  }\n\n  function mousewheelHandler(e) {\n    var ref = getDeltaFromEvent(e);\n    var deltaX = ref[0];\n    var deltaY = ref[1];\n\n    if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {\n      return;\n    }\n\n    var shouldPrevent = false;\n    if (!i.settings.useBothWheelAxes) {\n      // deltaX will only be used for horizontal scrolling and deltaY will\n      // only be used for vertical scrolling - this is the default\n      element.scrollTop -= deltaY * i.settings.wheelSpeed;\n      element.scrollLeft += deltaX * i.settings.wheelSpeed;\n    } else if (i.scrollbarYActive && !i.scrollbarXActive) {\n      // only vertical scrollbar is active and useBothWheelAxes option is\n      // active, so let's scroll vertical bar using both mouse wheel axes\n      if (deltaY) {\n        element.scrollTop -= deltaY * i.settings.wheelSpeed;\n      } else {\n        element.scrollTop += deltaX * i.settings.wheelSpeed;\n      }\n      shouldPrevent = true;\n    } else if (i.scrollbarXActive && !i.scrollbarYActive) {\n      // useBothWheelAxes and only horizontal bar is active, so use both\n      // wheel axes for horizontal bar\n      if (deltaX) {\n        element.scrollLeft += deltaX * i.settings.wheelSpeed;\n      } else {\n        element.scrollLeft -= deltaY * i.settings.wheelSpeed;\n      }\n      shouldPrevent = true;\n    }\n\n    updateGeometry(i);\n\n    shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);\n    if (shouldPrevent && !e.ctrlKey) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n\n  if (typeof window.onwheel !== 'undefined') {\n    i.event.bind(element, 'wheel', mousewheelHandler);\n  } else if (typeof window.onmousewheel !== 'undefined') {\n    i.event.bind(element, 'mousewheel', mousewheelHandler);\n  }\n}\n\nfunction touch(i) {\n  if (!env.supportsTouch && !env.supportsIePointer) {\n    return;\n  }\n\n  var element = i.element;\n\n  function shouldPrevent(deltaX, deltaY) {\n    var scrollTop = Math.floor(element.scrollTop);\n    var scrollLeft = element.scrollLeft;\n    var magnitudeX = Math.abs(deltaX);\n    var magnitudeY = Math.abs(deltaY);\n\n    if (magnitudeY > magnitudeX) {\n      // user is perhaps trying to swipe up/down the page\n\n      if (\n        (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||\n        (deltaY > 0 && scrollTop === 0)\n      ) {\n        // set prevent for mobile Chrome refresh\n        return window.scrollY === 0 && deltaY > 0 && env.isChrome;\n      }\n    } else if (magnitudeX > magnitudeY) {\n      // user is perhaps trying to swipe left/right across the page\n\n      if (\n        (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||\n        (deltaX > 0 && scrollLeft === 0)\n      ) {\n        return true;\n      }\n    }\n\n    return true;\n  }\n\n  function applyTouchMove(differenceX, differenceY) {\n    element.scrollTop -= differenceY;\n    element.scrollLeft -= differenceX;\n\n    updateGeometry(i);\n  }\n\n  var startOffset = {};\n  var startTime = 0;\n  var speed = {};\n  var easingLoop = null;\n\n  function getTouch(e) {\n    if (e.targetTouches) {\n      return e.targetTouches[0];\n    } else {\n      // Maybe IE pointer\n      return e;\n    }\n  }\n\n  function shouldHandle(e) {\n    if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {\n      return false;\n    }\n    if (e.targetTouches && e.targetTouches.length === 1) {\n      return true;\n    }\n    if (\n      e.pointerType &&\n      e.pointerType !== 'mouse' &&\n      e.pointerType !== e.MSPOINTER_TYPE_MOUSE\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  function touchStart(e) {\n    if (!shouldHandle(e)) {\n      return;\n    }\n\n    var touch = getTouch(e);\n\n    startOffset.pageX = touch.pageX;\n    startOffset.pageY = touch.pageY;\n\n    startTime = new Date().getTime();\n\n    if (easingLoop !== null) {\n      clearInterval(easingLoop);\n    }\n  }\n\n  function shouldBeConsumedByChild(target, deltaX, deltaY) {\n    if (!element.contains(target)) {\n      return false;\n    }\n\n    var cursor = target;\n\n    while (cursor && cursor !== element) {\n      if (cursor.classList.contains(cls.element.consuming)) {\n        return true;\n      }\n\n      var style = get(cursor);\n\n      // if deltaY && vertical scrollable\n      if (deltaY && style.overflowY.match(/(scroll|auto)/)) {\n        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\n        if (maxScrollTop > 0) {\n          if (\n            (cursor.scrollTop > 0 && deltaY < 0) ||\n            (cursor.scrollTop < maxScrollTop && deltaY > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n      // if deltaX && horizontal scrollable\n      if (deltaX && style.overflowX.match(/(scroll|auto)/)) {\n        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\n        if (maxScrollLeft > 0) {\n          if (\n            (cursor.scrollLeft > 0 && deltaX < 0) ||\n            (cursor.scrollLeft < maxScrollLeft && deltaX > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n\n      cursor = cursor.parentNode;\n    }\n\n    return false;\n  }\n\n  function touchMove(e) {\n    if (shouldHandle(e)) {\n      var touch = getTouch(e);\n\n      var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };\n\n      var differenceX = currentOffset.pageX - startOffset.pageX;\n      var differenceY = currentOffset.pageY - startOffset.pageY;\n\n      if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {\n        return;\n      }\n\n      applyTouchMove(differenceX, differenceY);\n      startOffset = currentOffset;\n\n      var currentTime = new Date().getTime();\n\n      var timeGap = currentTime - startTime;\n      if (timeGap > 0) {\n        speed.x = differenceX / timeGap;\n        speed.y = differenceY / timeGap;\n        startTime = currentTime;\n      }\n\n      if (shouldPrevent(differenceX, differenceY)) {\n        e.preventDefault();\n      }\n    }\n  }\n  function touchEnd() {\n    if (i.settings.swipeEasing) {\n      clearInterval(easingLoop);\n      easingLoop = setInterval(function() {\n        if (i.isInitialized) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        if (!speed.x && !speed.y) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        applyTouchMove(speed.x * 30, speed.y * 30);\n\n        speed.x *= 0.8;\n        speed.y *= 0.8;\n      }, 10);\n    }\n  }\n\n  if (env.supportsTouch) {\n    i.event.bind(element, 'touchstart', touchStart);\n    i.event.bind(element, 'touchmove', touchMove);\n    i.event.bind(element, 'touchend', touchEnd);\n  } else if (env.supportsIePointer) {\n    if (window.PointerEvent) {\n      i.event.bind(element, 'pointerdown', touchStart);\n      i.event.bind(element, 'pointermove', touchMove);\n      i.event.bind(element, 'pointerup', touchEnd);\n    } else if (window.MSPointerEvent) {\n      i.event.bind(element, 'MSPointerDown', touchStart);\n      i.event.bind(element, 'MSPointerMove', touchMove);\n      i.event.bind(element, 'MSPointerUp', touchEnd);\n    }\n  }\n}\n\nvar defaultSettings = function () { return ({\n  handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],\n  maxScrollbarLength: null,\n  minScrollbarLength: null,\n  scrollingThreshold: 1000,\n  scrollXMarginOffset: 0,\n  scrollYMarginOffset: 0,\n  suppressScrollX: false,\n  suppressScrollY: false,\n  swipeEasing: true,\n  useBothWheelAxes: false,\n  wheelPropagation: true,\n  wheelSpeed: 1,\n}); };\n\nvar handlers = {\n  'click-rail': clickRail,\n  'drag-thumb': dragThumb,\n  keyboard: keyboard,\n  wheel: wheel,\n  touch: touch,\n};\n\nvar PerfectScrollbar = function PerfectScrollbar(element, userSettings) {\n  var this$1 = this;\n  if ( userSettings === void 0 ) userSettings = {};\n\n  if (typeof element === 'string') {\n    element = document.querySelector(element);\n  }\n\n  if (!element || !element.nodeName) {\n    throw new Error('no element is specified to initialize PerfectScrollbar');\n  }\n\n  this.element = element;\n\n  element.classList.add(cls.main);\n\n  this.settings = defaultSettings();\n  for (var key in userSettings) {\n    this.settings[key] = userSettings[key];\n  }\n\n  this.containerWidth = null;\n  this.containerHeight = null;\n  this.contentWidth = null;\n  this.contentHeight = null;\n\n  var focus = function () { return element.classList.add(cls.state.focus); };\n  var blur = function () { return element.classList.remove(cls.state.focus); };\n\n  this.isRtl = get(element).direction === 'rtl';\n  if (this.isRtl === true) {\n    element.classList.add(cls.rtl);\n  }\n  this.isNegativeScroll = (function () {\n    var originalScrollLeft = element.scrollLeft;\n    var result = null;\n    element.scrollLeft = -1;\n    result = element.scrollLeft < 0;\n    element.scrollLeft = originalScrollLeft;\n    return result;\n  })();\n  this.negativeScrollAdjustment = this.isNegativeScroll\n    ? element.scrollWidth - element.clientWidth\n    : 0;\n  this.event = new EventManager();\n  this.ownerDocument = element.ownerDocument || document;\n\n  this.scrollbarXRail = div(cls.element.rail('x'));\n  element.appendChild(this.scrollbarXRail);\n  this.scrollbarX = div(cls.element.thumb('x'));\n  this.scrollbarXRail.appendChild(this.scrollbarX);\n  this.scrollbarX.setAttribute('tabindex', 0);\n  this.event.bind(this.scrollbarX, 'focus', focus);\n  this.event.bind(this.scrollbarX, 'blur', blur);\n  this.scrollbarXActive = null;\n  this.scrollbarXWidth = null;\n  this.scrollbarXLeft = null;\n  var railXStyle = get(this.scrollbarXRail);\n  this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);\n  if (isNaN(this.scrollbarXBottom)) {\n    this.isScrollbarXUsingBottom = false;\n    this.scrollbarXTop = toInt(railXStyle.top);\n  } else {\n    this.isScrollbarXUsingBottom = true;\n  }\n  this.railBorderXWidth =\n    toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth);\n  // Set rail to display:block to calculate margins\n  set(this.scrollbarXRail, { display: 'block' });\n  this.railXMarginWidth =\n    toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);\n  set(this.scrollbarXRail, { display: '' });\n  this.railXWidth = null;\n  this.railXRatio = null;\n\n  this.scrollbarYRail = div(cls.element.rail('y'));\n  element.appendChild(this.scrollbarYRail);\n  this.scrollbarY = div(cls.element.thumb('y'));\n  this.scrollbarYRail.appendChild(this.scrollbarY);\n  this.scrollbarY.setAttribute('tabindex', 0);\n  this.event.bind(this.scrollbarY, 'focus', focus);\n  this.event.bind(this.scrollbarY, 'blur', blur);\n  this.scrollbarYActive = null;\n  this.scrollbarYHeight = null;\n  this.scrollbarYTop = null;\n  var railYStyle = get(this.scrollbarYRail);\n  this.scrollbarYRight = parseInt(railYStyle.right, 10);\n  if (isNaN(this.scrollbarYRight)) {\n    this.isScrollbarYUsingRight = false;\n    this.scrollbarYLeft = toInt(railYStyle.left);\n  } else {\n    this.isScrollbarYUsingRight = true;\n  }\n  this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;\n  this.railBorderYWidth =\n    toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);\n  set(this.scrollbarYRail, { display: 'block' });\n  this.railYMarginHeight =\n    toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);\n  set(this.scrollbarYRail, { display: '' });\n  this.railYHeight = null;\n  this.railYRatio = null;\n\n  this.reach = {\n    x:\n      element.scrollLeft <= 0\n        ? 'start'\n        : element.scrollLeft >= this.contentWidth - this.containerWidth\n        ? 'end'\n        : null,\n    y:\n      element.scrollTop <= 0\n        ? 'start'\n        : element.scrollTop >= this.contentHeight - this.containerHeight\n        ? 'end'\n        : null,\n  };\n\n  this.isAlive = true;\n\n  this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });\n\n  this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only\n  this.lastScrollLeft = element.scrollLeft; // for onScroll only\n  this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });\n  updateGeometry(this);\n};\n\nPerfectScrollbar.prototype.update = function update () {\n  if (!this.isAlive) {\n    return;\n  }\n\n  // Recalcuate negative scrollLeft adjustment\n  this.negativeScrollAdjustment = this.isNegativeScroll\n    ? this.element.scrollWidth - this.element.clientWidth\n    : 0;\n\n  // Recalculate rail margins\n  set(this.scrollbarXRail, { display: 'block' });\n  set(this.scrollbarYRail, { display: 'block' });\n  this.railXMarginWidth =\n    toInt(get(this.scrollbarXRail).marginLeft) +\n    toInt(get(this.scrollbarXRail).marginRight);\n  this.railYMarginHeight =\n    toInt(get(this.scrollbarYRail).marginTop) +\n    toInt(get(this.scrollbarYRail).marginBottom);\n\n  // Hide scrollbars not to affect scrollWidth and scrollHeight\n  set(this.scrollbarXRail, { display: 'none' });\n  set(this.scrollbarYRail, { display: 'none' });\n\n  updateGeometry(this);\n\n  processScrollDiff(this, 'top', 0, false, true);\n  processScrollDiff(this, 'left', 0, false, true);\n\n  set(this.scrollbarXRail, { display: '' });\n  set(this.scrollbarYRail, { display: '' });\n};\n\nPerfectScrollbar.prototype.onScroll = function onScroll (e) {\n  if (!this.isAlive) {\n    return;\n  }\n\n  updateGeometry(this);\n  processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);\n  processScrollDiff(\n    this,\n    'left',\n    this.element.scrollLeft - this.lastScrollLeft\n  );\n\n  this.lastScrollTop = Math.floor(this.element.scrollTop);\n  this.lastScrollLeft = this.element.scrollLeft;\n};\n\nPerfectScrollbar.prototype.destroy = function destroy () {\n  if (!this.isAlive) {\n    return;\n  }\n\n  this.event.unbindAll();\n  remove(this.scrollbarX);\n  remove(this.scrollbarY);\n  remove(this.scrollbarXRail);\n  remove(this.scrollbarYRail);\n  this.removePsClasses();\n\n  // unset elements\n  this.element = null;\n  this.scrollbarX = null;\n  this.scrollbarY = null;\n  this.scrollbarXRail = null;\n  this.scrollbarYRail = null;\n\n  this.isAlive = false;\n};\n\nPerfectScrollbar.prototype.removePsClasses = function removePsClasses () {\n  this.element.className = this.element.className\n    .split(' ')\n    .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })\n    .join(' ');\n};\n\nexport default PerfectScrollbar;\n//# sourceMappingURL=perfect-scrollbar.esm.js.map\n","import {InjectionToken} from '@angular/core';\r\n\r\nexport const SUPPORTS_NATIVE_SCROLLBAR_STYLING = new InjectionToken<boolean>('SUPPORTS_NATIVE_SCROLLBAR_STYLING', {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n        // Detect IE, does not support custom scrollbars\r\n        if (navigator.userAgent.indexOf('MSIE') !== -1\r\n            || navigator.appVersion.indexOf('Trident/') > -1) {\r\n            return false;\r\n        }\r\n\r\n        // Tested Element\r\n        const test = document.createElement('div');\r\n        test.className = '__sb-test';\r\n        test.style.overflow = 'scroll';\r\n        test.style.width = '40px';\r\n\r\n        // Is there another way to style pseudo-elements in JS ?\r\n        const style = document.createElement('style');\r\n        style.innerHTML = '.__sb-test::-webkit-scrollbar { width: 0px; }';\r\n\r\n        // Apply\r\n        test.appendChild(style);\r\n        document.body.appendChild(test);\r\n\r\n        // If css scrollbar is supported, than the scrollWidth should not be impacted\r\n        const result = test.scrollWidth == 40;\r\n\r\n        // Cleaning\r\n        document.body.removeChild(test);\r\n\r\n        return result;\r\n    }\r\n});\r\n","import {AfterViewInit, Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Renderer2} from '@angular/core';\r\nimport PerfectScrollbar from 'perfect-scrollbar';\r\nimport {Subscription, Subject} from 'rxjs';\r\nimport {BreakpointsService} from '../breakpoints.service';\r\nimport {MutationObserverFactory} from '@angular/cdk/observers';\r\nimport {Settings} from '../../config/settings.service';\r\nimport {SUPPORTS_NATIVE_SCROLLBAR_STYLING} from './supports-native-scrollbar-styling';\r\n\r\n@Directive({\r\n    selector: '[customScrollbar]'\r\n})\r\nexport class CustomScrollbarDirective implements AfterViewInit, OnDestroy {\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    /**\r\n     * Minimum length for scrollbar drag handle.\r\n     */\r\n    @Input('customScrollbarMinLength') minLength = 100;\r\n\r\n    /**\r\n     * Whether horizontal scrollbar should be always hidden.\r\n     */\r\n    @Input() suppressX = true;\r\n\r\n    /**\r\n     * scrollTop value set via custom setScrollTop() method.\r\n     * Perfect Scrollbar doesn't preserve scrollTop value on DOM\r\n     * element for some reason, so we need to keep it here.\r\n     */\r\n    private scrollTop = 0;\r\n\r\n    /**\r\n     * Whether custom or native scrollbar is used.\r\n     */\r\n    private native = true;\r\n\r\n    private scrollbar: PerfectScrollbar;\r\n\r\n    private observer: MutationObserver;\r\n\r\n    /**\r\n     * Used for debouncing the emitted values to the observeContent event.\r\n     */\r\n    private debouncer = new Subject<MutationRecord[]>();\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        private renderer: Renderer2,\r\n        private breakpoints: BreakpointsService,\r\n        private ngZone: NgZone,\r\n        private mutationObserverFactory: MutationObserverFactory,\r\n        private config: Settings,\r\n        @Inject(SUPPORTS_NATIVE_SCROLLBAR_STYLING) private supportsNativeStyling: boolean,\r\n    ) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (this.suppressX) {\r\n            this.renderer.addClass(this.el.nativeElement, 'scroll-container');\r\n        } else {\r\n            this.renderer.addClass(this.el.nativeElement, 'scroll-container-x');\r\n        }\r\n\r\n        if (this.shouldUseNative()) return;\r\n\r\n        this.scrollbar = new PerfectScrollbar(this.el.nativeElement, {\r\n            minScrollbarLength: this.minLength,\r\n            suppressScrollX: this.suppressX,\r\n            useBothWheelAxes: !this.suppressX,\r\n            wheelSpeed: 2\r\n        });\r\n\r\n        this.native = false;\r\n\r\n        this.bindToContentChange();\r\n    }\r\n\r\n    /**\r\n     * Update custom scrollbar.\r\n     */\r\n    public update() {\r\n        if (this.native) return;\r\n        this.scrollbar.update();\r\n    }\r\n\r\n    /**\r\n     * Scroll container top to given value.\r\n     */\r\n    public setScrollTop(value = 0) {\r\n        this.el.nativeElement.scrollTop = value;\r\n        this.scrollTop = this.el.nativeElement.scrollTop;\r\n        this.update();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(sub => sub.unsubscribe());\r\n        this.subscriptions = [];\r\n\r\n        if ( ! this.native) {\r\n            this.scrollbar.destroy();\r\n        }\r\n\r\n        // disable observer\r\n        this.debouncer.complete();\r\n        this.observer && this.observer.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Check whether native or custom scrollbar should be used.\r\n     */\r\n    private shouldUseNative(): boolean {\r\n        if (this.config.get('vebto.forceCustomScrollbar')) return false;\r\n        if (/Edge/.test(navigator.userAgent)) return false;\r\n        if (this.breakpoints.isMobile$.value) return true;\r\n        return this.supportsNativeStyling;\r\n    }\r\n\r\n    /**\r\n     * Update custom scrollbar when element content changes.\r\n     */\r\n    private bindToContentChange() {\r\n        this.observer = this.ngZone.runOutsideAngular(() => {\r\n            return this.mutationObserverFactory.create((mutations: MutationRecord[]) => {\r\n                this.debouncer.next(mutations);\r\n            });\r\n        });\r\n\r\n        this.observer.observe(this.el.nativeElement, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.debouncer.subscribe((mutations: MutationRecord[]) => this.update());\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\n@Component({\r\n    selector: 'default-preview',\r\n    templateUrl: './default-preview.component.html',\r\n    styleUrls: ['./default-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DefaultPreviewComponent extends BaseFilePreview {\r\n    @Input() message: string;\r\n\r\n    public getMessage() {\r\n        return this.message || 'No file preview available.';\r\n    }\r\n}\r\n","<div class=\"panel preview-object\">\r\n    <div class=\"message\" trans>{{getMessage()}}</div>\r\n    <button mat-raised-button color=\"accent\" (click)=\"download.emit()\" trans>Download</button>\r\n</div>","import {NgModule} from '@angular/core';\r\nimport {CustomScrollbarDirective} from './custom-scrollbar.directive';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CustomScrollbarDirective\r\n    ],\r\n    exports: [\r\n        CustomScrollbarDirective,\r\n    ]\r\n})\r\nexport class CustomScrollbarModule {\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const CURRENT_PREVIEW_FILE = new InjectionToken<any>('CURRENT_PREVIEW_FILE');\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormattedDatePipe} from '@common/core/ui/format-pipes/formatted-date.pipe';\nimport {FormattedFileSizePipe} from '@common/uploads/formatted-file-size.pipe';\n\n\n@NgModule({\n    declarations: [\n        FormattedDatePipe,\n        FormattedFileSizePipe,\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FormattedDatePipe,\n        FormattedFileSizePipe,\n    ]\n})\nexport class FormatPipesModule {\n}\n","<ng-container *ngIf=\"previewFiles.getPortal() | async as portal\">\r\n    <ng-template [cdkPortalOutlet]=\"portal\" (attached)=\"listenForDownloadClick($event)\"></ng-template>\r\n</ng-container>\r\n","import {ChangeDetectionStrategy, Component, ComponentRef, Input, OnChanges, OnDestroy} from '@angular/core';\r\nimport {FileEntry} from '../../uploads/types/file-entry';\r\nimport {PreviewFilesService} from '../preview-files.service';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\nimport {Subscription} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'preview-container',\r\n    templateUrl: './preview-container.component.html',\r\n    styleUrls: ['./preview-container.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PreviewContainerComponent implements OnChanges, OnDestroy {\r\n    @Input() files: FileEntry[];\r\n    @Input() activeFile: number;\r\n    private downloadSub: Subscription;\r\n\r\n    constructor(public previewFiles: PreviewFilesService) {}\r\n\r\n    ngOnChanges(changes) {\r\n        this.previewFiles.set(this.files, this.activeFile);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.previewFiles.destroy();\r\n        if (this.downloadSub) this.downloadSub.unsubscribe();\r\n    }\r\n\r\n    public listenForDownloadClick(comp: ComponentRef<BaseFilePreview>) {\r\n        if (this.downloadSub) this.downloadSub.unsubscribe();\r\n        this.downloadSub = comp.instance.download.subscribe(() => {\r\n            this.previewFiles.download.next();\r\n        });\r\n    }\r\n}\r\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n//# sourceMappingURL=throttle.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n    constructor(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n    constructor(destination, duration, scheduler, leading, trailing) {\n        super(destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    _next(value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n            else if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n    }\n    _complete() {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    clearThrottle() {\n        const throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    }\n}\nfunction dispatchNext(arg) {\n    const { subscriber } = arg;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, OnDestroy } from '@angular/core';\r\nimport { UploadQueueService } from '../upload-queue/upload-queue.service';\r\nimport { animationFrameScheduler, Subscription } from 'rxjs';\r\nimport { throttleTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'upload-progress-bar',\r\n    templateUrl: './upload-progress-bar.component.html',\r\n    styleUrls: ['./upload-progress-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UploadProgressBarComponent implements OnDestroy {\r\n    @HostBinding('class.hidden') hidden = true;\r\n    private subscription: Subscription;\r\n    public progress: number;\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        public uploadQueue: UploadQueueService,\r\n        private cd: ChangeDetectorRef,\r\n    ) {\r\n        this.subscription = this.uploadQueue.totalProgress()\r\n            // material progress bar animation lasts 250ms\r\n            .pipe(throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}))\r\n            .subscribe(progress => {\r\n                this.progress = progress;\r\n                this.hidden = progress === 100 || this.uploadQueue.count$.value.pending === 0;\r\n                this.cd.markForCheck();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n}\r\n\r\n","<mat-progress-bar mode=\"determinate\" [value]=\"progress\" color=\"accent\"></mat-progress-bar>\r\n","import {Component, Inject, ViewEncapsulation} from '@angular/core';\r\nimport {Article} from '../../../../shared/models/Article';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\n\r\ninterface ArticleSettingsModalData {\r\n    article: Article;\r\n}\r\n\r\ninterface ArticleSettingsModel {\r\n    slug?: string;\r\n    description?: string;\r\n    position?: number|string;\r\n}\r\n\r\n@Component({\r\n    selector: 'article-settings-modal',\r\n    templateUrl: './article-settings-modal.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ArticleSettingsModalComponent {\r\n    constructor(\r\n        private dialogRef: MatDialogRef<ArticleSettingsModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: ArticleSettingsModalData,\r\n    ) {\r\n        this.hydrate();\r\n    }\r\n\r\n    public model: ArticleSettingsModel = {};\r\n\r\n    public close(settings?: ArticleSettingsModel) {\r\n        this.dialogRef.close(settings);\r\n    }\r\n\r\n    private hydrate() {\r\n        this.model.slug = this.data.article.slug;\r\n        this.model.description = this.data.article.description;\r\n        this.model.position = this.data.article.position;\r\n    }\r\n\r\n    public confirm() {\r\n        this.close({\r\n            slug: slugifyString(this.model.slug),\r\n            description: this.model.description,\r\n            position: parseInt(this.model.position as string),\r\n        });\r\n    }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h2 mat-dialog-title trans>Article Settings</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<form (ngSubmit)=\"confirm()\" ngNativeValidate>\r\n    <mat-dialog-content class=\"many-inputs\">\r\n        <div class=\"input-container\">\r\n            <label for=\"article-slug\" trans>Slug</label>\r\n            <input type=\"text\" id=\"article-slug\" name=\"article-slug\" [(ngModel)]=\"model.slug\">\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"article-description\" trans>Description</label>\r\n            <textarea name=\"article-description\" id=\"article-description\" rows=\"7\" [(ngModel)]=\"model.description\"></textarea>\r\n            <p trans>This will appear when searching the help center. Excerpt from article will be used otherwise.</p>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"article-position\" trans>Position</label>\r\n            <input type=\"number\" id=\"article-position\" name=\"article-position\" [(ngModel)]=\"model.position\" min=\"0\">\r\n            <p trans>Order for article on help center homepage. Lower position will be first.</p>\r\n        </div>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" class=\"submit-button\" mat-raised-button color=\"accent\" trans>Update</button>\r\n    </mat-dialog-actions>\r\n</form>","export function strContains(haystack: string | string[], needle: string): boolean {\r\n    if (!haystack || !needle) return false;\r\n\r\n    needle = needle.toLowerCase();\r\n\r\n    if (!Array.isArray(haystack)) {\r\n        haystack = [haystack];\r\n    }\r\n\r\n    for (let i = 0; i < haystack.length; i++) {\r\n        if (haystack[i].toLowerCase().indexOf(needle) > -1) return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import {Category} from '../../shared/models/Category';\r\nimport {strContains} from '@common/core/utils/str-contains';\r\n\r\nexport class CategoriesFilterer {\r\n\r\n    /**\r\n     * Filter categories by specified search query.\r\n     */\r\n    public filter(query: string = null, categories: Category[]): Category[] {\r\n        if ( ! query) return categories.slice();\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < categories.length; i++) {\r\n            const category = Object.assign({}, categories[i]);\r\n\r\n            // if category name contains query, push it with all children\r\n            if (strContains(categories[i].name, query)) {\r\n                filtered.push(category);\r\n\r\n            // if one of categories children names contain query,\r\n            // push category only with that child\r\n            } else {\r\n                category.children = category.children.filter(child => {\r\n                    return strContains(child['name'], query);\r\n                });\r\n\r\n                if (category.children.length) {\r\n                    filtered.push(category);\r\n                }\r\n            }\r\n        }\r\n\r\n        return filtered;\r\n    }\r\n}\r\n","<div class=\"panel\" customScrollbar=\"lite\">\r\n    <div class=\"panel-header\">\r\n        <span trans>Categories</span>\r\n        <button class=\"clear-all-button\" mat-icon-button (click)=\"deselectAll()\" [matTooltip]=\"'Clear All' | trans\">\r\n            <mat-icon svgIcon=\"clear-all\"></mat-icon>\r\n        </button>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"input-container\">\r\n            <input type=\"text\" id=\"categories-manager-search\" [formControl]=\"searchQuery\" placeholder=\"Search...\" trans-placeholder>\r\n            <mat-icon svgIcon=\"search\"></mat-icon>\r\n        </div>\r\n\r\n        <section class=\"categories\" customScrollbar=\"lite\">\r\n            <ng-container *ngFor=\"let category of categories; let parentIndex = index;\">\r\n                <div class=\"category parent-category\">\r\n                    <mat-checkbox [id]=\"parentIndex\" [checked]=\"categoryIsSelected(category.id) || childIsSelected(category)\" (change)=\"toggle(category)\">{{category.name}}</mat-checkbox>\r\n                </div>\r\n                <div class=\"category child-category\" *ngFor=\"let childCategory of category.children; let childIndex = index;\">\r\n                    <mat-checkbox [id]=\"parentIndex+''+childIndex\"  [checked]=\"categoryIsSelected(childCategory.id)\" (change)=\"toggle(childCategory, category.id);\">{{childCategory.name}}</mat-checkbox>\r\n                </div>\r\n            </ng-container>\r\n            <div class=\"no-results\" *ngIf=\"!categories.length && searchQuery.value\" trans>No Results Found.</div>\r\n        </section>\r\n\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>","import {Component, ViewEncapsulation, Output, EventEmitter, OnInit, ViewChild, Input} from '@angular/core';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {CategoriesService} from '../../shared/categories.service';\r\nimport {FormControl} from '@angular/forms';\r\nimport {CategoriesFilterer} from '../categories-filterer';\r\nimport {CustomScrollbarDirective} from '@common/core/ui/custom-scrollbar/custom-scrollbar.directive';\r\nimport {LocalStorage} from '@common/core/services/local-storage.service';\r\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'categories-manager',\r\n    templateUrl: './categories-manager.component.html',\r\n    styleUrls: ['./categories-manager.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CategoriesManagerComponent implements OnInit {\r\n    @ViewChild(CustomScrollbarDirective, { static: true }) scrollbar: CustomScrollbarDirective;\r\n\r\n    /**\r\n     * Fired only when changes have originated from component and not setters.\r\n     */\r\n    @Output() public onChange = new EventEmitter();\r\n\r\n    /**\r\n     * Control for categories search field.\r\n     */\r\n    public searchQuery = new FormControl();\r\n\r\n    /**\r\n     * Currently selected categories.\r\n     */\r\n    public selectedCategories: number[] = [];\r\n\r\n    /**\r\n     * Initial categories that should be pre-selected.\r\n     */\r\n    @Input() public initialCategories: number[];\r\n\r\n    /**\r\n     * Categories filtered by search query.\r\n     */\r\n    public categories: Category[] = [];\r\n\r\n    /**\r\n     * All available categories.\r\n     */\r\n    public allCategories: Category[] = [];\r\n\r\n    /**\r\n     * CategoriesManagerComponent Constructor.\r\n     */\r\n    constructor(private api: CategoriesService, private storage: LocalStorage) {}\r\n\r\n    ngOnInit() {\r\n        this.bindSearchQuery();\r\n\r\n        if (this.initialCategories) {\r\n            this.selectedCategories = this.initialCategories.slice();\r\n        } else {\r\n            this.selectedCategories = this.storage.get('selectedCategories', []);\r\n        }\r\n\r\n        if ( ! this.allCategories.length) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return currently selected categories.\r\n     */\r\n    public getSelectedCategories() {\r\n        return this.selectedCategories;\r\n    }\r\n\r\n    /**\r\n     * Select specified categories.\r\n     */\r\n    public setSelectedCategories(categories: Category[]) {\r\n        if ( ! categories) return;\r\n        this.selectedCategories = categories.map(category => category.id);\r\n    }\r\n\r\n    /**\r\n     * Set specified categories on component.\r\n     */\r\n    public setCategories(categories: Category[]) {\r\n        this.categories = categories;\r\n        this.allCategories = categories;\r\n    }\r\n\r\n    /**\r\n     * Refresh all categories from backend.\r\n     */\r\n    public refresh(): Promise<any> {\r\n        return new Promise(resolve => {\r\n            this.api.getCategories().subscribe(response => {\r\n                this.setCategories(response.categories);\r\n                resolve();\r\n            }\r\n        )});\r\n    }\r\n\r\n    /**\r\n     * Check if specified category is selected.\r\n     */\r\n    public categoryIsSelected(id: number) {\r\n        return this.selectedCategories.indexOf(id) > -1;\r\n    }\r\n\r\n    /**\r\n     * Check if any of specified category children are selected.\r\n     */\r\n    public childIsSelected(category: Category): boolean {\r\n        if ( ! category.children.length) return false;\r\n\r\n        for (let i = 0; i < category.children.length; i++) {\r\n            if (this.categoryIsSelected(category.children[i].id)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select or deselect specified category and its parent (if specified)\r\n     */\r\n    public toggle(category: Category, parentId?: number) {\r\n        const index = this.selectedCategories.indexOf(category.id);\r\n\r\n        // toggle category\r\n        if (index > -1) {\r\n            this.selectedCategories.splice(index, 1);\r\n        } else {\r\n            this.selectedCategories.push(category.id);\r\n        }\r\n\r\n        // also select parent if we are toggling child category\r\n        if (parentId && ! this.categoryIsSelected(parentId)) {\r\n            this.selectedCategories.push(parentId);\r\n        }\r\n\r\n        // deselect all child categories as well\r\n        this.deselectChildren(category);\r\n\r\n        this.storage.set('selectedCategories', this.selectedCategories);\r\n        this.onChange.emit();\r\n    }\r\n\r\n    /**\r\n     * Deselect all categories.\r\n     */\r\n    public deselectAll() {\r\n        this.selectedCategories = [];\r\n        this.storage.set('selectedCategories', []);\r\n        this.onChange.emit();\r\n    }\r\n\r\n    /**\r\n     * Deselect all children of specified category.\r\n     */\r\n    private deselectChildren(parent: Category) {\r\n        if ( ! parent.children) return;\r\n\r\n        parent.children.forEach(child => {\r\n            const index = this.selectedCategories.indexOf(child.id);\r\n            index > -1 && this.selectedCategories.splice(index, 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get child categories and parent categories\r\n     * whose children are not selected.\r\n     */\r\n    public getExactSelectedCategories() {\r\n        return this.selectedCategories.filter(id => {\r\n            const category = this.categories.find(category => category.id === id);\r\n            return ! category || ! this.childIsSelected(category);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Bind categories search bar events needed\r\n     * for filtering on keyup.\r\n     */\r\n    private bindSearchQuery() {\r\n        this.searchQuery.valueChanges\r\n            .pipe(debounceTime(400), distinctUntilChanged())\r\n            .subscribe(query => {\r\n                this.categories = (new CategoriesFilterer).filter(query, this.allCategories);\r\n                this.scrollbar.update();\r\n            });\r\n    }\r\n}\r\n","import {Component, Inject, ViewEncapsulation} from '@angular/core';\r\nimport {Article} from '../../../shared/models/Article';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\ninterface ArticleModalData {\r\n    article: Article;\r\n}\r\n\r\n@Component({\r\n    selector: 'article-modal',\r\n    templateUrl: './article-modal.component.html',\r\n    styleUrls: ['./article-modal.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ArticleModalComponent {\r\n    public article: Article;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<ArticleModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: ArticleModalData,\r\n    ) {\r\n        this.hydrate();\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    private hydrate() {\r\n        this.article = this.data.article;\r\n    }\r\n}\r\n","<mat-dialog-content>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n    <article [article]=\"article\"></article>\r\n</mat-dialog-content>","import {Category} from './Category';\r\nimport {ArticleFeedback} from './ArticleFeedback';\r\nimport {FileEntry} from '@common/uploads/types/file-entry';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\n\r\nexport class Article {\r\n    id: number;\r\n    title: string;\r\n    body: string;\r\n    slug?: string;\r\n    extra_data?: string;\r\n    draft: boolean;\r\n    visibility = 'public';\r\n    views: number;\r\n    position: number;\r\n    description?: string;\r\n    created_at?: string;\r\n    updated_at?: string;\r\n    categories?: Category[];\r\n    tags?: Tag[];\r\n    uploads?: FileEntry[];\r\n    feedback?: ArticleFeedback[];\r\n\r\n    constructor(params: Object = {}) {\r\n        for (const name in params) {\r\n            this[name] = params[name];\r\n        }\r\n    }\r\n}\r\n","import {Article} from './Article';\n\nexport class Category {\n    id: number;\n    name: string;\n    description?: string;\n    position: number;\n    parent_id?: number;\n    hidden: boolean;\n    created_at?: string;\n    updated_at?: string;\n    children?: Category[];\n    parent?: Category;\n    articles?: Article[];\n    image?: string;\n    articles_count?: number;\n\n    constructor(params: Object = {}) {\n        for (const name in params) {\n            this[name] = params[name];\n        }\n    }\n}\n","<div class=\"modal-header\">\r\n    <h2 mat-dialog-title>\r\n        <span *ngIf=\"updating\" trans>Update Category</span>\r\n        <span *ngIf=\"!updating\" trans>New Category</span>\r\n    </h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<form (ngSubmit)=\"confirm()\" ngNativeValidate>\r\n    <mat-dialog-content class=\"many-inputs\">\r\n        <div class=\"input-container\">\r\n            <label for=\"name\" trans>Name</label>\r\n            <input type=\"text\" id=\"name\" name=\"name\" [(ngModel)]=\"model.name\">\r\n            <div class=\"error name-error\" *ngIf=\"errors.name\">{{errors.name}}</div>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"image\" trans>Image</label>\r\n            <div class=\"input-with-action action-left\">\r\n                <button mat-flat-button color=\"accent\" type=\"button\" class=\"addon\" (click)=\"openInsertImageDialog()\" [matTooltip]=\"'Upload image' | trans\">\r\n                    <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                </button>\r\n                <input type=\"text\" id=\"image\" name=\"image\" [(ngModel)]=\"model.image\">\r\n            </div>\r\n            <div class=\"error image-error\" *ngIf=\"errors.image\">{{errors.image}}</div>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"name\" trans>Parent Category</label>\r\n            <select type=\"text\" id=\"parent_id\" name=\"parent_id\" [(ngModel)]=\"model.parent_id\">\r\n                <option [ngValue]=\"null\" trans>No Parent Category</option>\r\n                <option [value]=\"category.id\" *ngFor=\"let category of categories\">{{category.name}}</option>\r\n            </select>\r\n            <div class=\"error parent-error\" *ngIf=\"errors.parent_id\">{{errors.parent_id}}</div>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"description\" trans>Description</label>\r\n            <textarea type=\"text\" id=\"description\" name=\"description\" [(ngModel)]=\"model.description\" rows=\"4\"></textarea>\r\n            <div class=\"error description-error\" *ngIf=\"errors.description\">{{errors.description}}</div>\r\n        </div>\r\n\r\n        <div class=\"setting-toggle-container\">\r\n            <mat-slide-toggle name=\"hidden\" id=\"hidden\" [(ngModel)]=\"model.hidden\" trans>Hidden</mat-slide-toggle>\r\n            <p trans>Whether this category should be displayed in help center.</p>\r\n        </div>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" class=\"submit-button\" mat-raised-button color=\"accent\">\r\n            <span *ngIf=\"updating\" trans>Update</span>\r\n            <span *ngIf=\"!updating\" trans>Create</span>\r\n        </button>\r\n    </mat-dialog-actions>\r\n</form>\r\n","import {Component, Inject, ViewEncapsulation} from '@angular/core';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {CategoriesService} from '../../shared/categories.service';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport {AvatarValidator} from '@common/account-settings/avatar-validator';\r\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\n\r\ninterface CategoryModalData {\r\n    category?: Category;\r\n    parentId?: number;\r\n}\r\n\r\ninterface CategoryModalErrors {\r\n    name?: string;\r\n    parent_id?: string;\r\n    description?: string;\r\n    image?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'category-modal',\r\n    templateUrl: './category-modal.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [UploadQueueService],\r\n})\r\nexport class CategoryModalComponent {\r\n    public categories: Category[] = [];\r\n    public model: Category = new Category({parent_id: null});\r\n    public updating = false;\r\n    public errors: CategoryModalErrors = {};\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<CategoryModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: CategoryModalData,\r\n        private api: CategoriesService,\r\n        private imageValidator: AvatarValidator,\r\n        private uploadQueue: UploadQueueService,\r\n        private toast: Toast,\r\n    ) {\r\n       this.hydrate();\r\n    }\r\n\r\n    public close(category?: Category) {\r\n        this.dialogRef.close(category);\r\n    }\r\n\r\n    public confirm() {\r\n        this.api.createOrUpdateCategory(this.getPayload()).subscribe(category => {\r\n            if (this.model.id) {\r\n                this.toast.open('Updated category.');\r\n            } else {\r\n                this.toast.open('Created category.');\r\n            }\r\n            this.close(category);\r\n        }, errorResponse => this.errors = errorResponse.messages);\r\n    }\r\n\r\n    private hydrate() {\r\n        this.fetchCategories(this.data.category);\r\n\r\n        if (this.data.category) {\r\n            this.updating = true;\r\n            this.model = this.data.category;\r\n        }\r\n\r\n        if (this.data.parentId) this.model.parent_id = this.data.parentId;\r\n    }\r\n\r\n    private getPayload() {\r\n        return {\r\n            id: this.model.id,\r\n            name: this.model.name,\r\n            image: this.model.image,\r\n            description: this.model.description,\r\n            parent_id: this.model.parent_id || null,\r\n            hidden: this.model.hidden,\r\n        };\r\n    }\r\n\r\n    private fetchCategories(category?: Category) {\r\n        this.api.getCategories().subscribe(response => {\r\n            // remove category we're currently editing from parent_id\r\n            // select so category can't be select as parent to itself\r\n            this.categories = response.categories.filter(current => {\r\n                return ! category || category.id !== current.id;\r\n            });\r\n        });\r\n    }\r\n\r\n    public openInsertImageDialog() {\r\n        const params = {\r\n            uri: 'uploads/images',\r\n            httpParams: {diskPrefix: 'category'},\r\n            validator: this.imageValidator\r\n        };\r\n        openUploadWindow({types: [UploadInputTypes.image], multiple: false}).then(uploadedFiles => {\r\n            if ( ! uploadedFiles) return;\r\n            this.uploadQueue.start(uploadedFiles, params).subscribe(response => {\r\n                this.model.image = response.fileEntry.url;\r\n            });\r\n        });\r\n    }\r\n}\r\n","<div class=\"action-bar\">\r\n    <div class=\"nav\">\r\n        <a [routerLink]=\"'/help-center'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" [routerLinkActiveOptions]=\"{exact: true}\" trans>Home</a>\r\n        <a [routerLink]=\"'/help-center/manage/categories'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" trans>Categories</a>\r\n        <a [routerLink]=\"'/help-center/manage/articles'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" [routerLinkActiveOptions]=\"{exact: true}\" trans>Articles</a>\r\n    </div>\r\n    <div class=\"actions\">\r\n        <button class=\"no-style action article-settings-action\" (click)=\"openArticleSettingsModal()\"><mat-icon svgIcon=\"settings\"></mat-icon></button>\r\n        <button class=\"no-style publish-article-button new-item-button\" (click)=\"saveOrUpdateArticle()\" id=\"submit\">\r\n            <span class=\"create-article-submit\" *ngIf=\"!articleModel.id\" trans>Create Article</span>\r\n            <span class=\"update-article-submit\" *ngIf=\"articleModel.id\" trans>Update Article</span>\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container\">\r\n    <section class=\"middle-column\">\r\n        <div class=\"input-container title\">\r\n            <input class=\"article-title-input\" type=\"text\" [(ngModel)]=\"articleModel.title\" placeholder=\"Title\" trans-placeholder>\r\n            <select class=\"article-status-input\" [(ngModel)]=\"articleModel.draft\">\r\n                <option value=\"0\" trans>Published</option>\r\n                <option value=\"1\" trans>Draft</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"text-editor-container\">\r\n            <upload-progress-bar></upload-progress-bar>\r\n            <text-editor inlineUploadPrefix=\"article_images\" (onFileUpload)=\"uploadFiles($event)\" class=\"text-editor\" minHeight=\"auto\" [showAdvancedControls]=\"true\" #editorEl></text-editor>\r\n        </div>\r\n    </section>\r\n\r\n    <aside class=\"right-column\" customScrollbar=\"lite\">\r\n        <categories-manager class=\"categories-panel\" [initialCategories]=\"getCategories()\">\r\n            <div class=\"new-category-button\">\r\n                <button mat-flat-button color=\"accent\" (click)=\"openNewCategoryModal()\" trans>+ Add New Category</button>\r\n            </div>\r\n        </categories-manager>\r\n\r\n        <div class=\"panel\">\r\n            <div class=\"panel-header\" trans>Tags</div>\r\n            <div class=\"panel-body\">\r\n                <tags-manager></tags-manager>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"panel\" *ngIf=\"attachments?.length\">\r\n            <div class=\"panel-header\" trans>Attachments</div>\r\n            <div class=\"panel-body\">\r\n                <reply-attachment-list [attachments]=\"attachments\" *ngIf=\"attachments.length\" (detached)=\"removeAttachment($event)\"></reply-attachment-list>\r\n            </div>\r\n        </div>\r\n    </aside>\r\n\r\n    <button class=\"preview-article-button\" (click)=\"openPreviewModal()\" [matTooltip]=\"'Preview Article' | trans\">\r\n        <mat-icon svgIcon=\"remove-red-eye\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n\r\n    <loading-indicator class=\"overlay\" [isVisible]=\"updating\"></loading-indicator>\r\n</div>\r\n","import {Component, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {ArticleSettingsModalComponent} from './article-settings-modal/article-settings-modal.component';\r\nimport {CategoriesManagerComponent} from '../categories-manager/categories-manager.component';\r\nimport {HelpCenterService} from '../../shared/help-center.service';\r\nimport {ArticleModalComponent} from '../../shared/article-modal/article-modal.component';\r\nimport {Article} from '../../../shared/models/Article';\r\nimport {CategoryModalComponent} from '../category-modal/category-modal.component';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {TextEditorComponent} from '@common/text-editor/text-editor.component';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {TagsManagerComponent} from '../../../shared/tags-manager/tags-manager.component';\r\nimport {UploadedFile} from '@common/uploads/uploaded-file';\r\nimport {FileEntry} from '@common/uploads/types/file-entry';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\n\r\n@Component({\r\n    selector: 'new-article',\r\n    templateUrl: './new-article.component.html',\r\n    styleUrls: ['./new-article.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [UploadQueueService],\r\n})\r\nexport class NewArticleComponent implements OnInit {\r\n    @ViewChild(TextEditorComponent, { static: true }) private textEditor: TextEditorComponent;\r\n    @ViewChild(CategoriesManagerComponent, { static: true }) private categoriesManager: CategoriesManagerComponent;\r\n    @ViewChild(TagsManagerComponent, { static: true }) private tagsManager: TagsManagerComponent;\r\n\r\n    public updating = false;\r\n    public articleModel: Article = new Article({categories: [], draft: 0});\r\n    public attachments: FileEntry[] = [];\r\n\r\n    constructor(\r\n        private modal: Modal,\r\n        private helpCenter: HelpCenterService,\r\n        private toast: Toast,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private uploadQueue: UploadQueueService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(resolves => this.hydrate(resolves['data']));\r\n    }\r\n\r\n    public getCategories(): number[] {\r\n        return this.articleModel.categories.map(category => category.id);\r\n    }\r\n\r\n    public saveOrUpdateArticle() {\r\n        const method = this.articleModel.id ? 'updateArticle' : 'createArticle';\r\n        this.updating = true;\r\n\r\n        this.helpCenter[method](this.getPayload()).subscribe(() => {\r\n            this.toast.open('Article ' + (this.articleModel.id ? 'updated.' : 'created.'));\r\n            this.router.navigateByUrl('help-center/manage/articles');\r\n        }, errors => {\r\n            const message = errors['messages'][Object.keys(errors['messages'])[0]];\r\n            this.toast.open(message);\r\n            this.updating = false;\r\n        });\r\n    }\r\n\r\n    public openPreviewModal() {\r\n        this.modal.open(\r\n            ArticleModalComponent,\r\n            {article: this.getPayload()},\r\n            {panelClass: 'article-modal-container'}\r\n        );\r\n    }\r\n\r\n    public openArticleSettingsModal() {\r\n        this.modal.show(ArticleSettingsModalComponent, {article: this.articleModel})\r\n            .afterClosed()\r\n            .subscribe(data => {\r\n                if ( ! data) return;\r\n                this.articleModel = Object.assign(this.articleModel, data);\r\n            });\r\n    }\r\n\r\n    private getPayload() {\r\n        const model  = Object.assign({}, this.articleModel) as {[key: string]: any};\r\n        model.body = this.textEditor.getContents();\r\n        model.categories = this.categoriesManager.getSelectedCategories();\r\n        model.tags = this.tagsManager.getSelectedTags();\r\n        model.uploads = this.attachments.map(a => a.id);\r\n        return model;\r\n    }\r\n\r\n    private hydrate(data: {article?: Article, categories?: Category[]}) {\r\n        if (data.article) {\r\n            this.articleModel = data.article;\r\n            this.textEditor.setContents(data.article.body);\r\n            this.categoriesManager.setSelectedCategories(this.articleModel.categories);\r\n            this.tagsManager.setSelectedTags(this.articleModel.tags.map(tag => tag.name));\r\n            this.attachments = data.article.uploads || [];\r\n        }\r\n\r\n        if (data.categories) {\r\n            this.categoriesManager.setCategories(data.categories);\r\n        }\r\n    }\r\n\r\n    public openNewCategoryModal() {\r\n        this.modal.show(CategoryModalComponent)\r\n            .afterClosed()\r\n            .subscribe(category => {\r\n                if ( ! category) return;\r\n                this.categoriesManager.refresh()\r\n                    .then(() => this.categoriesManager.toggle(category));\r\n            });\r\n    }\r\n\r\n    public uploadFiles(files: UploadedFile[]) {\r\n        this.uploadQueue.start(files).subscribe(response => {\r\n            this.attachments = [...this.attachments, response.fileEntry];\r\n        });\r\n    }\r\n\r\n    public removeAttachment(entry: FileEntry) {\r\n        for (let i = 0; i < this.attachments.length; i++) {\r\n            if (this.attachments[i].id === entry.id) {\r\n                this.attachments.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Router, Resolve, ActivatedRouteSnapshot} from '@angular/router';\r\nimport {HelpCenterService} from '../../shared/help-center.service';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {Article} from '../../../shared/models/Article';\r\nimport {CategoriesService} from '../../shared/categories.service';\r\nimport {forkJoin} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NewArticleResolve implements Resolve<{categories: Category[], article?: Article}> {\r\n\r\n    constructor(\r\n        private helpCenter: HelpCenterService,\r\n        private categories: CategoriesService,\r\n        private router: Router\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot): any {\r\n        const articleId = route.params['article_id'];\r\n\r\n        if (articleId) {\r\n            return forkJoin(\r\n                this.categories.getCategories(),\r\n                this.helpCenter.getArticle(route.params['article_id'])\r\n            ).toPromise().then(response => {\r\n                return {categories: response[0].categories, article: response[1].article};\r\n            }, () => {\r\n                this.router.navigate(['/help-center/manage/articles']);\r\n                return false;\r\n            });\r\n        } else {\r\n            return this.categories.getCategories().toPromise().then(response => {\r\n                return {categories: response.categories};\r\n            }, () => {\r\n                this.router.navigate(['/help-center/manage/articles']);\r\n                return false;\r\n            });\r\n        }\r\n    }\r\n}\r\n","import {Component, ViewEncapsulation, OnInit, EventEmitter, ViewChild, Output} from '@angular/core';\r\nimport {CategoriesManagerComponent} from '../../categories-manager/categories-manager.component';\r\nimport {TagsManagerComponent} from '../../../../shared/tags-manager/tags-manager.component';\r\n\r\n@Component({\r\n    selector: 'articles-list-filters',\r\n    templateUrl: './articles-list-filters.component.html',\r\n    styleUrls: ['./articles-list-filters.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ArticlesListFiltersComponent implements OnInit {\r\n    @ViewChild(TagsManagerComponent, { static: true }) tagsManager: TagsManagerComponent;\r\n    @ViewChild(CategoriesManagerComponent, { static: true }) categoriesManager: CategoriesManagerComponent;\r\n\r\n    /**\r\n     * Fired when any of the filters onChange.\r\n     */\r\n    @Output() public onChange = new EventEmitter();\r\n\r\n    /**\r\n     * Available filters for articles list.\r\n     */\r\n    private filters: {categories?: number[], tags?: string, draft?: number} = {draft: null};\r\n\r\n    ngOnInit() {\r\n        this.categoriesManager.refresh().then(() => this.onChange.emit());\r\n    }\r\n\r\n    /**\r\n     * Get current articles list filters.\r\n     */\r\n    public getFilters() {\r\n        return Object.assign(this.filters, {categories: this.categoriesManager.getExactSelectedCategories()});\r\n    }\r\n\r\n    /**\r\n     * Apply specified filter to articles list.\r\n     */\r\n    public applyFilter(name: string, value: any) {\r\n        this.filters[name] = value;\r\n        this.onChange.emit();\r\n    }\r\n\r\n    /**\r\n     * Check whether specified filter is currently applied to articles list.\r\n     */\r\n    public filterIsActive(name: string, value?: string|number): boolean {\r\n        if (value !== undefined) {\r\n            return this.filters[name] === value;\r\n        } else {\r\n            return this.filters[name] || this.filters[name] === 0;\r\n        }\r\n    }\r\n}\r\n","<div class=\"filters-list\">\r\n    <categories-manager class=\"article-categories-filter\" (onChange)=\"applyFilter('categories', $event)\"></categories-manager>\r\n\r\n    <div class=\"panel tags-filter\">\r\n        <div class=\"panel-header\" trans>Tags</div>\r\n        <div class=\"panel-body\">\r\n            <tags-manager (onChange)=\"applyFilter('tags', $event)\"></tags-manager>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"panel article-type-filter\">\r\n        <div class=\"panel-header\" trans>Article Status</div>\r\n        <div class=\"panel-body\">\r\n            <button mat-flat-button color=\"gray\" class=\"filter-button all-filter-button\" (click)=\"applyFilter('draft', null)\" [class.active]=\"filterIsActive('draft', null)\" trans>All</button>\r\n            <button mat-flat-button color=\"gray\" class=\"filter-button not-draft-filter-button\" (click)=\"applyFilter('draft', 0)\" [class.active]=\"filterIsActive('draft', 0)\" trans>Published</button>\r\n            <button mat-flat-button color=\"gray\" class=\"filter-button draft-filter-button\" (click)=\"applyFilter('draft', 1)\" [class.active]=\"filterIsActive('draft', 1)\" trans>Draft</button>\r\n        </div>\r\n    </div>\r\n</div>","<div class=\"action-bar\">\r\n    <div class=\"nav\">\r\n        <a [routerLink]=\"'/help-center'\" class=\"nav-item home-nav-item\" routerLinkActive=\"router-link-active\" [routerLinkActiveOptions]=\"{exact: true}\" trans>Home</a>\r\n        <a [routerLink]=\"'/help-center/manage/categories'\" class=\"nav-item categories-nav-item\" routerLinkActive=\"router-link-active\" trans>Categories</a>\r\n        <a [routerLink]=\"'/help-center/manage/articles'\" class=\"nav-item articles-nav-item\" routerLinkActive=\"router-link-active\" trans>Articles</a>\r\n    </div>\r\n    <div class=\"actions\">\r\n        <div class=\"search-bar input-container\">\r\n            <input type=\"text\" placeholder=\"Search\" class=\"articles-search-input\" [formControl]=\"searchQuery\" trans-placeholder>\r\n            <mat-icon svgIcon=\"search\"></mat-icon>\r\n        </div>\r\n        <div class=\"action-bar-action change-layout-action\">\r\n            <button class=\"no-style grid-layout-button\" (click)=\"setLayout('grid')\" [class.active]=\"isLayoutActive('grid')\"><mat-icon svgIcon=\"view-comfy\"></mat-icon></button>\r\n            <button class=\"no-style list-layout-button\" (click)=\"setLayout('list')\" [class.active]=\"isLayoutActive('list')\"><mat-icon svgIcon=\"view-list\"></mat-icon></button>\r\n        </div>\r\n        <articles-order-select (onChange)=\"reloadArticles()\" class=\"action-bar-action\"></articles-order-select>\r\n        <a class=\"new-article-button new-item-button\" routerLink=\"new\"><mat-icon svgIcon=\"add\"></mat-icon> <span trans>Create New Article</span></a>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"content\">\r\n    <articles-list-filters (onChange)=\"reloadArticles()\"></articles-list-filters>\r\n\r\n    <div class=\"articles-list-container\" *ngIf=\"paginator.pagination$ | async as pagination\" #scrollContainer>\r\n        <div class=\"articles-list\">\r\n            <div [class.grid-flex-wrapper]=\"selectedLayout === 'grid'\">\r\n                <div class=\"articles-list-item\" *ngFor=\"let article of pagination.data\" (click)=\"goToUpdateArticle(article.id)\" [class.draft]=\"article.draft\">\r\n                    <button class=\"no-style delete-article-button\" (click)=\"maybeDeleteArticle(article); $event.stopPropagation();\" [matTooltip]=\"'Delete Article' | trans\">\r\n                        <mat-icon svgIcon=\"delete\" class=\"size-20\"></mat-icon>\r\n                    </button>\r\n                    <div class=\"article-categories\" *ngIf=\"article.categories.length\">\r\n                        <span class=\"parent-category\" *ngIf=\"article.categories[0]?.parent\">{{article.categories[0].parent.name}} > </span>\r\n                        <span class=\"category\">{{article.categories[0].name}}</span>\r\n                    </div>\r\n                    <div class=\"article-title\">{{article.title}}</div>\r\n                    <div class=\"article-body\">{{article.body}}</div>\r\n                    <div class=\"article-tags\">\r\n                        <span class=\"tag-label large\" *ngFor=\"let tag of article.tags\">{{tag.name}}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <no-results-message *ngIf=\"paginator.noResults$ | async\">\r\n                <span primary-text trans>Could not find any articles.</span>\r\n                <span secondary-text trans>Try to make article files less specific.</span>\r\n            </no-results-message>\r\n        </div>\r\n\r\n        <loading-indicator class=\"overlay\" [isVisible]=\"paginator.loading$ | async\"></loading-indicator>\r\n\r\n        <mat-paginator [pageSize]=\"15\" [pageSizeOptions]=\"[5, 10, 15, 20]\" [length]=\"pagination.total\" [pageIndex]=\"pagination.current_page - 1\" (page)=\"matPaginatorPageChanged($event)\"></mat-paginator>\r\n    </div>\r\n</div>\r\n","import {AfterViewInit, Component, ElementRef, OnDestroy, ViewChild} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {FormControl} from '@angular/forms';\r\nimport {ArticlesListFiltersComponent} from './articles-list-filters/articles-list-filters.component';\r\nimport {ArticlesOrderSelectComponent} from '../../shared/articles-order-select/articles-order-select.component';\r\nimport {HelpCenterService} from '../../shared/help-center.service';\r\nimport {Article} from '../../../shared/models/Article';\r\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {PageEvent} from '@angular/material/paginator';\r\nimport {Paginator} from '@common/shared/paginator.service';\r\n\r\n@Component({\r\n    selector: 'articles-list',\r\n    templateUrl: './articles-list.component.html',\r\n    styleUrls: ['./articles-list.component.scss'],\r\n    providers: [Paginator],\r\n})\r\nexport class ArticlesListComponent implements AfterViewInit, OnDestroy {\r\n    @ViewChild(ArticlesOrderSelectComponent, { static: true }) articlesOrder: ArticlesOrderSelectComponent;\r\n    @ViewChild(ArticlesListFiltersComponent, { static: true }) articlesListFilters: ArticlesListFiltersComponent;\r\n    @ViewChild('scrollContainer', { static: false }) scrollContainer: ElementRef<HTMLElement>;\r\n\r\n    public searchQuery = new FormControl();\r\n    public selectedLayout = 'grid';\r\n\r\n    constructor(\r\n        private helpCenter: HelpCenterService,\r\n        private router: Router,\r\n        public paginator: Paginator<Article>,\r\n        private modal: Modal,\r\n    ) {}\r\n\r\n    ngAfterViewInit() {\r\n        this.searchQuery.valueChanges\r\n            .pipe(debounceTime(400), distinctUntilChanged())\r\n            .subscribe(() => this.reloadArticles());\r\n    }\r\n\r\n    public goToUpdateArticle(articleId: number) {\r\n        this.router.navigate(['/help-center/manage/', 'articles', articleId, 'edit']);\r\n    }\r\n\r\n    public maybeDeleteArticle(article: Article) {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Article',\r\n            body:  'Are you sure you want to delete this article?',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.helpCenter.deleteArticles([article.id]).subscribe(() => this.paginator.paginate());\r\n        });\r\n    }\r\n\r\n    public setLayout(name: string) {\r\n        this.selectedLayout = name;\r\n    }\r\n\r\n    public isLayoutActive(name: string) {\r\n        return this.selectedLayout === name;\r\n    }\r\n\r\n    public reloadArticles(pagination: {page?: number, perPage?: number} = {}) {\r\n        const params = {...this.getQueryParams(), ...pagination};\r\n        this.paginator.paginate(params, 'help-center/articles')\r\n            .subscribe(() => {\r\n                if (this.scrollContainer) {\r\n                    this.scrollContainer.nativeElement.scrollTop = 0;\r\n                }\r\n            });\r\n    }\r\n\r\n    public matPaginatorPageChanged(e: PageEvent) {\r\n        // material paginator is zero based, laravel is one based, need to sync page number here\r\n        const page = e.pageIndex ? e.pageIndex + 1 : undefined;\r\n        this.reloadArticles({page, perPage: e.pageSize});\r\n    }\r\n\r\n    private getQueryParams() {\r\n        const filters = this.articlesListFilters.getFilters(),\r\n            merged  = {} as {[key: string]: string|number};\r\n\r\n        // only specify filters with 'thruthy' or 0 value\r\n        for (const name in filters) {\r\n            if (filters[name] || filters[name] === 0) {\r\n                merged[name] = filters[name];\r\n            }\r\n        }\r\n\r\n        if (this.searchQuery.value) {\r\n            merged.query = this.searchQuery.value;\r\n        }\r\n\r\n        merged.orderBy = this.articlesOrder.selectedValue;\r\n\r\n        return merged;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.paginator.destroy();\r\n    }\r\n}\r\n","import {Component, ViewEncapsulation} from '@angular/core';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {CurrentUser} from '@common/auth/current-user';\r\n\r\n@Component({\r\n    selector: 'help-center-manage',\r\n    templateUrl: './help-center-manage.component.html',\r\n    styleUrls: ['./help-center-manage.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\n\r\nexport class HelpCenterManageComponent {\r\n    constructor(public settings: Settings, public currentUser: CurrentUser) {}\r\n}\r\n","<material-navbar menuPosition=\"agent-mailbox\"></material-navbar>\r\n\r\n<div class=\"body\">\r\n    <router-outlet></router-outlet>\r\n</div>","<div class=\"category-name-container\">\r\n    <button class=\"no-style drag-handle\" cdkDragHandle><mat-icon svgIcon=\"drag-handle\"></mat-icon></button>\r\n    <span class=\"category-name\" (click)=\"navigateToArticlesList(category)\">{{category.name}}</span>\r\n    <mat-icon svgIcon=\"visibility-off\" class=\"hidden-icon\" *ngIf=\"category.hidden\" color=\"warn\"></mat-icon>\r\n</div>\r\n\r\n<div class=\"info\">\r\n    <div class=\"articles-count\">\r\n        <span class=\"no-articles\" *ngIf=\"!category.articles_count\" trans>No Articles</span>\r\n        <span class=\"has-articles\" *ngIf=\"category.articles_count\">\r\n            <span class=\"plural\" *ngIf=\"category.articles_count > 1\">{{ category.articles_count}} <span trans>Articles</span></span>\r\n            <span class=\"singular\" *ngIf=\"category.articles_count== 1\" trans>1 Article</span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"actions\">\r\n    <button mat-icon-button class=\"update-category-button\" (click)=\"openUpdateCategoryModal(category)\" [matTooltip]=\"'Update Category' | trans\">\r\n        <mat-icon svgIcon=\"settings\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n\r\n    <button mat-icon-button class=\"new-child-category-button\" (click)=\"openCreateChildCategoryModal()\" *ngIf=\"!category.parent_id\" [matTooltip]=\"'Create Child Category' | trans\">\r\n        <mat-icon svgIcon=\"create-new-folder\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n\r\n    <button mat-icon-button class=\"detach-category-button\" (click)=\"maybeDetachCategory(category.id)\" *ngIf=\"category.parent_id\" [matTooltip]=\"'Detach Category' | trans\">\r\n        <mat-icon svgIcon=\"delete\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n\r\n    <button mat-icon-button class=\"delete-category-button\" (click)=\"maybeDeleteCategory(category.id)\" [matTooltip]=\"'Delete Category' | trans\">\r\n        <mat-icon svgIcon=\"delete-forever\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n</div>\r\n","import {Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter} from '@angular/core';\r\nimport {CategoryModalComponent} from '../../category-modal/category-modal.component';\r\nimport {Category} from '../../../../shared/models/Category';\r\nimport {CategoriesService} from '../../../shared/categories.service';\r\nimport {Router} from '@angular/router';\r\nimport {LocalStorage} from '@common/core/services/local-storage.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Component({\r\n    selector: 'category-list-item',\r\n    templateUrl: './category-list-item.component.html',\r\n    styleUrls: ['./category-list-item.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CategoryListItemComponent {\r\n    constructor(\r\n        private modal: Modal,\r\n        private api: CategoriesService,\r\n        private router: Router,\r\n        private storage: LocalStorage,\r\n    ) {}\r\n\r\n    /**\r\n     * Help center category model instance.\r\n     */\r\n    @Input() public category: Category;\r\n\r\n    /**\r\n     * Fired when this category model changes or is deleted.\r\n     */\r\n    @Output() public onChange = new EventEmitter();\r\n\r\n    /**\r\n     * Show modal for creating child category.\r\n     */\r\n    public openCreateChildCategoryModal() {\r\n        this.modal.show(CategoryModalComponent, {parentId: this.category.id})\r\n            .afterClosed().subscribe(() => this.onChange.emit());\r\n    }\r\n\r\n    /**\r\n     * Show modal for updating specified category.\r\n     */\r\n    public openUpdateCategoryModal(category: Category) {\r\n        this.modal.show(CategoryModalComponent, {category})\r\n            .afterClosed().subscribe(() => this.onChange.emit());\r\n    }\r\n\r\n    /**\r\n     * Delete specified category if user confirms.\r\n     */\r\n    public maybeDeleteCategory(id: number) {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Category',\r\n            body: 'Are you sure you want to delete this category?',\r\n            bodyBold: 'Children of this category will not be deleted.',\r\n            ok: 'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.api.deleteCategory(id).subscribe(() => this.onChange.emit());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach specified category from parent if user confirms.\r\n     */\r\n    public maybeDetachCategory(id: number) {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Detach Category',\r\n            body:  'Are you sure you want to detach this category from its parent?',\r\n            ok:    'Detach'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.api.detachCategory(id).subscribe(() => this.onChange.emit());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Select specified category and navigate to articles list route.\r\n     */\r\n    public navigateToArticlesList(category: Category) {\r\n        const ids = [category.id];\r\n        if (category.parent_id) ids.push(category.parent_id);\r\n        this.storage.set('selectedCategories', ids);\r\n\r\n        this.router.navigate(['/help-center/manage/articles']);\r\n    }\r\n}\r\n","<div class=\"action-bar\">\r\n    <div class=\"nav\">\r\n        <a [routerLink]=\"'/help-center'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" [routerLinkActiveOptions]=\"{exact: true}\" trans>Home</a>\r\n        <a [routerLink]=\"'/help-center/manage/categories'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" trans>Categories</a>\r\n        <a [routerLink]=\"'/help-center/manage/articles'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" trans>Articles</a>\r\n    </div>\r\n    <div class=\"actions\">\r\n        <div class=\"action\">\r\n            <button mat-icon-button (click)=\"toggleCategoryChildren()\" class=\"toggle-children-btn\" [class.active]=\"categoryChildrenVisible\" [matTooltip]=\"'Toggle child categories' | trans\">\r\n                <mat-icon svgIcon=\"unfold-more\"></mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"search-bar input-container\">\r\n            <input type=\"text\" placeholder=\"Search\" class=\"categories-search-input\" [formControl]=\"searchQuery\" trans-placeholder>\r\n            <mat-icon svgIcon=\"search\"></mat-icon>\r\n        </div>\r\n        <button class=\"new-category-button new-item-button\" (click)=\"showNewCategoryModal()\">\r\n            <mat-icon svgIcon=\"add\"></mat-icon> <span trans>New Category</span>\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container\">\r\n    <section class=\"categories-list\" cdkDropList (cdkDropListDropped)=\"reorderCategories($event)\" [cdkDropListDisabled]=\"shouldDisableReorder()\">\r\n        <div class=\"category-container\" *ngFor=\"let category of filteredCategories\">\r\n            <category-list-item\r\n                    cdkDrag\r\n                    [cdkDragData]=\"category\"\r\n                    class=\"category-list-item parent-category\"\r\n                    [category]=\"category\"\r\n                    (onChange)=\"updateCategories()\"\r\n                    [attr.data-id]=\"category.id\"\r\n            ></category-list-item>\r\n            <div class=\"category-children\" *ngIf=\"category.children.length\" [class.hidden]=\"!categoryChildrenVisible\" cdkDropList (cdkDropListDropped)=\"reorderCategories($event, category)\" [cdkDropListDisabled]=\"shouldDisableReorder()\">\r\n                <category-list-item\r\n                        cdkDrag\r\n                        [cdkDragData]=\"child\"\r\n                        class=\"category-list-item child-category\"\r\n                        *ngFor=\"let child of category.children\"\r\n                        [category]=\"child\"\r\n                        (onChange)=\"updateCategories()\"\r\n                        [attr.data-id]=\"child.id\"\r\n                ></category-list-item>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</div>","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {CategoryModalComponent} from '../category-modal/category-modal.component';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {CategoriesService} from '../../shared/categories.service';\r\nimport {CategoriesFilterer} from '../categories-filterer';\r\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n    selector: 'categories-list',\r\n    templateUrl: './categories-list.component.html',\r\n    styleUrls: ['./categories-list.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CategoriesListComponent implements OnInit {\r\n    public searchQuery = new FormControl();\r\n    public allCategories: Category[] = [];\r\n    public filteredCategories: Category[] = [];\r\n    public categoryChildrenVisible = true;\r\n\r\n    constructor(\r\n        public api: CategoriesService,\r\n        private modal: Modal\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.updateCategories();\r\n        this.bindSearchQuery();\r\n    }\r\n\r\n    public showNewCategoryModal() {\r\n        this.modal.show(CategoryModalComponent).\r\n            afterClosed()\r\n            .subscribe(category => {\r\n                if ( ! category) return;\r\n                this.updateCategories();\r\n            });\r\n    }\r\n\r\n    public updateCategories() {\r\n        this.api.getCategories().subscribe(response => {\r\n            this.filteredCategories = response.categories;\r\n            this.allCategories      = response.categories;\r\n            this.filterCategories(this.searchQuery.value);\r\n        });\r\n    }\r\n\r\n    private bindSearchQuery() {\r\n        this.searchQuery.valueChanges\r\n            .pipe(debounceTime(400), distinctUntilChanged())\r\n            .subscribe(query => this.filterCategories(query));\r\n    }\r\n\r\n    private filterCategories(searchQuery: string) {\r\n        this.filteredCategories = (new CategoriesFilterer).filter(searchQuery, this.allCategories);\r\n    }\r\n\r\n    public reorderCategories(e: CdkDragDrop<Category>, parent?: Category) {\r\n        const array = parent ? parent.children : this.filteredCategories;\r\n        moveItemInArray(array, e.previousIndex, e.currentIndex);\r\n        const ids = array.map(category => category.id);\r\n        this.api.reorderCategories(ids, parent ? parent.id : null).subscribe();\r\n    }\r\n\r\n    public toggleCategoryChildren() {\r\n        this.categoryChildrenVisible = !this.categoryChildrenVisible;\r\n    }\r\n\r\n    public shouldDisableReorder(): boolean {\r\n        return this.searchQuery.value;\r\n    }\r\n}\r\n","import {RouterModule} from '@angular/router';\r\nimport {NewArticleComponent} from './new-article/new-article.component';\r\nimport {NewArticleResolve} from './new-article/new-article-resolve.service';\r\nimport {ArticlesListComponent} from './articles-list/articles-list.component';\r\nimport {HelpCenterManageComponent} from './help-center-manage.component';\r\nimport {CategoriesListComponent} from './categories-list/categories-list.component';\r\nimport {AuthGuard} from '@common/guards/auth-guard.service';\r\n\r\nexport const routing = RouterModule.forChild([\r\n    {\r\n        path: '',\r\n        component: HelpCenterManageComponent,\r\n        canActivate: [AuthGuard],\r\n        children: [\r\n            {\r\n                path: '',\r\n                redirectTo: 'articles'\r\n            },\r\n            {\r\n                path: 'articles',\r\n                component: ArticlesListComponent,\r\n                data: {permissions: ['categories.view', 'tags.view', 'articles.view', 'articles.create']}\r\n            },\r\n            {\r\n                path: 'categories',\r\n                component: CategoriesListComponent,\r\n                data: {permissions: ['categories.view', 'categories.create']}\r\n            },\r\n            {\r\n                path: 'articles/new',\r\n                component: NewArticleComponent,\r\n                resolve: {data: NewArticleResolve},\r\n                data: {permissions: ['articles.create']}\r\n            },\r\n            {\r\n                path: 'articles/:article_id/edit',\r\n                component: NewArticleComponent,\r\n                resolve: {data: NewArticleResolve},\r\n                data: {permissions: ['articles.update']}\r\n            },\r\n        ]\r\n    },\r\n]);\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {RouterModule} from '@angular/router';\r\nimport {NewArticleComponent} from './new-article/new-article.component';\r\nimport {ArticlesListFiltersComponent} from './articles-list/articles-list-filters/articles-list-filters.component';\r\nimport {ArticlesListComponent} from './articles-list/articles-list.component';\r\nimport {ArticleSettingsModalComponent} from './new-article/article-settings-modal/article-settings-modal.component';\r\nimport {CategoriesManagerComponent} from './categories-manager/categories-manager.component';\r\nimport {HelpCenterManageComponent} from './help-center-manage.component';\r\nimport {CategoryModalComponent} from './category-modal/category-modal.component';\r\nimport {CategoriesListComponent} from './categories-list/categories-list.component';\r\nimport {CategoryListItemComponent} from './categories-list/category-list-item/category-list-item.component';\r\nimport {routing} from './help-center-manage.routing';\r\nimport {HelpCenterSharedModule} from '../shared/help-center-shared.module';\r\nimport {TextEditorModule} from '@common/text-editor/text-editor.module';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {MaterialNavbarModule} from '@common/core/ui/material-navbar/material-navbar.module';\r\nimport {TranslationsModule} from '@common/core/translations/translations.module';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {NoResultsMessageModule} from '@common/core/ui/no-results-message/no-results-message.module';\r\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {CustomScrollbarModule} from '@common/core/ui/custom-scrollbar/custom-scrollbar.module';\r\nimport {ReplyAttachmentListModule} from '../../shared/reply-attachment-list/reply-attachment-list.module';\r\nimport {TagsManagerModule} from '../../shared/tags-manager/tags-manager.module';\r\nimport {UploadsModule} from '@common/uploads/uploads.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        RouterModule,\r\n        TextEditorModule,\r\n        HelpCenterSharedModule,\r\n        MaterialNavbarModule,\r\n        TranslationsModule,\r\n        NoResultsMessageModule,\r\n        LoadingIndicatorModule,\r\n        CustomScrollbarModule,\r\n        ReplyAttachmentListModule,\r\n        TagsManagerModule,\r\n        UploadsModule,\r\n        routing,\r\n\r\n        // material\r\n        MatDialogModule,\r\n        MatPaginatorModule,\r\n        MatSlideToggleModule,\r\n        DragDropModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatTooltipModule,\r\n        MatCheckboxModule,\r\n    ],\r\n    declarations: [\r\n        HelpCenterManageComponent,\r\n        ArticlesListComponent,\r\n        ArticlesListFiltersComponent,\r\n        CategoriesManagerComponent,\r\n        NewArticleComponent,\r\n        CategoryModalComponent,\r\n        ArticleSettingsModalComponent,\r\n        CategoriesListComponent,\r\n        CategoryListItemComponent,\r\n    ],\r\n})\r\nexport class HcManageModule { }\r\n","/**\r\n * Download file from specified url.\r\n */\r\nexport function downloadFileFromUrl(url: string, name?: string) {\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    if (name) link.download = name;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n}\r\n","<default-preview *ngIf=\"fileTooLarge$ | async; else textPreview\" message=\"This file is too large to preview.\"></default-preview>\r\n<ng-template #textPreview>\r\n    <div class=\"text-wrapper preview-object\">\r\n        <pre>{{ content$ | async }}</pre>\r\n    </div>\r\n</ng-template>","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\nconst FIVE_MB = 5242880;\r\n\r\n@Component({\r\n    selector: 'text-preview',\r\n    templateUrl: './text-preview.component.html',\r\n    styleUrls: ['./text-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TextPreviewComponent extends BaseFilePreview implements OnInit {\r\n    public content$ = new BehaviorSubject('');\r\n    public fileTooLarge$ = new BehaviorSubject(false);\r\n\r\n    ngOnInit() {\r\n        if (this.file.file_size > FIVE_MB) {\r\n            this.fileTooLarge$.next(true);\r\n        } else {\r\n            this.loadFileContents();\r\n        }\r\n    }\r\n\r\n    private loadFileContents() {\r\n        this.getContents()\r\n            .subscribe(content => {\r\n                this.content$.next(content);\r\n            });\r\n    }\r\n}\r\n","<audio #playerEl controls=\"controls\" class=\"preview-object\" [class.hidden]=\"invalidMedia\" controlsList=\"nodownload noremoteplayback\"></audio>\r\n\r\n<default-preview *ngIf=\"invalidMedia\"></default-preview>","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\n@Component({\r\n    selector: 'audio-preview',\r\n    templateUrl: './audio-preview.component.html',\r\n    styleUrls: ['./audio-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AudioPreviewComponent extends BaseFilePreview implements OnInit {\r\n    @ViewChild('playerEl', { static: true }) playerEl: ElementRef;\r\n    public invalidMedia = false;\r\n\r\n    ngOnInit() {\r\n        this.invalidMedia = !this.canPlayVideo();\r\n\r\n        if ( ! this.invalidMedia) {\r\n            this.player().src = this.getSrc();\r\n            this.player().play();\r\n        }\r\n    }\r\n\r\n    protected canPlayVideo(): boolean {\r\n        return !!this.player().canPlayType(this.file.mime);\r\n    }\r\n\r\n    protected player() {\r\n        return this.playerEl.nativeElement as HTMLVideoElement|HTMLAudioElement;\r\n    }\r\n}\r\n","<video #playerEl controls=\"controls\" class=\"preview-object\" [class.hidden]=\"invalidMedia\" controlsList=\"nodownload noremoteplayback\"></video>\r\n\r\n<default-preview *ngIf=\"invalidMedia\"></default-preview>","import {ChangeDetectionStrategy, Component} from '@angular/core';\r\nimport {AudioPreviewComponent} from '../audio-preview/audio-preview.component';\r\n\r\n@Component({\r\n    selector: 'video-preview',\r\n    templateUrl: './video-preview.component.html',\r\n    styleUrls: ['./video-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VideoPreviewComponent extends AudioPreviewComponent {\r\n}\r\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\n@Component({\r\n    selector: 'image-preview',\r\n    templateUrl: './image-preview.component.html',\r\n    styleUrls: ['./image-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ImagePreviewComponent extends BaseFilePreview {}\r\n","<img [src]=\"getSafeSrc()\" class=\"preview-object\">","import {ChangeDetectionStrategy, Component, HostBinding,} from '@angular/core';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\n@Component({\r\n  selector: 'pdf-preview',\r\n  templateUrl: './pdf-preview.component.html',\r\n  styleUrls: ['./pdf-preview.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PdfPreviewComponent extends BaseFilePreview {\r\n    @HostBinding('class') className = 'preview-object';\r\n\r\n    public getSrc() {\r\n        return super.getSrc() + '#toolbar=0';\r\n    }\r\n}\r\n","<iframe [src]=\"getSafeSrc()\"></iframe>","<ng-container *ngIf=\"!(showDefaultPreview$ | async); else defaultPreview\">\r\n    <iframe class=\"preview-object\" #iframe></iframe>\r\n    <div class=\"pop-out-block\" (click)=\"openInNewWindow()\"></div>\r\n</ng-container>\r\n<ng-template #defaultPreview>\r\n    <default-preview></default-preview>\r\n</ng-template>\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, ViewChild } from '@angular/core';\nimport { BaseFilePreview } from '../base-file-preview';\nimport { BehaviorSubject } from 'rxjs';\nimport { GenericBackendResponse } from '@common/core/types/backend-response';\nimport { isAbsoluteUrl } from '@common/core/utils/is-absolute-url';\n\n@Component({\n    selector: 'google-docs-viewer',\n    templateUrl: './google-docs-viewer.component.html',\n    styleUrls: ['./google-docs-viewer.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GoogleDocsViewerComponent extends BaseFilePreview implements AfterViewInit {\n    @ViewChild('iframe') iframe: ElementRef<HTMLIFrameElement>;\n    public loading$ = new BehaviorSubject(true);\n    public showDefaultPreview$ = new BehaviorSubject(false);\n    private timeoutRef: number;\n\n    ngAfterViewInit() {\n        // google docs viewer only supports file up to 25MB\n        if (this.file.file_size > 25000000) {\n            return this.showDefaultPreview();\n        }\n\n        this.iframe.nativeElement.onload = () => {\n            clearTimeout(this.timeoutRef);\n            this.stopLoading();\n        };\n\n        this.getIframeSrc().then(url => {\n            this.iframe.nativeElement.src = url;\n        }).catch(() => {\n            this.showDefaultPreview();\n        });\n\n        // if google docs preview iframe is not loaded\n        // after 6 seconds, bail and show default preview\n        this.timeoutRef = setTimeout(() => {\n            this.showDefaultPreview();\n        }, 5000);\n    }\n\n    public stopLoading() {\n        this.loading$.next(false);\n    }\n\n    public showDefaultPreview() {\n        this.stopLoading();\n        this.showDefaultPreview$.next(true);\n    }\n\n    public openInNewWindow() {\n        window.open(window.location.href, '_blank');\n    }\n\n    private getIframeSrc(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            let previewUrl = this.getSrc();\n\n            // if we're not trying to preview shareable link we will need to generate\n            // preview token, otherwise google won't be able to access this file\n            if (previewUrl.indexOf('shareable_link') === -1) {\n                this.http.post<GenericBackendResponse<{preview_token: string}>>(`uploads/${this.file.id}/add-preview-token`).subscribe(response => {\n                    previewUrl += `?preview_token=${response.preview_token}`;\n                    resolve(this.getGoogleDocsUrl(previewUrl));\n                }, () => reject);\n            } else {\n                resolve(this.getGoogleDocsUrl(previewUrl));\n            }\n        });\n    }\n\n    private getGoogleDocsUrl(previewUrl: string) {\n        previewUrl = isAbsoluteUrl(previewUrl) ? previewUrl : this.settings.getBaseUrl() + previewUrl;\n        return 'https://docs.google.com/gview?embedded=true&url=' + encodeURIComponent(previewUrl);\n    }\n}\n","import { InjectionToken, Injectable } from '@angular/core';\r\nimport { TextPreviewComponent } from './text-preview/text-preview.component';\r\nimport { VideoPreviewComponent } from './video-preview/video-preview.component';\r\nimport { ImagePreviewComponent } from './image-preview/image-preview.component';\r\nimport { PdfPreviewComponent } from './pdf-preview/pdf-preview.component';\r\nimport { AudioPreviewComponent } from './audio-preview/audio-preview.component';\r\nimport { GoogleDocsViewerComponent } from './google-docs-viewer/google-docs-viewer.component';\r\n\r\nexport const AVAILABLE_PREVIEWS = new InjectionToken<any>('AVAILABLE_PREVIEWS');\r\n\r\n@Injectable()\nexport class DefaultPreviews {\r\n    text = TextPreviewComponent;\r\n    video = VideoPreviewComponent;\r\n    audio = AudioPreviewComponent;\r\n    image = ImagePreviewComponent;\r\n    pdf = PdfPreviewComponent;\r\n    spreadsheet = GoogleDocsViewerComponent;\r\n    powerPoint = GoogleDocsViewerComponent;\r\n    word = GoogleDocsViewerComponent;\r\n}\r\n\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnInit,\r\n    Output,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Tag} from '../models/Tag';\r\nimport {TagService} from '../tag.service';\r\nimport {FormControl} from '@angular/forms';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n\r\n@Component({\r\n    selector: 'tags-manager',\r\n    templateUrl: './tags-manager.component.html',\r\n    styleUrls: ['./tags-manager.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TagsManagerComponent implements OnInit {\r\n    @Output() public onChange: EventEmitter<string[]> = new EventEmitter();\r\n    @Input() public selectedTags: string[] = [];\r\n    @Input() public readonly = false;\r\n\r\n    public formControl = new FormControl();\r\n    public allTags$ = new BehaviorSubject<Tag[]>([]);\r\n    public suggestedTags$ = new BehaviorSubject<Tag[]>([]);\r\n\r\n    constructor(private tagService: TagService) {}\r\n\r\n    ngOnInit() {\r\n        this.tagService.getTags({perPage: 15}).subscribe(response => {\r\n            this.allTags$.next(response.pagination.data.filter(tag => tag.type !== 'status'));\r\n        });\r\n        this.formControl.valueChanges.subscribe(q => {\r\n            const suggestions = q ?\r\n                this.allTags$.value.filter(t => t.name.toLowerCase().includes(q.toLowerCase())) :\r\n                [];\r\n            this.suggestedTags$.next(suggestions);\r\n        });\r\n    }\r\n\r\n    public getSelectedTags(): string[] {\r\n        return this.selectedTags.slice();\r\n    }\r\n\r\n    public setSelectedTags(tags: string[]) {\r\n        return this.selectedTags = tags;\r\n    }\r\n\r\n    public addTags(tags?: string) {\r\n        tags = tags || this.formControl.value;\r\n        if ( ! tags) return;\r\n\r\n        const tagsArray = tags.split(',');\r\n\r\n        tagsArray.forEach(name => {\r\n            const tagName = name.trim();\r\n\r\n            if (this.selectedTags.indexOf(tagName) === -1) {\r\n                this.selectedTags.push(tagName);\r\n            }\r\n        });\r\n\r\n        this.formControl.reset();\r\n        this.onChange.emit(this.selectedTags);\r\n    }\r\n\r\n    public addTag(tagName: string) {\r\n        if (this.selectedTags.indexOf(tagName) === -1) {\r\n            this.selectedTags.push(tagName);\r\n            this.onChange.emit(this.selectedTags);\r\n        }\r\n    }\r\n\r\n    public removeTag(tagName: string) {\r\n        const index = this.selectedTags.indexOf(tagName);\r\n        this.selectedTags.splice(index, 1);\r\n        this.onChange.emit(this.selectedTags);\r\n    }\r\n\r\n    public deselectAll() {\r\n        this.selectedTags = [];\r\n        this.onChange.emit(this.selectedTags);\r\n    }\r\n}\r\n","<form class=\"input-container input-group\" *ngIf=\"!readonly\" ngNativeValidate (ngSubmit)=\"addTags()\">\r\n    <input type=\"text\" name=\"tag-input\" class=\"tags-string-model\" [matAutocomplete]=\"auto\" [formControl]=\"formControl\" required>\r\n    <button type=\"submit\" class=\"add-tags-button\" mat-flat-button color=\"accent\" trans>Add</button>\r\n</form>\r\n\r\n<p class=\"main-info\" *ngIf=\"!readonly\" trans>Separate tags with comma.</p>\r\n\r\n<div class=\"selected-tags\">\r\n    <mat-chip-list [selectable]=\"false\">\r\n        <mat-chip (removed)=\"removeTag(tag)\" [removable]=\"!readonly\" *ngFor=\"let tag of selectedTags\">\r\n            <span>{{tag}}</span>\r\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\r\n        </mat-chip>\r\n    </mat-chip-list>\r\n</div>\r\n\r\n<div class=\"existing-tags\" *ngIf=\"!readonly && (allTags$ | async).length\">\r\n    <p trans>Choose from existing tags:</p>\r\n    <div class=\"tags-list\">\r\n        <div class=\"tag-name\" *ngFor=\"let tag of allTags$ | async\" (click)=\"addTag(tag.name)\">{{tag.display_name}}</div>\r\n    </div>\r\n</div>\r\n\r\n<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"addTags($event.option.value)\">\r\n    <mat-option *ngFor=\"let tag of suggestedTags$ | async\" [value]=\"tag.name\">{{tag.display_name}}</mat-option>\r\n</mat-autocomplete>\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TagsManagerComponent} from './tags-manager.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\n\n\n@NgModule({\n    declarations: [\n        TagsManagerComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        TranslationsModule,\n\n        // material\n        MatChipsModule,\n        MatIconModule,\n        MatButtonModule,\n        MatAutocompleteModule,\n    ],\n    exports: [\n        TagsManagerComponent,\n    ]\n})\nexport class TagsManagerModule {\n}\n"]}