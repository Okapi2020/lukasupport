{"version":3,"sources":["webpack:///src/common/core/ui/confirm-modal/confirm-modal.component.ts","webpack:///src/common/core/ui/confirm-modal/confirm-modal.component.html","webpack:///src/common/file-preview/preview-url-transformer.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/interval.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","webpack:///src/common/uploads/formatted-file-size.pipe.ts","webpack:///src/common/file-preview/preview-files.service.ts","webpack:///src/app/shared/file-preview-overlay/file-preview-toolbar/file-preview-toolbar.component.html","webpack:///src/app/shared/file-preview-overlay/file-preview-toolbar/file-preview-toolbar.component.ts","webpack:///src/app/shared/file-mime.service.ts","webpack:///src/app/shared/file-preview-overlay/file-preview-overlay.component.ts","webpack:///src/app/shared/file-preview-overlay/file-preview-overlay.component.html","webpack:///src/app/shared/reply-attachment-list/reply-attachment-list.component.html","webpack:///src/app/shared/reply-attachment-list/reply-attachment-list.component.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js","webpack:///src/common/file-preview/file-preview.module.ts","webpack:///src/common/uploads/uploads.module.ts","webpack:///src/app/shared/tag.service.ts","webpack:///src/app/shared/reply-attachment-list/reply-attachment-list.module.ts","webpack:///src/common/text-editor/editors/tinymce-text-editor.service.ts","webpack:///src/common/text-editor/validation/text-editor-image-validator.ts","webpack:///src/common/text-editor/text-editor.component.html","webpack:///src/common/text-editor/text-editor.component.ts","webpack:///src/common/file-preview/base-file-preview.ts","webpack:///node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js","webpack:///src/common/core/ui/custom-scrollbar/supports-native-scrollbar-styling.ts","webpack:///src/common/core/ui/custom-scrollbar/custom-scrollbar.directive.ts","webpack:///src/common/file-preview/default-preview/default-preview.component.ts","webpack:///src/common/file-preview/default-preview/default-preview.component.html","webpack:///src/common/core/ui/custom-scrollbar/custom-scrollbar.module.ts","webpack:///src/common/file-preview/current-preview-file.ts","webpack:///src/common/core/ui/format-pipes/format-pipes.module.ts","webpack:///src/common/file-preview/preview-container/preview-container.component.html","webpack:///src/common/file-preview/preview-container/preview-container.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttle.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttleTime.js","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.html","webpack:///src/app/help-center/manage/new-article/article-settings-modal/article-settings-modal.component.ts","webpack:///src/app/help-center/manage/new-article/article-settings-modal/article-settings-modal.component.html","webpack:///src/common/core/utils/str-contains.ts","webpack:///src/app/help-center/manage/categories-filterer.ts","webpack:///src/app/help-center/manage/categories-manager/categories-manager.component.html","webpack:///src/app/help-center/manage/categories-manager/categories-manager.component.ts","webpack:///src/app/help-center/shared/article-modal/article-modal.component.ts","webpack:///src/app/help-center/shared/article-modal/article-modal.component.html","webpack:///src/app/shared/models/Article.ts","webpack:///src/app/shared/models/Category.ts","webpack:///src/app/help-center/manage/category-modal/category-modal.component.html","webpack:///src/app/help-center/manage/category-modal/category-modal.component.ts","webpack:///src/app/help-center/manage/new-article/new-article.component.html","webpack:///src/app/help-center/manage/new-article/new-article.component.ts","webpack:///src/app/help-center/manage/articles-list/articles-list-filters/articles-list-filters.component.ts","webpack:///src/app/help-center/manage/new-article/new-article-resolve.service.ts","webpack:///src/app/help-center/manage/articles-list/articles-list-filters/articles-list-filters.component.html","webpack:///src/app/help-center/manage/articles-list/articles-list.component.html","webpack:///src/app/help-center/manage/articles-list/articles-list.component.ts","webpack:///src/app/help-center/manage/help-center-manage.component.ts","webpack:///src/app/help-center/manage/help-center-manage.component.html","webpack:///src/app/help-center/manage/categories-list/category-list-item/category-list-item.component.html","webpack:///src/app/help-center/manage/categories-list/category-list-item/category-list-item.component.ts","webpack:///src/app/help-center/manage/categories-list/categories-list.component.html","webpack:///src/app/help-center/manage/categories-list/categories-list.component.ts","webpack:///src/app/help-center/manage/help-center-manage.routing.ts","webpack:///src/app/help-center/manage/help-center-manage.module.ts","webpack:///src/common/uploads/utils/download-file-from-url.ts","webpack:///src/common/file-preview/text-preview/text-preview.component.html","webpack:///src/common/file-preview/text-preview/text-preview.component.ts","webpack:///src/common/file-preview/audio-preview/audio-preview.component.html","webpack:///src/common/file-preview/audio-preview/audio-preview.component.ts","webpack:///src/common/file-preview/video-preview/video-preview.component.html","webpack:///src/common/file-preview/video-preview/video-preview.component.ts","webpack:///src/common/file-preview/image-preview/image-preview.component.ts","webpack:///src/common/file-preview/pdf-preview/pdf-preview.component.ts","webpack:///src/common/file-preview/image-preview/image-preview.component.html","webpack:///src/common/file-preview/pdf-preview/pdf-preview.component.html","webpack:///src/common/file-preview/google-docs-viewer/google-docs-viewer.component.html","webpack:///src/common/file-preview/google-docs-viewer/google-docs-viewer.component.ts","webpack:///src/common/file-preview/available-previews.ts","webpack:///src/app/shared/tags-manager/tags-manager.component.ts","webpack:///src/app/shared/tags-manager/tags-manager.component.html","webpack:///src/app/shared/tags-manager/tags-manager.module.ts"],"names":["ConfirmModalComponent","dialogRef","data","i18n","settings","this","close","title","t","body","bodyBold","ok","cancel","confirm","PREVIEW_URL_TRANSFORMER","factory","entry","url","providedIn","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","_MatSlideToggleMixinBase","_elementRef","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","super","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","monitor","subscribe","focusOrigin","Promise","resolve","then","stopMonitoring","event","stopPropagation","emit","_inputElement","nativeElement","_emitChangeEvent","value","fn","isDisabled","disabled","markForCheck","options","focusVia","detectChanges","c","ɵfac","ɵcmp","type","selectors","viewQuery","rf","ctx","_t","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","$event","focus","inputs","disableRipple","color","required","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","_onChangeEvent","_onInputClick","_onLabelTextChange","_r208","_r212","inputId","textContent","trim","toString","directives","styles","encapsulation","changeDetection","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","MatSlideToggleModule","imports","dispatch","state","subscriber","counter","period","next","schedule","extendStyles","dest","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","split","map","part","passiveEventListenerOptions","passive","activeEventListenerOptions","_config","_document","_viewportRuler","_dragDropRegistry","_passiveTransform","x","y","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","length","targetHandle","find","handle","target","contains","has","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","_hasStartedDragging","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","setAttribute","observers","run","pointerPosition","distance","_getDragDistance","delta","_pointerDirectionDelta","_getPointerPositionOnPage","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","isDragging","_startDragSequence","_pointerUp","withRootElement","registerDragItem","_placeholder","handles","forEach","_toggleNativeDragInteractions","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","boundaryElement","unsubscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","transform","add","delete","direction","container","position","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","parent","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","appendChild","replaceChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","scroll","pipe","startWith","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","startDragging","currentIndex","getItemIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","getRootNode","elementRect","deepCloneNode","left","top","pointerEvents","margin","zIndex","classList","Array","isArray","className","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","clamp","right","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","newValue","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","parentNode","removeChild","rootNode","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","sortingDisabled","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_viewportScrollPosition","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_handleScroll","_updateAfterScroll","scrollTop","scrollLeft","_startScrollInterval","scheduler","a","isNumeric","Observable","animationFrame","takeUntil","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","registerDropContainer","_removeListeners","removeDropContainer","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","pointerX","pointerY","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","getPlaceholderElement","newPositionReference","splice","getRootElement","push","_cacheItemPositions","_reset","items","_withDropContainer","connectedTo","slice","orientation","findIndex","reverse","currentItem","size","pointerDelta","_isPointerNearDropContainer","siblings","isHorizontal","siblingAtNewPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","adjustClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","_clientRect","getViewportSize","window","getMutableClientRect","elementToMeasure","sort","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","floor","_cacheOwnPosition","scrollPosition","newTop","newLeft","extraClientRect","topDifference","leftDifference","_sortFromLastPointerPosition","isInsideClientRect","_canReceive","elementFromPoint","_getShadowRoot","activeSiblings","isReceiving","ShadowRoot","predicate","amount","scrollBy","DragDropRegistry","DragDrop","CdkDragPreview","CdkDragPlaceholder","CdkDragHandle","CdkDrag","activeCapturingEventOptions","capture","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","startsWith","upEvent","set","e","config","_clearGlobalListeners","instance","ɵprov","token","DEFAULT_CONFIG","CDK_DRAG_PARENT","parentDrag","_stateChanges","_parentDrag","ɵdir","templateRef","CDK_DROP_LIST","CDK_DRAG_CONFIG","dropContainer","_viewContainerRef","dragDrop","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_syncInputs","_handleEvents","reset","getFreeDragPosition","onStable","take","_updateRootElement","changes","tap","childHandleElements","filter","withHandles","switchMap","merge","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","dispose","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","boundary","ref","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","contentQueries","dirIndex","selector","currentElement","matches","msMatchesSelector","parentElement","DragDropModule","CdkDropList","CdkDropListGroup","_items","_uniqueIdCounter","_group","_dropListRef","createDropList","_setupInputSyncSubscription","_dropLists","withItems","reduce","filteredItems","list","withOrientation","useValue","providers","FormattedFileSizePipe","precision","bytes","isNaN","String","isFinite","PreviewFilesService","availablePreviews","injector","files","portal","meta","previewUriTransformer","download","haveNext","updateMeta","updatePortal","havePrevious","newPointer","oldPointer","pointer","total","current","getCurrent","createInjector","activeFile","injectionTokens","WeakMap","transformer","closed","previewFiles","FilePreviewToolbarComponent","FileMime","FilePreviewOverlayComponent","showLogo","disableDownload","showCloseButton","el","overlayRef","entries","ticketEntry","setPreviewUriTransformer","urlTransformer","bind","bindToDownload","previewContainer","closest","downloadSub","getAllEntries","downloadFile","hashes","hash","join","getBaseUrl","closeOverlay","iconsMap","text","audio","video","document","image","mime","getFileType","ReplyAttachmentListComponent","overlay","uploadQueue","cancelButtonVisible","detached","attachments","ent","attachment","open","origin","_MatChipMixinBase","MatChipAvatar","MatChipTrailingIcon","MatChip","platform","globalRippleOptions","animationMode","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","hasAttribute","tagName","chip","_removeTriggerEvents","_dispatchSelectionChange","_markForCheck","isUserInput","selected","removable","keyCode","remove","selectable","toggleSelected","coercedValue","_value","MatChipRemove","avatar","trailingIcon","removeIcon","_handleClick","_handleKeydown","_blur","ariaSelected","_parentChip","parentChip","MAT_CHIPS_DEFAULT_OPTIONS","_MatChipListMixinBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatChipListChange","MatChipList","controlType","_lastDestroyedChipIndex","_uid","_tabIndex","_userTabIndex","_multiple","_compareWith","o1","o2","ariaOrientation","valueChange","valueAccessor","_keyManager","chips","withWrap","withVerticalOrientation","withHorizontalOrientation","tabOut","_allowFocusEscape","_syncChipsState","_resetChips","_initializeSelection","_updateTabIndex","_updateFocusForDestroyedChips","stateChanges","_selectionModel","multiple","undefined","updateErrorState","_dropSubscriptions","inputElement","_chipInput","ids","_ariaDescribedby","_setSelectionByValue","_originatesFromChip","focused","setFirstItemActive","_focusInput","_isInputEmpty","setLastItemActive","onKeydown","newChipIndex","setActiveItem","_clearSelection","deselect","currentValue","_selectValue","_sortValues","correspondingChip","selectViaInteraction","select","skip","fallbackValue","valueToEmit","_hasFocusedChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","some","empty","writeValue","_keydown","role","errorState","compareWith","errorStateMatcher","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_isSeparatorKey","input","separators","registerInput","_focus","_onInput","invalid","chipList","ɵ0","MatChipsModule","FilePreviewModule","useClass","UploadsModule","TagService","http","baseUri","params","getWithCache","post","put","query","notType","perPage","get","ReplyAttachmentListModule","TinymceTextEditor","TextEditorImageValidator","zone","lazyLoader","breakpoints","makeBootstrapPromise","editorIsReady","tinymceInstance","setContent","undoManager","waitForEditor","hasUndo","hasRedo","queryCommandState","execCommand","getContent","contents","transact","selection","setCursorLocation","nodeChanged","collapse","insertContents","bootstrapPromise","loadTinymce","initTinymce","loadAsset","textAreaEl","plugins","branding","browser_spellcheck","max_height","maxHeight","min_height","minHeight","autoresize_on_init","paste_as_text","elementpath","statusbar","menubar","convert_urls","forced_root_block","element_format","body_class","content_style","content_css","default_link_target","link_assume_external_targets","target_list","link_title","image_dimensions","image_description","setup","editor","on","onChange","shortcuts","onCtrlEnter","init_instance_callback","bootstrapPromiseResolve","isMobile$","toolbar","concat","extended_valid_elements","getAssetUrl","editorEl","offsetHeight","tinymce","init","DEFAULT_MAX_SIZE_MB","validations","maxSize","convertToBytes","types","TextEditorComponent","currentUser","renderer","overlayPanel","imageValidator","sourceAreaControl","activeEditor","showAdvancedControls","basic","onFileUpload","bootTextEditor","destroyEditor","command","BeColorPickerModule","components","panel","valueChanged","debounceTime","contentAreaContainer","setStyle","sourceTextArea","setValue","getContents","source_view","fileList","uri","Image","validator","httpParams","diskPrefix","inlineUploadPrefix","response","insertImage","fileEntry","setContents","attrs","href","setConfig","visualTextArea","BaseFilePreview","file","sanitizer","filePreviewWrapper","bypassSecurityTrustResourceUrl","getSrc","responseType","obj","val","div","elMatches","Element","prototype","webkitMatchesSelector","mozMatchesSelector","call","queryChildren","children","child","cls","scrollingClassTimeout","addScrollingClass","removeScrollingClass","isAlive","scrollingThreshold","EventElement","handlers","prototypeAccessors","isEmpty","configurable","eventName","unbind","this$1","unbindAll","Object","keys","every","defineProperties","EventManager","eventElements","createEvent","CustomEvent","evt","initCustomEvent","processScrollDiff","axis","diff","useScrollingClass","forceFireReachEvent","fields","contentHeight","containerHeight","up","down","reach","dispatchEvent","toInt","eventElement","ee","once","onceHandler","env","isWebKit","documentElement","supportsTouch","navigator","maxTouchPoints","DocumentTouch","supportsIePointer","msMaxTouchPoints","isChrome","test","userAgent","updateGeometry","roundedScrollTop","rect","containerWidth","ceil","contentWidth","scrollbarXRail","scrollbarYRail","suppressScrollX","scrollXMarginOffset","scrollbarXActive","railXWidth","railXMarginWidth","railXRatio","scrollbarXWidth","getThumbSize","scrollbarXLeft","negativeScrollAdjustment","suppressScrollY","scrollYMarginOffset","scrollbarYActive","railYHeight","railYMarginHeight","railYRatio","scrollbarYHeight","scrollbarYTop","xRailOffset","isRtl","isScrollbarXUsingBottom","scrollbarXBottom","scrollbarXTop","yRailOffset","isScrollbarYUsingRight","scrollbarYRight","scrollbarYOuterWidth","scrollbarYLeft","scrollbarX","railBorderXWidth","scrollbarY","railBorderYWidth","thumbSize","minScrollbarLength","maxScrollbarLength","bindMouseScrollHandler","startingScrollTop","startingMousePageY","mouseMoveHandler","mouseUpHandler","ownerDocument","bindMoves","touchMode","positionTop","pageYOffset","positionLeft","pageXOffset","keyboard","isDefaultPrevented","defaultPrevented","activeElement","contentDocument","shadowRoot","deltaX","deltaY","which","metaKey","altKey","shiftKey","wheelPropagation","wheel","mousewheelHandler","wheelDeltaX","wheelDeltaY","deltaMode","wheelDelta","querySelector","cursor","overflowY","match","maxScrollTop","overflowX","maxScrollLeft","shouldPrevent","useBothWheelAxes","wheelSpeed","isTop","isBottom","isLeft","isRight","offsetWidth","ctrlKey","onwheel","onmousewheel","startOffset","startTime","speed","easingLoop","touchStart","touchMove","touchEnd","PointerEvent","MSPointerEvent","applyTouchMove","differenceX","differenceY","getTouch","shouldHandle","pointerType","buttons","MSPOINTER_TYPE_MOUSE","getTime","clearInterval","currentOffset","currentTime","timeGap","magnitudeX","magnitudeY","scrollY","swipeEasing","setInterval","isInitialized","PerfectScrollbar","userSettings","result","originalScrollLeft","blur","isNegativeScroll","railXStyle","borderLeftWidth","borderRightWidth","marginLeft","marginRight","railYStyle","paddingLeft","paddingRight","borderTopWidth","borderBottomWidth","marginTop","marginBottom","handlerName","lastScrollTop","lastScrollLeft","onScroll","update","removePsClasses","SUPPORTS_NATIVE_SCROLLBAR_STYLING","appVersion","overflow","innerHTML","CustomScrollbarDirective","ngZone","mutationObserverFactory","supportsNativeStyling","subscriptions","minLength","suppressX","native","debouncer","addClass","shouldUseNative","scrollbar","bindToContentChange","sub","disconnect","create","mutations","observe","childList","subtree","DefaultPreviewComponent","message","CustomScrollbarModule","CURRENT_PREVIEW_FILE","FormatPipesModule","PreviewContainerComponent","comp","defaultThrottleConfig","leading","trailing","ThrottleTimeOperator","destination","_hasTrailingValue","_trailingValue","throttled","dispatchNext","Subscriber","arg","clearThrottle","UploadProgressBarComponent","cd","hidden","totalProgress","lift","progress","count$","pending","ArticleSettingsModalComponent","model","hydrate","slug","article","description","strContains","haystack","needle","categories","filtered","category","assign","CategoriesManagerComponent","ArticleModalComponent","api","storage","searchQuery","selectedCategories","allCategories","bindSearchQuery","initialCategories","refresh","getCategories","setCategories","categoryIsSelected","parentId","deselectChildren","childIsSelected","valueChanges","distinctUntilChanged","deselectAll","Article","visibility","Category","CategoryModalComponent","toast","parent_id","updating","errors","createOrUpdateCategory","getPayload","errorResponse","messages","fetchCategories","uploadedFiles","openInsertImageDialog","NewArticleComponent","ArticlesListFiltersComponent","NewArticleResolve","modal","helpCenter","route","router","articleModel","draft","resolves","method","navigateByUrl","panelClass","show","afterClosed","textEditor","categoriesManager","getSelectedCategories","tags","tagsManager","getSelectedTags","uploads","setSelectedCategories","setSelectedTags","tag","toggle","openArticleSettingsModal","saveOrUpdateArticle","uploadFiles","openNewCategoryModal","openPreviewModal","forkJoin","getArticle","toPromise","navigate","filters","getExactSelectedCategories","applyFilter","ArticlesListComponent","HelpCenterManageComponent","paginator","selectedLayout","reloadArticles","articleId","confirmed","deleteArticles","paginate","pagination","getQueryParams","scrollContainer","page","pageIndex","pageSize","articlesListFilters","getFilters","merged","orderBy","articlesOrder","selectedValue","setLayout","CategoryListItemComponent","deleteCategory","detachCategory","navigateToArticlesList","openUpdateCategoryModal","maybeDeleteCategory","CategoriesListComponent","filteredCategories","categoryChildrenVisible","updateCategories","filterCategories","reorderCategories","toggleCategoryChildren","showNewCategoryModal","routing","forChild","path","component","canActivate","redirectTo","permissions","HcManageModule","downloadFileFromUrl","link","click","TextPreviewComponent","content$","BehaviorSubject","fileTooLarge$","file_size","loadFileContents","content","AudioPreviewComponent","invalidMedia","canPlayVideo","player","src","play","canPlayType","playerEl","VideoPreviewComponent","ImagePreviewComponent","PdfPreviewComponent","GoogleDocsViewerComponent","loading$","showDefaultPreview$","showDefaultPreview","iframe","onload","timeoutRef","stopLoading","getIframeSrc","catch","location","reject","previewUrl","preview_token","getGoogleDocsUrl","encodeURIComponent","DefaultPreviews","AVAILABLE_PREVIEWS","pdf","spreadsheet","powerPoint","word","TagsManagerComponent","tagService","selectedTags","readonly","formControl","allTags$","suggestedTags$","getTags","q","suggestions","includes","addTags","TagsManagerModule"],"mappings":"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","file":"x","sourcesContent":["import {ChangeDetectionStrategy, Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {Translations} from '../../translations/translations.service';\r\nimport {Settings} from '../../config/settings.service';\r\n\r\nexport interface ConfirmModalData {\r\n    title: string;\r\n    body: string;\r\n    bodyBold?: string;\r\n    ok?: string;\r\n    cancel?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'confirm-modal',\r\n    templateUrl: './confirm-modal.component.html',\r\n    styleUrls: ['./confirm-modal.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ConfirmModalComponent implements OnInit {\r\n    constructor(\r\n        private dialogRef: MatDialogRef<ConfirmModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: ConfirmModalData,\r\n        private i18n: Translations,\r\n        public settings: Settings,\r\n    ) {}\r\n\r\n    public close() {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.data.title = this.i18n.t(this.data.title);\r\n        this.data.body = this.i18n.t(this.data.body);\r\n        if (this.data.bodyBold) this.data.bodyBold = this.i18n.t(this.data.bodyBold);\r\n        this.data.ok = this.data.ok ? this.i18n.t(this.data.ok) : this.i18n.t('Confirm');\r\n        this.data.cancel = this.data.cancel ? this.i18n.t(this.data.cancel) : this.i18n.t('Cancel');\r\n    }\r\n\r\n    public confirm() {\r\n        this.dialogRef.close(true);\r\n    }\r\n}","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title>{{data.title}}</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<div class=\"mat-dialog-contents\" mat-dialog-content>\r\n    <p>{{data.body}}</p>\r\n    <p class=\"bold\" *ngIf=\"data.bodyBold\">{{data.bodyBold}}</p>\r\n</div>\r\n\r\n<div class=\"buttons right mat-dialog-actions\" mat-dialog-actions>\r\n    <button (click)=\"close()\" type=\"button\" mat-button class=\"button cancel cancel-button\">{{data.cancel}}</button>\r\n    <button type=\"submit\" mat-raised-button color=\"accent\" class=\"button primary submit-button\" cdkFocusInitial (click)=\"confirm()\">{{data.ok}}</button>\r\n</div>\r\n","import { InjectionToken } from '@angular/core';\r\nimport { FileEntry } from '@common/uploads/types/file-entry';\r\n\r\nexport type PreviewUrlTransformer = (entry: FileEntry) => string;\r\n\r\nexport const PREVIEW_URL_TRANSFORMER = new InjectionToken<PreviewUrlTransformer>('PREVIEW_URL_TRANSFORMER', {\r\n    factory: () => {\r\n        return entry => entry.url;\r\n    },\r\n    providedIn: 'root',\r\n});\r\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-slide-toggle` options that can be overridden.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nfunction MatSlideToggleDefaultOptions() { }\nif (false) {\n    /**\n     * Whether toggle action triggers value changes in slide toggle.\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableToggleValue;\n    /**\n     * Whether drag action triggers value changes in slide toggle.\n     * @deprecated No longer being used.\n     * \\@breaking-change 10.0.0\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableDragValue;\n}\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => ({ disableToggleValue: false }))\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggle)),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\nif (false) {\n    /**\n     * The source MatSlideToggle of the event.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.source;\n    /**\n     * The new `checked` value of the MatSlideToggle.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.checked;\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatSlideToggleBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 10.0.0\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._onTouched()));\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlideToggle_focus_HostBindingHandler($event) { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener($event) { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r208 = ɵngcc0.ɵɵreference(1);\n        const _r212 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r212.textContent || !_r212.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r208)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_required;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._uniqueId;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._required;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._checked;\n    /**\n     * Reference to the thumb HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbEl;\n    /**\n     * Reference to the thumb bar HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbBarEl;\n    /**\n     * Name value will be applied to the input element if present.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.name;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.id;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.labelPosition;\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabel;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabelledby;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.change;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.toggleChange;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatSlideToggle.prototype.dragChange;\n    /**\n     * Reference to the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._inputElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._changeDetectorRef;\n    /** @type {?} */\n    MatSlideToggle.prototype.defaults;\n    /** @type {?} */\n    MatSlideToggle.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggleRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ],\n        _MatSlideToggleRequiredValidatorModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatSlideToggle,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map","import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _supportsShadowDom } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const pointerPosition = this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialContainer.getItemIndex(this),\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = `${elementRect.width}px`;\n            preview.style.height = `${elementRect.height}px`;\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(event) {\n        /** @type {?} */\n        const point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Cached scroll position on the page when the element was picked up.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollPosition;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNode = viewRef.rootNodes[0];\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n        /** @type {?} */\n        const wrapper = _document.createElement('div');\n        wrapper.appendChild(rootNode);\n        return wrapper;\n    }\n    return (/** @type {?} */ (rootNode));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the container's scroll position.\n         */\n        this._scrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the scroll position of the viewport.\n         */\n        this._viewportScrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n         */\n        this._handleScroll = (/**\n         * @return {?}\n         */\n        () => {\n            if (!this.isDragging()) {\n                return;\n            }\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\n        });\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._removeListeners();\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => element.addEventListener('scroll', this._handleScroll)));\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n        if (newIndex === -1) {\n            // We use the coordinates of where the item entered the drop\n            // zone to figure out at which index it should be inserted.\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling the container.\n        if (this._isPointerNearDropContainer(pointerX, pointerY)) {\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            [verticalScrollDirection, horizontalScrollDirection] =\n                getElementScrollDirections(element, this._clientRect, pointerX, pointerY);\n            if (verticalScrollDirection || horizontalScrollDirection) {\n                scrollNode = element;\n            }\n        }\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    _cacheOwnPosition() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._clientRect = getMutableClientRect(element);\n        this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._removeListeners();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    _isPointerNearDropContainer(pointerX, pointerY) {\n        const { top, right, bottom, left, width, height } = this._clientRect;\n        /** @type {?} */\n        const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheOwnPosition();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrollPosition Object that is keeping track of the scroll position.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @param {?=} extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n     *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n     *  the `ClientRect` of the list.\n     * @return {?}\n     */\n    _updateAfterScroll(scrollPosition, newTop, newLeft, extraClientRect) {\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        if (extraClientRect) {\n            adjustClientRect(extraClientRect, topDifference, leftDifference);\n        }\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Removes the event listeners associated with this drop list.\n     * @private\n     * @return {?}\n     */\n    _removeListeners() {\n        coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const newPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left, this._clientRect);\n            }\n            else if (this.isReceiving()) {\n                this._cacheOwnPosition();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            this._cachedShadowRoot = getShadowRoot(coerceElement(this.element)) || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Keeps track of the container's scroll position.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollPosition;\n    /**\n     * Keeps track of the scroll position of the viewport.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollPosition;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._handleScroll;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * Gets the shadow root of an element, if any.\n * @param {?} element\n * @return {?}\n */\nfunction getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        /** @type {?} */\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        if (rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, config);\n        this._dragRef.data = this;\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], disabled: [\"cdkDragDisabled\", \"disabled\"], data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        this._disabled = false;\n        /**\n         * Whether sorting within this drop list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        (items) => {\n            this._dropListRef.withItems(items.reduce((/**\n             * @param {?} filteredItems\n             * @param {?} drag\n             * @return {?}\n             */\n            (filteredItems, drag) => {\n                if (drag.dropContainer === this) {\n                    filteredItems.push(drag._dragRef);\n                }\n                return filteredItems;\n            }), (/** @type {?} */ ([]))));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], contentQueries: function CdkDropList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDrag, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._draggables = _t);\n    } }, hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], data: [\"cdkDropListData\", \"data\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\nCdkDropList.propDecorators = {\n    _draggables: [{ type: ContentChildren, args: [CdkDrag, { descendants: true },] }],\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], id: [{\n            type: Input\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], _draggables: [{\n            type: ContentChildren,\n            args: [CdkDrag, { descendants: true }]\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }] }); })();\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     */\n    CdkDropList.prototype._draggables;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { prettyBytes } from '../core/utils/pretty-bytes';\r\n\r\n@Pipe({\r\n    name: 'formattedFileSize',\r\n    pure: true,\r\n})\r\nexport class FormattedFileSizePipe implements PipeTransform {\r\n    transform(bytes: number = 0, precision?: number|string): string {\r\n        if (isNaN(parseFloat(String(bytes))) || ! isFinite(bytes)) return '-';\r\n        return prettyBytes(bytes, precision);\r\n    }\r\n}\r\n","import {Inject, Injectable, Injector} from '@angular/core';\r\nimport {FileEntry} from '../uploads/types/file-entry';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {AVAILABLE_PREVIEWS, DefaultPreviews} from './available-previews';\r\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\r\nimport {CURRENT_PREVIEW_FILE} from './current-preview-file';\r\nimport {DefaultPreviewComponent} from './default-preview/default-preview.component';\r\nimport {filter} from 'rxjs/operators';\r\nimport {PREVIEW_URL_TRANSFORMER, PreviewUrlTransformer} from './preview-url-transformer';\r\n\r\ninterface PreviewFilesMeta {\r\n    entry?: FileEntry;\r\n    pointer?: number;\r\n    total?: number;\r\n    haveNext?: boolean;\r\n    havePrevious?: boolean;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PreviewFilesService {\r\n    private files: FileEntry[] = [];\r\n    private portal = new BehaviorSubject(null);\r\n    private meta: BehaviorSubject<PreviewFilesMeta> = new BehaviorSubject({});\r\n    private previewUriTransformer: PreviewUrlTransformer|null = null;\r\n    public download = new Subject();\r\n\r\n    constructor(\r\n        @Inject(AVAILABLE_PREVIEWS) private availablePreviews: DefaultPreviews,\r\n        private injector: Injector,\r\n    ) {}\r\n\r\n    public pagination(): Observable<PreviewFilesMeta> {\r\n        return this.meta\r\n            .pipe(filter(data => data && !!data.entry));\r\n    }\r\n\r\n    public getCurrent(): FileEntry {\r\n        return this.meta.value.entry;\r\n    }\r\n\r\n    public getAllEntries() {\r\n        return this.files;\r\n    }\r\n\r\n    public getPortal(): Observable<ComponentPortal<any>> {\r\n        return this.portal.asObservable();\r\n    }\r\n\r\n    public showNext() {\r\n        if ( ! this.meta.value.haveNext) return;\r\n        this.updateMeta('next');\r\n        this.updatePortal();\r\n    }\r\n\r\n    public showPrevious() {\r\n        if ( ! this.meta.value.havePrevious) return;\r\n        this.updateMeta('previous');\r\n        this.updatePortal();\r\n    }\r\n\r\n    private updateMeta(dir?: 'next'|'previous'|number) {\r\n        let newPointer = 0;\r\n\r\n        if (typeof dir === 'string') {\r\n            const oldPointer = this.meta.value.pointer;\r\n            newPointer = dir === 'next' ? oldPointer + 1 : oldPointer - 1;\r\n        } else if (typeof dir === 'number') {\r\n            newPointer = dir;\r\n        }\r\n\r\n        this.meta.next({\r\n            pointer: newPointer,\r\n            entry: this.files[newPointer],\r\n            total: this.files.length,\r\n            haveNext: (newPointer + 1) < this.files.length,\r\n            havePrevious: (newPointer - 1) > -1,\r\n        });\r\n    }\r\n\r\n    private updatePortal() {\r\n        const current = this.getCurrent();\r\n        const comp = (current && this.availablePreviews[current.type]) || DefaultPreviewComponent;\r\n        this.portal.next(new ComponentPortal(comp, null, this.createInjector()));\r\n    }\r\n\r\n    public set(files: FileEntry[], activeFile?: number) {\r\n        if ( ! files || files.length === 0) return;\r\n        this.files = files.filter(entry => entry.type !== 'folder');\r\n        this.updateMeta(activeFile);\r\n        this.updatePortal();\r\n    }\r\n\r\n    private createInjector(): PortalInjector {\r\n        const injectionTokens = new WeakMap();\r\n\r\n        // set currently active preview file\r\n        injectionTokens.set(CURRENT_PREVIEW_FILE, this.getCurrent());\r\n\r\n        // override preview backend uri, if specified\r\n        if (this.previewUriTransformer) {\r\n            injectionTokens.set(PREVIEW_URL_TRANSFORMER, this.previewUriTransformer);\r\n        }\r\n\r\n        return new PortalInjector(this.injector, injectionTokens);\r\n    }\r\n\r\n    public destroy() {\r\n        this.meta.next({});\r\n        this.files = null;\r\n        this.portal.next(null);\r\n    }\r\n\r\n    /**\r\n     * Provide transformer function for preview file backend url.\r\n     * (for changing base uri, adding url params etc)\r\n     */\r\n    public setPreviewUriTransformer(transformer: PreviewUrlTransformer) {\r\n        this.previewUriTransformer = transformer;\r\n    }\r\n}\r\n","<button mat-icon-button class=\"back-button\" (click)=\"closed.emit(true)\" *ngIf=\"showCloseButton\">\r\n    <mat-icon svgIcon=\"arrow-back\"></mat-icon>\r\n</button>\r\n<ng-container *ngIf=\"previewFiles.pagination() | async as pagination\">\r\n    <div class=\"entry-name\">\r\n        {{pagination.entry.name}}\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"previewFiles.pagination() | async as pagination\">\r\n        <div class=\"navigation\">\r\n            <button mat-icon-button class=\"previous\" [disabled]=\"!pagination.havePrevious\" (click)=\"previewFiles.showPrevious()\">\r\n                <mat-icon svgIcon=\"keyboard-arrow-left\"></mat-icon>\r\n            </button>\r\n\r\n            <span class=\"meta\">{{pagination.pointer + 1}} of {{pagination.total}}</span>\r\n\r\n            <button mat-icon-button class=\"next\" [disabled]=\"!pagination.haveNext\" (click)=\"previewFiles.showNext()\">\r\n                <mat-icon svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <div class=\"actions\">\r\n        <button mat-icon-button (click)=\"downloadFiles()\" [disabled]=\"disableDownload\">\r\n            <mat-icon svgIcon=\"file-download\"></mat-icon>\r\n        </button>\r\n        <ng-content></ng-content>\r\n    </div>\r\n</ng-container>\r\n<a routerLink=\"/drive\" class=\"logo\" *ngIf=\"showLogo && settings.has('branding.logo_light')\">\r\n    <img *ngIf=\"showLogo && settings.get('branding.logo_light')\" [src]=\"settings.getBaseUrl(true) + settings.get('branding.logo_light')\">\r\n</a>","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\r\nimport {PreviewFilesService} from '@common/file-preview/preview-files.service';\r\nimport {Settings} from '@common/core/config/settings.service';\r\n\r\n@Component({\r\n    selector: 'file-preview-toolbar',\r\n    templateUrl: './file-preview-toolbar.component.html',\r\n    styleUrls: ['./file-preview-toolbar.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FilePreviewToolbarComponent {\r\n    @Input() showLogo = false;\r\n    @Input() disableDownload = false;\r\n    @Input() showCloseButton = false;\r\n\r\n    @Output() closed = new EventEmitter();\r\n\r\n    constructor(\r\n        public previewFiles: PreviewFilesService,\r\n        public settings: Settings,\r\n    ) {}\r\n\r\n    public downloadFiles() {\r\n        this.previewFiles.download.next();\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FileMime {\r\n\r\n    /**\r\n     * Map of mime file type to material design icon name.\r\n     */\r\n    private iconsMap = {\r\n        text: 'insert-drive-file',\r\n        audio: 'volume-up',\r\n        video: 'videocam',\r\n        document: 'assignment',\r\n        image: 'image'\r\n    };\r\n\r\n    /**\r\n     * Return file type based on specified mime.\r\n     */\r\n    public getFileType(mime: string): string {\r\n        return mime.split('/')[0];\r\n    }\r\n\r\n    /**\r\n     * Return icon name based on specified mime.\r\n     */\r\n    public getIconName(mime: string): string {\r\n        const type = this.getFileType(mime);\r\n        return this.iconsMap[type] || this.iconsMap['text'];\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Inject,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\r\nimport {PreviewFilesService} from '@common/file-preview/preview-files.service';\r\nimport {OVERLAY_PANEL_DATA} from '@common/core/ui/overlay-panel/overlay-panel-data';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {downloadFileFromUrl} from '@common/uploads/utils/download-file-from-url';\r\nimport {FileEntry} from '@common/uploads/types/file-entry';\r\n\r\nexport interface FilePreviewOverlayData {\r\n    entries: FileEntry[];\r\n    ticketEntry?: boolean;\r\n}\r\n\r\n@Component({\r\n    selector: 'file-preview-overlay',\r\n    templateUrl: './file-preview-overlay.component.html',\r\n    styleUrls: ['./file-preview-overlay.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FilePreviewOverlayComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    public entries: FileEntry[] = [];\r\n    @ViewChild('previewContainer', { read: ElementRef, static: true }) previewContainer: ElementRef;\r\n    @ViewChild('moreOptionsButton', { read: ElementRef, static: false }) optionsButton: ElementRef;\r\n    private downloadSub: Subscription;\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        private overlayRef: OverlayPanelRef,\r\n        private previewFiles: PreviewFilesService,\r\n        private settings: Settings,\r\n        @Inject(OVERLAY_PANEL_DATA) public data: FilePreviewOverlayData\r\n    ) {\r\n        this.entries = data.entries;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.data.ticketEntry) {\r\n            this.previewFiles.setPreviewUriTransformer(this.urlTransformer.bind(this));\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.bindToDownload();\r\n\r\n        this.previewContainer.nativeElement.addEventListener('click', e => {\r\n            if ( ! e.target.closest('.preview-object')) {\r\n                this.overlayRef.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.downloadSub.unsubscribe();\r\n    }\r\n\r\n    public closeOverlay() {\r\n        this.overlayRef.close();\r\n    }\r\n\r\n    private bindToDownload() {\r\n        this.downloadSub = this.previewFiles.download.subscribe(() => {\r\n            const entries = this.previewFiles.getAllEntries();\r\n            this.downloadFile(entries);\r\n        });\r\n    }\r\n\r\n    private downloadFile(entries: FileEntry[]) {\r\n        const hashes = entries.map(entry => entry.hash).join(',');\r\n        let url = `${this.settings.getBaseUrl()}secure/uploads/download?hashes=${hashes}`;\r\n        if (this.data.ticketEntry) url += '&ticketEntry=true';\r\n        downloadFileFromUrl(url);\r\n    }\r\n\r\n    public urlTransformer(entry: FileEntry) {\r\n        return `${entry.url}?ticketEntry=true`;\r\n    }\r\n}\r\n","<file-preview-toolbar [showCloseButton]=\"true\" (closed)=\"closeOverlay()\"></file-preview-toolbar>\r\n<preview-container [files]=\"entries\" #previewContainer></preview-container>","<div class=\"attachments-list-item\" *ngFor=\"let attachment of attachments\" (click)=\"showPreviewOverlay(attachment)\">\r\n    <mat-icon class=\"attachment-info type-icon\" [svgIcon]=\"mime.getIconName(attachment.mime)\" [ngClass]=\"mime.getIconName(attachment.mime)\"></mat-icon>\r\n    <div class=\"attachment-info name\">{{ attachment.name }}</div>\r\n    <div class=\"attachment-info size\">{{ attachment.file_size | formattedFileSize }}</div>\r\n    <button class=\"remove-attachment\"\r\n            type=\"button\"\r\n            mat-icon-button\r\n            *ngIf=\"cancelButtonVisible\"\r\n            (click)=\"detachEntry(attachment); $event.stopPropagation()\"\r\n    >\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation} from '@angular/core';\r\nimport {FileMime} from '../file-mime.service';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\nimport {FilePreviewOverlayComponent} from '../file-preview-overlay/file-preview-overlay.component';\r\nimport {FileEntry} from '@common/uploads/types/file-entry';\r\n\r\n@Component({\r\n    selector: 'reply-attachment-list',\r\n    templateUrl: './reply-attachment-list.component.html',\r\n    styleUrls: ['./reply-attachment-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ReplyAttachmentListComponent {\r\n    @Input() attachments: FileEntry[];\r\n    @Input() cancelButtonVisible = true;\r\n\r\n    @Output() detached: EventEmitter<FileEntry> = new EventEmitter();\r\n\r\n    constructor(\r\n        public mime: FileMime,\r\n        private overlay: OverlayPanel,\r\n        public uploadQueue: UploadQueueService,\r\n    ) {\r\n    }\r\n\r\n    public detachEntry(entry: FileEntry) {\r\n        const i = this.attachments.findIndex(ent => ent.id === entry.id);\r\n        if (i > -1) {\r\n            this.attachments.splice(i, 1);\r\n            this.detached.emit(entry);\r\n        }\r\n    }\r\n\r\n    public showPreviewOverlay(attachment: FileEntry) {\r\n        this.overlay.open(FilePreviewOverlayComponent, {\r\n                position: 'center',\r\n                origin: 'global',\r\n                data: {entries: [attachment], ticketEntry: true}\r\n            },\r\n        );\r\n    }\r\n}\r\n","import { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, mixinDisableRipple, mixinDisabled, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an event fired on an individual `mat-chip`.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nfunction MatChipEvent() { }\nif (false) {\n    /**\n     * The chip the event was fired on.\n     * @type {?}\n     */\n    MatChipEvent.prototype.chip;\n}\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\nif (false) {\n    /**\n     * Reference to the chip that emitted the event.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.source;\n    /**\n     * Whether the chip that emitted the event is selected.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.selected;\n    /**\n     * Whether the selection change was a result of a user interaction.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.isUserInput;\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?=} animationMode\n     * @param {?=} _changeDetectorRef\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode, _changeDetectorRef) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        /** @type {?} */\n        const basicChipAttrName = 'mat-basic-chip';\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._elementRef.nativeElement));\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._markForCheck();\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._markForCheck();\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            }));\n        }));\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _markForCheck() {\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler($event) { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler($event) { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disabled: \"disabled\", disableRipple: \"disableRipple\", selected: \"selected\", value: \"value\", selectable: \"selectable\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: ChangeDetectorRef }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatChipRemove)),] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip',\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MatChipAvatar]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MatChipTrailingIcon]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatChipRemove))]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selected;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selectable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_removable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disableRipple;\n    /**\n     * Reference to the RippleRenderer for the chip.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRipple;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\n     * is set to the global ripple options since we don't have any configurable options for\n     * the chip ripples.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChip.prototype.rippleConfig;\n    /**\n     * Whether the chip has focus.\n     * @type {?}\n     */\n    MatChip.prototype._hasFocus;\n    /**\n     * Whether animations for the chip are enabled.\n     * @type {?}\n     */\n    MatChip.prototype._animationsDisabled;\n    /**\n     * Whether the chip list is selectable\n     * @type {?}\n     */\n    MatChip.prototype.chipListSelectable;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     * @type {?}\n     */\n    MatChip.prototype._chipListMultiple;\n    /**\n     * The chip avatar\n     * @type {?}\n     */\n    MatChip.prototype.avatar;\n    /**\n     * The chip's trailing icon.\n     * @type {?}\n     */\n    MatChip.prototype.trailingIcon;\n    /**\n     * The chip's remove toggler.\n     * @type {?}\n     */\n    MatChip.prototype.removeIcon;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selected;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selectable;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._removable;\n    /**\n     * Emits when the chip is focused.\n     * @type {?}\n     */\n    MatChip.prototype._onFocus;\n    /**\n     * Emits when the chip is blured.\n     * @type {?}\n     */\n    MatChip.prototype._onBlur;\n    /**\n     * Emitted when the chip is selected or deselected.\n     * @type {?}\n     */\n    MatChip.prototype.selectionChange;\n    /**\n     * Emitted when the chip is destroyed.\n     * @type {?}\n     */\n    MatChip.prototype.destroyed;\n    /**\n     * Emitted when a chip is to be removed.\n     * @type {?}\n     */\n    MatChip.prototype.removed;\n    /** @type {?} */\n    MatChip.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._changeDetectorRef;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     */\n    constructor(_parentChip) {\n        this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        /** @type {?} */\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [\"type\", \"button\", 1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } } });\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)',\n                    // Prevent accidental form submissions.\n                    'type': 'button'\n                }\n            }]\n    }], function () { return [{ type: MatChip }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipRemove.prototype._parentChip;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-default-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default options, for the chips module, that can be overridden.\n * @record\n */\nfunction MatChipsDefaultOptions() { }\nif (false) {\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     * @type {?}\n     */\n    MatChipsDefaultOptions.prototype.separatorKeyCodes;\n}\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipListBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatChipListBase.prototype._parentForm;\n    /** @type {?} */\n    MatChipListBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipListBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * Chip list that emitted the event.\n     * @type {?}\n     */\n    MatChipListChange.prototype.source;\n    /**\n     * Value of the chip list when the event was emitted.\n     * @type {?}\n     */\n    MatChipListChange.prototype.value;\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Function when changed\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._multiple = false;\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.chipListSelectable = this._selectable));\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.selectionChange)));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onFocus)));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onBlur)));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.destroyed)));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            dir => this._keyManager.withHorizontalOrientation(dir)));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._syncChipsState();\n                }));\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                /** @type {?} */\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.deselect()));\n        if (Array.isArray(value)) {\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            currentValue => this._selectValue(currentValue, isUserInput)));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        }));\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        }));\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        }));\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.value));\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                }));\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach((/**\n                 * @param {?} chip\n                 * @return {?}\n                 */\n                chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                }));\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        }));\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        }));\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._blur();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        }));\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._hasFocus));\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                chip.disabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            }));\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler($event) { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler($event) { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_required;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_selectable;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.controlType;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._lastDestroyedChipIndex;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._destroyed;\n    /**\n     * Subscription to focus changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipFocusSubscription;\n    /**\n     * Subscription to blur changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipBlurSubscription;\n    /**\n     * Subscription to selection changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipSelectionSubscription;\n    /**\n     * Subscription to remove changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipRemoveSubscription;\n    /**\n     * The chip input to add more chips\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._chipInput;\n    /**\n     * Uid of the chip list\n     * @type {?}\n     */\n    MatChipList.prototype._uid;\n    /**\n     * The aria-describedby attribute on the chip list for improved a11y.\n     * @type {?}\n     */\n    MatChipList.prototype._ariaDescribedby;\n    /**\n     * Tab index for the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype._tabIndex;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     * @type {?}\n     */\n    MatChipList.prototype._userTabIndex;\n    /**\n     * The FocusKeyManager which handles focus.\n     * @type {?}\n     */\n    MatChipList.prototype._keyManager;\n    /**\n     * Function when touched\n     * @type {?}\n     */\n    MatChipList.prototype._onTouched;\n    /**\n     * Function when changed\n     * @type {?}\n     */\n    MatChipList.prototype._onChange;\n    /** @type {?} */\n    MatChipList.prototype._selectionModel;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatChipList.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._compareWith;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._disabled;\n    /**\n     * Orientation of the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.ariaOrientation;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._selectable;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     * @type {?}\n     */\n    MatChipList.prototype.change;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.valueChange;\n    /**\n     * The chip components contained within this chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.chips;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._dir;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.ngControl;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an input event on a `matChipInput`.\n * @record\n */\nfunction MatChipInputEvent() { }\nif (false) {\n    /**\n     * The native `<input>` element that the event is being fired for.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.input;\n    /**\n     * The value of the input.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.value;\n}\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler($event) { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler($event) { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler($event) { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_addOnBlur;\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_disabled;\n    /**\n     * Whether the control is focused.\n     * @type {?}\n     */\n    MatChipInput.prototype.focused;\n    /** @type {?} */\n    MatChipInput.prototype._chipList;\n    /** @type {?} */\n    MatChipInput.prototype._addOnBlur;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     * @type {?}\n     */\n    MatChipInput.prototype.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     * @type {?}\n     */\n    MatChipInput.prototype.chipEnd;\n    /**\n     * The input's placeholder text.\n     * @type {?}\n     */\n    MatChipInput.prototype.placeholder;\n    /**\n     * Unique id for the input.\n     * @type {?}\n     */\n    MatChipInput.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._disabled;\n    /**\n     * The native input element to which this directive is attached.\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._defaultOptions;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chips-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); }, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ( /** @type {?} */(ɵ0))\n        }\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon], exports: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ( /** @type {?} */(ɵ0))\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };\n\n//# sourceMappingURL=chips.js.map","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TextPreviewComponent} from './text-preview/text-preview.component';\r\nimport {AVAILABLE_PREVIEWS, DefaultPreviews} from './available-previews';\r\nimport {PreviewContainerComponent} from './preview-container/preview-container.component';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {VideoPreviewComponent} from './video-preview/video-preview.component';\r\nimport {ImagePreviewComponent} from './image-preview/image-preview.component';\r\nimport {PdfPreviewComponent} from './pdf-preview/pdf-preview.component';\r\nimport {DefaultPreviewComponent} from './default-preview/default-preview.component';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {AudioPreviewComponent} from './audio-preview/audio-preview.component';\r\nimport {GoogleDocsViewerComponent} from './google-docs-viewer/google-docs-viewer.component';\r\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {PreviewFilesService} from '@common/file-preview/preview-files.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n\r\n        // material\r\n        PortalModule,\r\n        MatButtonModule,\r\n        LoadingIndicatorModule,\r\n    ],\r\n    exports: [\r\n        PreviewContainerComponent,\r\n    ],\r\n    declarations: [\r\n        PreviewContainerComponent,\r\n        TextPreviewComponent,\r\n        VideoPreviewComponent,\r\n        ImagePreviewComponent,\r\n        PdfPreviewComponent,\r\n        DefaultPreviewComponent,\r\n        AudioPreviewComponent,\r\n        GoogleDocsViewerComponent\r\n    ],\r\n    entryComponents: [\r\n        TextPreviewComponent,\r\n        VideoPreviewComponent,\r\n        ImagePreviewComponent,\r\n        PdfPreviewComponent,\r\n        DefaultPreviewComponent,\r\n        AudioPreviewComponent,\r\n        GoogleDocsViewerComponent,\r\n    ],\r\n    providers: [\r\n        OverlayPanel,\r\n        PreviewFilesService,\r\n        {provide: AVAILABLE_PREVIEWS, useClass: DefaultPreviews},\r\n    ]\r\n})\r\nexport class FilePreviewModule {\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {UploadButtonDirective} from './directives/upload-button.directive';\r\nimport {UploadDropzoneDirective} from './directives/upload-dropzone.directive';\r\nimport {UploadProgressBarComponent} from './upload-progress-bar/upload-progress-bar.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n\r\n        // material\r\n        MatButtonModule,\r\n        MatProgressBarModule,\r\n        MatIconModule,\r\n    ],\r\n    declarations: [\r\n        UploadDropzoneDirective,\r\n        UploadButtonDirective,\r\n        UploadProgressBarComponent,\r\n    ],\r\n    exports: [\r\n        UploadDropzoneDirective,\r\n        UploadButtonDirective,\r\n        UploadProgressBarComponent,\r\n    ],\r\n})\r\nexport class UploadsModule {\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\r\nimport {BackendResponse} from '@common/core/types/backend-response';\r\nimport {Tag} from './models/Tag';\r\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\r\nimport {PaginationParams} from '@common/core/types/pagination/pagination-params';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TagService {\r\n    private baseUri = 'tags';\r\n\r\n    constructor(private http: HttpCacheClient) {}\r\n\r\n    public getTags(params?: PaginationParams): PaginatedBackendResponse<Tag> {\r\n        return this.http.getWithCache(this.baseUri, params);\r\n    }\r\n\r\n    public createNew(data: Partial<Tag>): BackendResponse<{tag: Tag}> {\r\n        return this.http.post(this.baseUri, data);\r\n    }\r\n\r\n    public update(id: number, data: Partial<Tag>): BackendResponse<{tag: Tag}> {\r\n        return this.http.put(this.baseUri + '/' + id, data);\r\n    }\r\n\r\n    public deleteMultiple(ids: number[]) {\r\n        return this.http.delete(this.baseUri + '/delete-multiple', {ids});\r\n    }\r\n\r\n    public search(query: string, params: PaginationParams = {}): PaginatedBackendResponse<Tag> {\r\n        params = {\r\n            ...{query, notType: 'status', perPage: 10},\r\n            ...params\r\n        };\r\n        return this.http.get(this.baseUri, params);\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReplyAttachmentListComponent} from './reply-attachment-list.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {FormatPipesModule} from '@common/core/ui/format-pipes/format-pipes.module';\nimport {FilePreviewOverlayComponent} from '../file-preview-overlay/file-preview-overlay.component';\nimport {FilePreviewToolbarComponent} from '../file-preview-overlay/file-preview-toolbar/file-preview-toolbar.component';\nimport {FilePreviewModule} from '@common/file-preview/file-preview.module';\n\n@NgModule({\n    declarations: [\n        ReplyAttachmentListComponent,\n        FilePreviewOverlayComponent,\n        FilePreviewToolbarComponent,\n    ],\n    imports: [\n        CommonModule,\n        FilePreviewModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        FormatPipesModule,\n    ],\n    exports: [\n        ReplyAttachmentListComponent,\n    ],\n})\nexport class ReplyAttachmentListModule {\n}\n","import {Injectable, NgZone} from '@angular/core';\r\nimport {Settings} from '../../core/config/settings.service';\r\nimport {LazyLoaderService} from '../../core/utils/lazy-loader.service';\r\nimport {BreakpointsService} from '../../core/ui/breakpoints.service';\r\nimport {Editor, EditorManager} from 'tinymce';\r\nimport {Translations} from '../../core/translations/translations.service';\r\n\r\nconst EDITOR_TOOLBAR_HEIGHT = 74;\r\n\r\ndeclare const tinymce: EditorManager;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TinymceTextEditor {\r\n    private bootstrapPromise: Promise<Editor> | boolean;\r\n    private bootstrapPromiseResolve: any;\r\n    private config: { [key: string]: any };\r\n    public tinymceInstance: Editor|any;\r\n\r\n    constructor(\r\n        private settings: Settings,\r\n        private zone: NgZone,\r\n        private lazyLoader: LazyLoaderService,\r\n        private breakpoints: BreakpointsService,\r\n        private i18n: Translations,\r\n    ) {\r\n        this.makeBootstrapPromise();\r\n    }\r\n\r\n    public reset() {\r\n        if (!this.editorIsReady()) return;\r\n        this.tinymceInstance.setContent('');\r\n        this.tinymceInstance.undoManager.clear();\r\n    }\r\n\r\n    public focus() {\r\n        this.waitForEditor().then(() => {\r\n            this.tinymceInstance.focus(false);\r\n        });\r\n    }\r\n\r\n    public hasUndo(): boolean {\r\n        return this.editorIsReady() && this.tinymceInstance.undoManager.hasUndo();\r\n    }\r\n\r\n    public hasRedo(): boolean {\r\n        return this.editorIsReady() && this.tinymceInstance.undoManager.hasRedo();\r\n    }\r\n\r\n    /**\r\n     * Queries the current state for specified tinymce command.\r\n     * For example if the current selection is \"bold\".\r\n     */\r\n    public queryCommandState(name: string): boolean | number {\r\n        return this.editorIsReady() && this.tinymceInstance.queryCommandState(name);\r\n    }\r\n\r\n    public execCommand(name: string, value: string | number = null) {\r\n        this.waitForEditor().then(() => {\r\n            this.zone.run(() => {\r\n                this.tinymceInstance.execCommand(name, false, value);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getContents(params?: Object): string {\r\n        if (!this.editorIsReady()) return '';\r\n        return this.tinymceInstance.getContent(params);\r\n    }\r\n\r\n    public setContents(contents: string) {\r\n        this.waitForEditor().then(() => {\r\n            if (!this.tinymceInstance.undoManager) return;\r\n\r\n            this.tinymceInstance.undoManager.transact(() => {\r\n                this.tinymceInstance.setContent(contents);\r\n            });\r\n\r\n            this.tinymceInstance.selection.setCursorLocation();\r\n            this.tinymceInstance.nodeChanged();\r\n            this.tinymceInstance.execCommand('mceResize');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert specified contents at the end of tinymce.\r\n     */\r\n    public insertContents(contents) {\r\n        this.waitForEditor().then(() => {\r\n            this.tinymceInstance.execCommand('mceInsertContent', false, contents);\r\n            setTimeout(() => this.tinymceInstance.selection.collapse());\r\n        });\r\n    }\r\n\r\n    public insertImage(url: string) {\r\n        this.waitForEditor().then(() => {\r\n            this.insertContents('<img src=\"' + url + '\"/>');\r\n            setTimeout(() => this.execCommand('mceAutoResize'), 500);\r\n        });\r\n    }\r\n\r\n    public waitForEditor(): Promise<Editor> {\r\n        // editor already bootstrapped\r\n        if (this.tinymceInstance) {\r\n            return new Promise(resolve => resolve(this.tinymceInstance));\r\n        }\r\n        // editor is still bootstrapping\r\n        if (this.bootstrapPromise) {\r\n            return this.bootstrapPromise as Promise<Editor>;\r\n        }\r\n    }\r\n\r\n    public setConfig(config: object) {\r\n        this.config = config;\r\n        this.loadTinymce().then(() => {\r\n            this.initTinymce();\r\n        });\r\n    }\r\n\r\n    private editorIsReady(): boolean {\r\n        return !this.bootstrapPromise && !!this.tinymceInstance && !!this.tinymceInstance.undoManager;\r\n    }\r\n\r\n    private loadTinymce(): Promise<any> {\r\n        return this.lazyLoader.loadAsset('js/tinymce/tinymce.min.js', {type: 'js'});\r\n    }\r\n\r\n    private initTinymce() {\r\n        const config: any = {\r\n            target: this.config.textAreaEl.nativeElement,\r\n            plugins: ['link', 'codesample', 'paste', 'autoresize'],\r\n            branding: false,\r\n            browser_spellcheck: true,\r\n            max_height: this.config.maxHeight,\r\n            min_height: this.config.minHeight,\r\n            autoresize_on_init: false,\r\n            paste_as_text: true,\r\n            elementpath: false,\r\n            statusbar: false,\r\n            menubar: false,\r\n            convert_urls: false,\r\n            forced_root_block: false,\r\n            element_format: 'html',\r\n            body_class: 'editor-body',\r\n            content_style: `html {font-size: 62.5%;}\r\n.editor-body {font-size: 1.4rem;font-family: \"Roboto\", \"Helvetica Neue\", sans-serif;color: rgba(0, 0, 0, .87);}\r\nimg {max-width: 100%}\r\ncode[class*=language-], pre[class*=language-] {font-size: inherit;}`,\r\n            content_css: ['https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic'],\r\n            default_link_target: '_blank',\r\n            link_assume_external_targets: true,\r\n            target_list: false,\r\n            link_title: false,\r\n            image_dimensions: false,\r\n            image_description: false,\r\n            setup: editor => {\r\n                this.tinymceInstance = editor;\r\n                editor.on('change', () => this.config.onChange.emit(editor.getContent()));\r\n\r\n                editor.on('click', () => {\r\n                    // need to run angular zone on editor (iframe) click\r\n                    // so custom editor buttons are highlighted properly\r\n                    this.zone.run(() => {\r\n                    });\r\n                });\r\n\r\n                editor.shortcuts.add('ctrl+13', 'desc', () => {\r\n                    this.zone.run(() => {\r\n                        this.config.onChange.emit(editor.getContent());\r\n                        this.config.onCtrlEnter.emit();\r\n                    });\r\n                });\r\n            },\r\n            init_instance_callback: () => {\r\n                this.bootstrapPromise = false;\r\n                this.bootstrapPromiseResolve(this.tinymceInstance);\r\n            }\r\n        };\r\n\r\n        // need to show toolbar on mobile, otherwise tinymce will error out\r\n        if (!this.breakpoints.isMobile$.value) {\r\n            config.toolbar = false;\r\n        }\r\n\r\n        if (this.config['showAdvancedControls']) {\r\n            config.plugins = config.plugins.concat(['media', 'hr', 'visualblocks', 'visualchars', 'wordcount']);\r\n            config.forced_root_block = 'p';\r\n            config.statusbar = true;\r\n            config.autoresize_on_init = true;\r\n            config.extended_valid_elements = 'svg[*],use[*],iframe[src],script[src]';\r\n            config.elementpath = true;\r\n            config.content_css.push(this.settings.getAssetUrl() + 'css/advanced-editor-styles.css');\r\n            config.target_list = [\r\n                {title: this.i18n.t('Current window'), value: ''},\r\n                {title: this.i18n.t('New Window'), value: '_blank'},\r\n            ];\r\n        }\r\n\r\n        if (this.config['minHeight'] === 'auto') {\r\n            const height = this.config.editorEl.nativeElement.parentElement.offsetHeight - EDITOR_TOOLBAR_HEIGHT - 4;\r\n            config.min_height = height;\r\n            config.max_height = height;\r\n        }\r\n\r\n        tinymce.init(config);\r\n    }\r\n\r\n    public destroyEditor() {\r\n        // catch error that sometimes occurs on EDGE when\r\n        // trying to destroy editor that is no longer in the DOM\r\n        try {\r\n            if (this.tinymceInstance) {\r\n                this.tinymceInstance.remove();\r\n            }\r\n\r\n            this.tinymceInstance = null;\r\n            this.makeBootstrapPromise();\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a tinymce bootstrap promise.\r\n     */\r\n    private makeBootstrapPromise() {\r\n        this.bootstrapPromise = new Promise(resolve => this.bootstrapPromiseResolve = resolve);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UploadValidator } from '../../uploads/validation/upload-validator';\r\nimport { FileSizeValidation } from '../../uploads/validation/validations/file-size-validation';\r\nimport { convertToBytes } from '../../core/utils/convertToBytes';\r\nimport { FileTypeValidation } from '../../uploads/validation/validations/file-type-validation';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TextEditorImageValidator extends UploadValidator {\r\n    protected readonly DEFAULT_MAX_SIZE_MB = 3;\r\n\r\n    protected initValidations() {\r\n        const validations = [\r\n            new FileSizeValidation(\r\n                {maxSize: convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')},\r\n                this.i18n\r\n            ),\r\n            new FileTypeValidation({types: ['image']}, this.i18n),\r\n        ];\r\n\r\n        this.validations.push(...validations);\r\n    }\r\n}\r\n","<div class=\"editor-header\">\r\n    <div class=\"toolbar-row\">\r\n        <div class=\"header-actions\" *ngIf=\"inlineUploadPrefix && currentUser.hasPermission('files.create')\">\r\n            <button class=\"no-style editor-button\" type=\"button\" [matTooltip]=\"'Add Attachment' | trans\"\r\n                    (click)=\"openFileUploadDialog()\">\r\n                <mat-icon svgIcon=\"attachment\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\" *ngIf=\"!basic\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('codesample')\"\r\n                    [matTooltip]=\"'Insert Code Sample' | trans\">\r\n                <mat-icon svgIcon=\"code\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('undo')\"\r\n                    [class.disabled]=\"!hasUndo()\" [matTooltip]=\"'Undo' | trans\">\r\n                <mat-icon svgIcon=\"undo\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('redo')\"\r\n                    [class.disabled]=\"!hasRedo()\" [matTooltip]=\"'Redo' | trans\">\r\n                <mat-icon svgIcon=\"redo\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('bold')\"\r\n                    [class.active]=\"queryCommandState('bold')\" [matTooltip]=\"'Bold' | trans\">\r\n                <mat-icon svgIcon=\"format-bold\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('italic')\"\r\n                    [class.active]=\"queryCommandState('italic')\" [matTooltip]=\"'Italic' | trans\">\r\n                <mat-icon svgIcon=\"format-italic\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('underline')\"\r\n                    [class.active]=\"queryCommandState('underline')\" [matTooltip]=\"'Underline' | trans\">\r\n                <mat-icon svgIcon=\"format-underlined\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('insertunorderedlist')\"\r\n                    [class.active]=\"queryCommandState('unorderedlist')\" [matTooltip]=\"'Unordered List' | trans\">\r\n                <mat-icon svgIcon=\"format-list-bulleted\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('insertorderedlist')\"\r\n                    [class.active]=\"queryCommandState('orderedlist')\" [matTooltip]=\"'Ordered List' | trans\">\r\n                <mat-icon svgIcon=\"format-list-numbered\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"header-actions\" *ngIf=\"!basic\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('mceLink')\"\r\n                    [class.active]=\"queryCommandState('link')\" [matTooltip]=\"'Insert Link' | trans\">\r\n                <mat-icon svgIcon=\"link\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button image-modal-button\" (click)=\"openInsertImageModal()\"\r\n                    *ngIf=\"currentUser.hasPermission('files.create')\" [matTooltip]=\"'Insert Image' | trans\">\r\n                <mat-icon svgIcon=\"image\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <ng-content select=\"[customButtons]\"></ng-content>\r\n\r\n        <div class=\"header-actions last\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('removeformat')\"\r\n                    [matTooltip]=\"'Remove Formatting' | trans\">\r\n                <mat-icon svgIcon=\"format-clear\"></mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <ng-content select=\"[header]\"></ng-content>\r\n    </div>\r\n    <div class=\"toolbar-row\" *ngIf=\"showAdvancedControls\">\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" [matMenuTriggerFor]=\"insertMenu\"\r\n                    class=\"no-style editor-button text-button insert-button\">\r\n                <span trans>Insert</span>\r\n                <mat-icon svgIcon=\"arrow-drop-down\" class=\"caret\"></mat-icon>\r\n            </button>\r\n            <mat-menu #insertMenu>\r\n                <div mat-menu-item (click)=\"execCommand('InsertHorizontalRule')\">\r\n                    <mat-icon svgIcon=\"remove\"></mat-icon>\r\n                    <span trans>Horizontal Line</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('mceLink')\">\r\n                    <mat-icon svgIcon=\"link\"></mat-icon>\r\n                    <span trans>Link</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('mceMedia')\">\r\n                    <mat-icon svgIcon=\"videocam\"></mat-icon>\r\n                    <span trans>Media</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"insertInfoContainer('important')\" trans>\r\n                    <mat-icon svgIcon=\"star\"></mat-icon>\r\n                    <span trans>Important</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"insertInfoContainer('warning')\" trans>\r\n                    <mat-icon svgIcon=\"warning\"></mat-icon>\r\n                    <span trans>Warning</span>\r\n                </div>\r\n                <div mat-menu-item (click)=\"insertInfoContainer('note')\" trans>\r\n                    <mat-icon svgIcon=\"note\"></mat-icon>\r\n                    <span trans>Note</span>\r\n                </div>\r\n            </mat-menu>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" [matMenuTriggerFor]=\"formatMenu\" class=\"no-style editor-button text-button format-button\">\r\n                <span trans>Format</span>\r\n                <mat-icon svgIcon=\"arrow-drop-down\" class=\"caret\"></mat-icon>\r\n            </button>\r\n            <mat-menu #formatMenu class=\"format-menu menu-with-alt-text\">\r\n                <div mat-menu-item (click)=\"execCommand('FormatBlock', 'h1')\">\r\n                    <div class=\"text\" trans>Heading 1</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+1</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('FormatBlock', 'h2')\">\r\n                    <div class=\"text\" trans>Heading 2</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+2</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('FormatBlock', 'h3')\">\r\n                    <div class=\"text\" trans>Heading 3</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+3</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('strikethrough')\">\r\n                    <div class=\"text\" trans>Strikethrough</div>\r\n                    <div class=\"alt-text\">Alt+Shift+5</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('superscript')\">\r\n                    <div class=\"text\" trans>Superscript</div>\r\n                    <div class=\"alt-text\">Ctrl+.</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('subscript')\">\r\n                    <div class=\"text\" trans>Subscript</div>\r\n                    <div class=\"alt-text\">Ctrl+,</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('mceBlockQuote')\">\r\n                    <div class=\"text\" trans>Blockquote</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+B</div>\r\n                </div>\r\n                <div mat-menu-item (click)=\"execCommand('FormatBlock', 'p')\">\r\n                    <div class=\"text\" trans>Paragraph</div>\r\n                    <div class=\"alt-text\">Ctrl+Alt+0</div>\r\n                </div>\r\n            </mat-menu>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" [matMenuTriggerFor]=\"colorMenu\" class=\"no-style editor-button text-button color-button\" #colorPickerOrigin>\r\n                <span trans>Color</span>\r\n                <mat-icon svgIcon=\"arrow-drop-down\" class=\"caret\"></mat-icon>\r\n            </button>\r\n            <mat-menu #colorMenu class=\"color-dropdown\">\r\n                <div mat-menu-item class=\"text-color-item\" (click)=\"showColorPicker('ForeColor', colorPickerOrigin)\">\r\n                    <mat-icon svgIcon=\"format-color-text\"></mat-icon>\r\n                    <span trans>Text Color</span>\r\n                </div>\r\n                <div mat-menu-item class=\"bg-color-item\" (click)=\"showColorPicker('HiliteColor', colorPickerOrigin)\">\r\n                    <mat-icon svgIcon=\"format-color-fill\"></mat-icon>\r\n                    <span trans>Background Color</span>\r\n                </div>\r\n            </mat-menu>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('justifyLeft')\"\r\n                    [class.active]=\"queryCommandState('justifyLeft')\" [matTooltip]=\"'Align Left' | trans\">\r\n                <mat-icon svgIcon=\"format-align-left\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('justifyCenter')\"\r\n                    [class.active]=\"queryCommandState('justifyCenter')\" [matTooltip]=\"'Center' | trans\">\r\n                <mat-icon svgIcon=\"format-align-center\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('justifyRight')\"\r\n                    [class.active]=\"queryCommandState('justifyRight')\" [matTooltip]=\"'Align Right' | trans\">\r\n                <mat-icon svgIcon=\"format-align-right\"></mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('Outdent')\" [matTooltip]=\"'Decrease Indent' | trans\">\r\n                <mat-icon svgIcon=\"format-indent-decrease\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button\" (click)=\"execCommand('Indent')\" [matTooltip]=\"'Increase Indent' | trans\">\r\n                <mat-icon svgIcon=\"format-indent-increase\"></mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"header-actions editor-toggle-buttons\">\r\n            <button type=\"button\" class=\"no-style editor-button visual-mode-button\"\r\n                    [class.active]=\"activeEditor === 'visual'\" (click)=\"showVisualEditor()\" trans>Visual\r\n            </button>\r\n            <button type=\"button\" class=\"no-style editor-button source-mode-button\"\r\n                    [class.active]=\"activeEditor === 'source'\" (click)=\"showSourceEditor()\" trans>Source\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<textarea class=\"source-textarea\" #sourceArea rows=\"8\" [style.min-height]=\"minHeight\" style=\"display: none\" [formControl]=\"sourceAreaControl\" (blur)=\"setContents(sourceAreaControl.value)\"></textarea>\r\n<textarea class=\"visual-textarea\" #visualArea rows=\"8\" [style.min-height]=\"minHeight\"></textarea>\r\n\r\n<ng-content select=\"[footer]\"></ng-content>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    Output,\r\n    Renderer2,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {TinymceTextEditor} from './editors/tinymce-text-editor.service';\r\nimport {Settings} from '../core/config/settings.service';\r\nimport {OverlayPanel} from '../core/ui/overlay-panel/overlay-panel.service';\r\nimport {openUploadWindow} from '../uploads/utils/open-upload-window';\r\nimport {UploadQueueService} from '../uploads/upload-queue/upload-queue.service';\r\nimport {TextEditorImageValidator} from './validation/text-editor-image-validator';\r\nimport {UploadInputTypes} from '../uploads/upload-input-config';\r\nimport {CurrentUser} from '../auth/current-user';\r\nimport {BOTTOM_POSITION} from '../core/ui/overlay-panel/positions/bottom-position';\r\nimport {ucFirst} from '../core/utils/uc-first';\r\nimport {FormControl} from '@angular/forms';\r\nimport {debounceTime} from 'rxjs/operators';\r\nimport {UploadUri} from '@common/uploads/types/upload-uri.enum';\r\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\r\nimport {UploadedFile} from '@common/uploads/uploaded-file';\r\n\r\nexport interface LinkAttrs {\r\n    text: string;\r\n    href: string;\r\n    target?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'text-editor',\r\n    templateUrl: './text-editor.component.html',\r\n    styleUrls: ['./text-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [\r\n        UploadQueueService,\r\n    ]\r\n})\r\nexport class TextEditorComponent implements OnDestroy, AfterViewInit {\r\n    @ViewChild('visualArea', { static: true }) visualTextArea: ElementRef;\r\n    @ViewChild('sourceArea', { static: true }) sourceTextArea: ElementRef;\r\n\r\n    public sourceAreaControl = new FormControl();\r\n    public activeEditor = 'visual';\r\n\r\n    @Input() showAdvancedControls = false;\r\n    @Input() basic = false;\r\n    @Input() minHeight: number|string = 183;\r\n    @Input() maxHeight = 530;\r\n    @Input() inlineUploadPrefix: string;\r\n\r\n    @Output() onChange: EventEmitter<string> = new EventEmitter();\r\n    @Output() onCtrlEnter = new EventEmitter();\r\n    @Output() onFileUpload = new EventEmitter<UploadedFile[]>();\r\n\r\n    constructor(\r\n        public editor: TinymceTextEditor,\r\n        public currentUser: CurrentUser,\r\n        private uploadQueue: UploadQueueService,\r\n        private settings: Settings,\r\n        private renderer: Renderer2,\r\n        public el: ElementRef,\r\n        private overlayPanel: OverlayPanel,\r\n        private imageValidator: TextEditorImageValidator,\r\n    ) {}\r\n\r\n    ngAfterViewInit() {\r\n        this.bootTextEditor();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroyEditor();\r\n    }\r\n\r\n    public reset() {\r\n        this.editor.reset();\r\n    }\r\n\r\n    public focus() {\r\n        this.editor.focus();\r\n    }\r\n\r\n    public hasUndo(): boolean {\r\n        return this.editor.hasUndo();\r\n    }\r\n\r\n    public hasRedo(): boolean {\r\n        return this.editor.hasRedo();\r\n    }\r\n\r\n    /**\r\n     * Queries the current state for specified text editor command.\r\n     * For example if the current selection is \"bold\".\r\n     */\r\n    public queryCommandState(name: string): boolean|number {\r\n        return this.editor.queryCommandState(name);\r\n    }\r\n\r\n    public execCommand(name: string, value: string|number = null) {\r\n        this.editor.execCommand(name, value);\r\n    }\r\n\r\n    /**\r\n     * Insert information container of specified type into the editor.\r\n     */\r\n    public insertInfoContainer(type: string) {\r\n        // TODO: refactor into shortcodes maybe if need more of similar buttons in the future\r\n        // TODO: translate once angular translation service is available\r\n        this.insertContents(\r\n            `<div class=\"widget widget-${type}\"><div class=\"title\">${ucFirst(type)}:</div><br></div><br>`\r\n        );\r\n    }\r\n\r\n    public async showColorPicker(command: string, origin: HTMLElement) {\r\n        const { BeColorPickerModule } = await import('@common/core/ui/color-picker/be-color-picker.module');\r\n        this.overlayPanel.open(BeColorPickerModule.components.panel, {origin: new ElementRef(origin), position: BOTTOM_POSITION})\r\n            .valueChanged().pipe(debounceTime(50)).subscribe(color => {\r\n                this.execCommand(command, color);\r\n            });\r\n    }\r\n\r\n    public showVisualEditor() {\r\n        if ( ! this.editor.tinymceInstance.contentAreaContainer || this.activeEditor === 'visual') return;\r\n\r\n        this.activeEditor = 'visual';\r\n\r\n        this.renderer.setStyle(this.editor.tinymceInstance.contentAreaContainer, 'display', 'block');\r\n        this.renderer.setStyle(this.sourceTextArea.nativeElement, 'display', 'none');\r\n\r\n        this.editor.focus();\r\n    }\r\n\r\n    public showSourceEditor() {\r\n        if ( ! this.editor.tinymceInstance.contentAreaContainer || this.activeEditor === 'source') return;\r\n\r\n        this.activeEditor = 'source';\r\n\r\n        this.renderer.setStyle(this.sourceTextArea.nativeElement, 'height', this.editor.tinymceInstance.contentAreaContainer.offsetHeight + 'px');\r\n        this.renderer.setStyle(this.sourceTextArea.nativeElement, 'display', 'block');\r\n        this.renderer.setStyle(this.editor.tinymceInstance.contentAreaContainer, 'display', 'none');\r\n\r\n        this.sourceAreaControl.setValue(this.editor.getContents({source_view: true}));\r\n    }\r\n\r\n    public openFileUploadDialog() {\r\n        openUploadWindow({multiple: true}).then(fileList => {\r\n            this.onFileUpload.emit(fileList);\r\n        });\r\n    }\r\n\r\n    public openInsertImageModal() {\r\n        const params: UploadApiConfig = {\r\n            uri: UploadUri.Image,\r\n            validator: this.imageValidator,\r\n            httpParams: {diskPrefix: this.inlineUploadPrefix}\r\n        };\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(files => {\r\n            this.uploadQueue.start(files, params).subscribe(response => {\r\n                this.insertImage(this.settings.getBaseUrl(true) + response.fileEntry.url);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getContents(): string {\r\n        return this.editor.getContents();\r\n    }\r\n\r\n    public setContents(contents: string) {\r\n        this.editor.setContents(contents);\r\n    }\r\n\r\n    public insertContents(contents) {\r\n        this.editor.insertContents(contents);\r\n    }\r\n\r\n    public insertImage(url: string) {\r\n        this.editor.insertImage(url);\r\n    }\r\n\r\n    public insertLink(attrs: LinkAttrs) {\r\n        const target = attrs.target || 'self';\r\n        this.insertContents(`<a href=\"${attrs.href}\" target=\"${target}\">${attrs.text}</a>`);\r\n    }\r\n\r\n    public destroyEditor() {\r\n        this.editor.destroyEditor();\r\n    }\r\n\r\n    private bootTextEditor() {\r\n        this.editor.setConfig({\r\n            textAreaEl: this.visualTextArea,\r\n            editorEl: this.el,\r\n            minHeight: this.minHeight,\r\n            maxHeight: this.maxHeight,\r\n            onChange: this.onChange,\r\n            onCtrlEnter: this.onCtrlEnter,\r\n            showAdvancedControls: this.showAdvancedControls,\r\n        });\r\n    }\r\n}\r\n","import { EventEmitter, HostBinding, Inject, Directive } from '@angular/core';\r\nimport { CURRENT_PREVIEW_FILE } from './current-preview-file';\r\nimport { FileEntry } from '../uploads/types/file-entry';\r\nimport { PREVIEW_URL_TRANSFORMER, PreviewUrlTransformer } from './preview-url-transformer';\r\nimport { Settings } from '../core/config/settings.service';\r\nimport { Observable } from 'rxjs';\r\nimport { AppHttpClient } from '../core/http/app-http-client.service';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { CurrentUser } from '../auth/current-user';\r\n\r\n@Directive()\nexport abstract class BaseFilePreview {\r\n    @HostBinding('class.file-preview-wrapper') filePreviewWrapper = true;\r\n    public download = new EventEmitter();\r\n\r\n    constructor(\r\n        @Inject(CURRENT_PREVIEW_FILE) protected file: FileEntry,\r\n        @Inject(PREVIEW_URL_TRANSFORMER) protected transformer: PreviewUrlTransformer,\r\n        protected settings: Settings,\r\n        protected http: AppHttpClient,\r\n        protected sanitizer: DomSanitizer,\r\n        protected currentUser: CurrentUser,\r\n    ) {}\r\n\r\n    public getSrc(): string {\r\n        return this.transformer(this.file);\r\n    }\r\n\r\n    public getSafeSrc(): SafeResourceUrl {\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(this.getSrc());\r\n    }\r\n\r\n    public getContents(): Observable<string> {\r\n        return this.http.get(this.getSrc(), null, {responseType: 'text'});\r\n    }\r\n}\r\n","/*!\n * perfect-scrollbar v1.5.0\n * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors\n * Licensed under MIT\n */\n\nfunction get(element) {\n  return getComputedStyle(element);\n}\n\nfunction set(element, obj) {\n  for (var key in obj) {\n    var val = obj[key];\n    if (typeof val === 'number') {\n      val = val + \"px\";\n    }\n    element.style[key] = val;\n  }\n  return element;\n}\n\nfunction div(className) {\n  var div = document.createElement('div');\n  div.className = className;\n  return div;\n}\n\nvar elMatches =\n  typeof Element !== 'undefined' &&\n  (Element.prototype.matches ||\n    Element.prototype.webkitMatchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector);\n\nfunction matches(element, query) {\n  if (!elMatches) {\n    throw new Error('No element matching method supported');\n  }\n\n  return elMatches.call(element, query);\n}\n\nfunction remove(element) {\n  if (element.remove) {\n    element.remove();\n  } else {\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n}\n\nfunction queryChildren(element, selector) {\n  return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }\n  );\n}\n\nvar cls = {\n  main: 'ps',\n  rtl: 'ps__rtl',\n  element: {\n    thumb: function (x) { return (\"ps__thumb-\" + x); },\n    rail: function (x) { return (\"ps__rail-\" + x); },\n    consuming: 'ps__child--consume',\n  },\n  state: {\n    focus: 'ps--focus',\n    clicking: 'ps--clicking',\n    active: function (x) { return (\"ps--active-\" + x); },\n    scrolling: function (x) { return (\"ps--scrolling-\" + x); },\n  },\n};\n\n/*\n * Helper methods\n */\nvar scrollingClassTimeout = { x: null, y: null };\n\nfunction addScrollingClass(i, x) {\n  var classList = i.element.classList;\n  var className = cls.state.scrolling(x);\n\n  if (classList.contains(className)) {\n    clearTimeout(scrollingClassTimeout[x]);\n  } else {\n    classList.add(className);\n  }\n}\n\nfunction removeScrollingClass(i, x) {\n  scrollingClassTimeout[x] = setTimeout(\n    function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },\n    i.settings.scrollingThreshold\n  );\n}\n\nfunction setScrollingClassInstantly(i, x) {\n  addScrollingClass(i, x);\n  removeScrollingClass(i, x);\n}\n\nvar EventElement = function EventElement(element) {\n  this.element = element;\n  this.handlers = {};\n};\n\nvar prototypeAccessors = { isEmpty: { configurable: true } };\n\nEventElement.prototype.bind = function bind (eventName, handler) {\n  if (typeof this.handlers[eventName] === 'undefined') {\n    this.handlers[eventName] = [];\n  }\n  this.handlers[eventName].push(handler);\n  this.element.addEventListener(eventName, handler, false);\n};\n\nEventElement.prototype.unbind = function unbind (eventName, target) {\n    var this$1 = this;\n\n  this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {\n    if (target && handler !== target) {\n      return true;\n    }\n    this$1.element.removeEventListener(eventName, handler, false);\n    return false;\n  });\n};\n\nEventElement.prototype.unbindAll = function unbindAll () {\n  for (var name in this.handlers) {\n    this.unbind(name);\n  }\n};\n\nprototypeAccessors.isEmpty.get = function () {\n    var this$1 = this;\n\n  return Object.keys(this.handlers).every(\n    function (key) { return this$1.handlers[key].length === 0; }\n  );\n};\n\nObject.defineProperties( EventElement.prototype, prototypeAccessors );\n\nvar EventManager = function EventManager() {\n  this.eventElements = [];\n};\n\nEventManager.prototype.eventElement = function eventElement (element) {\n  var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];\n  if (!ee) {\n    ee = new EventElement(element);\n    this.eventElements.push(ee);\n  }\n  return ee;\n};\n\nEventManager.prototype.bind = function bind (element, eventName, handler) {\n  this.eventElement(element).bind(eventName, handler);\n};\n\nEventManager.prototype.unbind = function unbind (element, eventName, handler) {\n  var ee = this.eventElement(element);\n  ee.unbind(eventName, handler);\n\n  if (ee.isEmpty) {\n    // remove\n    this.eventElements.splice(this.eventElements.indexOf(ee), 1);\n  }\n};\n\nEventManager.prototype.unbindAll = function unbindAll () {\n  this.eventElements.forEach(function (e) { return e.unbindAll(); });\n  this.eventElements = [];\n};\n\nEventManager.prototype.once = function once (element, eventName, handler) {\n  var ee = this.eventElement(element);\n  var onceHandler = function (evt) {\n    ee.unbind(eventName, onceHandler);\n    handler(evt);\n  };\n  ee.bind(eventName, onceHandler);\n};\n\nfunction createEvent(name) {\n  if (typeof window.CustomEvent === 'function') {\n    return new CustomEvent(name);\n  } else {\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(name, false, false, undefined);\n    return evt;\n  }\n}\n\nfunction processScrollDiff(\n  i,\n  axis,\n  diff,\n  useScrollingClass,\n  forceFireReachEvent\n) {\n  if ( useScrollingClass === void 0 ) useScrollingClass = true;\n  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;\n\n  var fields;\n  if (axis === 'top') {\n    fields = [\n      'contentHeight',\n      'containerHeight',\n      'scrollTop',\n      'y',\n      'up',\n      'down' ];\n  } else if (axis === 'left') {\n    fields = [\n      'contentWidth',\n      'containerWidth',\n      'scrollLeft',\n      'x',\n      'left',\n      'right' ];\n  } else {\n    throw new Error('A proper axis should be provided');\n  }\n\n  processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);\n}\n\nfunction processScrollDiff$1(\n  i,\n  diff,\n  ref,\n  useScrollingClass,\n  forceFireReachEvent\n) {\n  var contentHeight = ref[0];\n  var containerHeight = ref[1];\n  var scrollTop = ref[2];\n  var y = ref[3];\n  var up = ref[4];\n  var down = ref[5];\n  if ( useScrollingClass === void 0 ) useScrollingClass = true;\n  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;\n\n  var element = i.element;\n\n  // reset reach\n  i.reach[y] = null;\n\n  // 1 for subpixel rounding\n  if (element[scrollTop] < 1) {\n    i.reach[y] = 'start';\n  }\n\n  // 1 for subpixel rounding\n  if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {\n    i.reach[y] = 'end';\n  }\n\n  if (diff) {\n    element.dispatchEvent(createEvent((\"ps-scroll-\" + y)));\n\n    if (diff < 0) {\n      element.dispatchEvent(createEvent((\"ps-scroll-\" + up)));\n    } else if (diff > 0) {\n      element.dispatchEvent(createEvent((\"ps-scroll-\" + down)));\n    }\n\n    if (useScrollingClass) {\n      setScrollingClassInstantly(i, y);\n    }\n  }\n\n  if (i.reach[y] && (diff || forceFireReachEvent)) {\n    element.dispatchEvent(createEvent((\"ps-\" + y + \"-reach-\" + (i.reach[y]))));\n  }\n}\n\nfunction toInt(x) {\n  return parseInt(x, 10) || 0;\n}\n\nfunction isEditable(el) {\n  return (\n    matches(el, 'input,[contenteditable]') ||\n    matches(el, 'select,[contenteditable]') ||\n    matches(el, 'textarea,[contenteditable]') ||\n    matches(el, 'button,[contenteditable]')\n  );\n}\n\nfunction outerWidth(element) {\n  var styles = get(element);\n  return (\n    toInt(styles.width) +\n    toInt(styles.paddingLeft) +\n    toInt(styles.paddingRight) +\n    toInt(styles.borderLeftWidth) +\n    toInt(styles.borderRightWidth)\n  );\n}\n\nvar env = {\n  isWebKit:\n    typeof document !== 'undefined' &&\n    'WebkitAppearance' in document.documentElement.style,\n  supportsTouch:\n    typeof window !== 'undefined' &&\n    ('ontouchstart' in window ||\n      ('maxTouchPoints' in window.navigator &&\n        window.navigator.maxTouchPoints > 0) ||\n      (window.DocumentTouch && document instanceof window.DocumentTouch)),\n  supportsIePointer:\n    typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,\n  isChrome:\n    typeof navigator !== 'undefined' &&\n    /Chrome/i.test(navigator && navigator.userAgent),\n};\n\nfunction updateGeometry(i) {\n  var element = i.element;\n  var roundedScrollTop = Math.floor(element.scrollTop);\n  var rect = element.getBoundingClientRect();\n\n  i.containerWidth = Math.ceil(rect.width);\n  i.containerHeight = Math.ceil(rect.height);\n  i.contentWidth = element.scrollWidth;\n  i.contentHeight = element.scrollHeight;\n\n  if (!element.contains(i.scrollbarXRail)) {\n    // clean up and append\n    queryChildren(element, cls.element.rail('x')).forEach(function (el) { return remove(el); }\n    );\n    element.appendChild(i.scrollbarXRail);\n  }\n  if (!element.contains(i.scrollbarYRail)) {\n    // clean up and append\n    queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }\n    );\n    element.appendChild(i.scrollbarYRail);\n  }\n\n  if (\n    !i.settings.suppressScrollX &&\n    i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth\n  ) {\n    i.scrollbarXActive = true;\n    i.railXWidth = i.containerWidth - i.railXMarginWidth;\n    i.railXRatio = i.containerWidth / i.railXWidth;\n    i.scrollbarXWidth = getThumbSize(\n      i,\n      toInt((i.railXWidth * i.containerWidth) / i.contentWidth)\n    );\n    i.scrollbarXLeft = toInt(\n      ((i.negativeScrollAdjustment + element.scrollLeft) *\n        (i.railXWidth - i.scrollbarXWidth)) /\n        (i.contentWidth - i.containerWidth)\n    );\n  } else {\n    i.scrollbarXActive = false;\n  }\n\n  if (\n    !i.settings.suppressScrollY &&\n    i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight\n  ) {\n    i.scrollbarYActive = true;\n    i.railYHeight = i.containerHeight - i.railYMarginHeight;\n    i.railYRatio = i.containerHeight / i.railYHeight;\n    i.scrollbarYHeight = getThumbSize(\n      i,\n      toInt((i.railYHeight * i.containerHeight) / i.contentHeight)\n    );\n    i.scrollbarYTop = toInt(\n      (roundedScrollTop * (i.railYHeight - i.scrollbarYHeight)) /\n        (i.contentHeight - i.containerHeight)\n    );\n  } else {\n    i.scrollbarYActive = false;\n  }\n\n  if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {\n    i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;\n  }\n  if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {\n    i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;\n  }\n\n  updateCss(element, i);\n\n  if (i.scrollbarXActive) {\n    element.classList.add(cls.state.active('x'));\n  } else {\n    element.classList.remove(cls.state.active('x'));\n    i.scrollbarXWidth = 0;\n    i.scrollbarXLeft = 0;\n    element.scrollLeft = i.isRtl === true ? i.contentWidth : 0;\n  }\n  if (i.scrollbarYActive) {\n    element.classList.add(cls.state.active('y'));\n  } else {\n    element.classList.remove(cls.state.active('y'));\n    i.scrollbarYHeight = 0;\n    i.scrollbarYTop = 0;\n    element.scrollTop = 0;\n  }\n}\n\nfunction getThumbSize(i, thumbSize) {\n  if (i.settings.minScrollbarLength) {\n    thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);\n  }\n  if (i.settings.maxScrollbarLength) {\n    thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);\n  }\n  return thumbSize;\n}\n\nfunction updateCss(element, i) {\n  var xRailOffset = { width: i.railXWidth };\n  var roundedScrollTop = Math.floor(element.scrollTop);\n\n  if (i.isRtl) {\n    xRailOffset.left =\n      i.negativeScrollAdjustment +\n      element.scrollLeft +\n      i.containerWidth -\n      i.contentWidth;\n  } else {\n    xRailOffset.left = element.scrollLeft;\n  }\n  if (i.isScrollbarXUsingBottom) {\n    xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;\n  } else {\n    xRailOffset.top = i.scrollbarXTop + roundedScrollTop;\n  }\n  set(i.scrollbarXRail, xRailOffset);\n\n  var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };\n  if (i.isScrollbarYUsingRight) {\n    if (i.isRtl) {\n      yRailOffset.right =\n        i.contentWidth -\n        (i.negativeScrollAdjustment + element.scrollLeft) -\n        i.scrollbarYRight -\n        i.scrollbarYOuterWidth -\n        9;\n    } else {\n      yRailOffset.right = i.scrollbarYRight - element.scrollLeft;\n    }\n  } else {\n    if (i.isRtl) {\n      yRailOffset.left =\n        i.negativeScrollAdjustment +\n        element.scrollLeft +\n        i.containerWidth * 2 -\n        i.contentWidth -\n        i.scrollbarYLeft -\n        i.scrollbarYOuterWidth;\n    } else {\n      yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;\n    }\n  }\n  set(i.scrollbarYRail, yRailOffset);\n\n  set(i.scrollbarX, {\n    left: i.scrollbarXLeft,\n    width: i.scrollbarXWidth - i.railBorderXWidth,\n  });\n  set(i.scrollbarY, {\n    top: i.scrollbarYTop,\n    height: i.scrollbarYHeight - i.railBorderYWidth,\n  });\n}\n\nfunction clickRail(i) {\n  var element = i.element;\n\n  i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });\n  i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {\n    var positionTop =\n      e.pageY -\n      window.pageYOffset -\n      i.scrollbarYRail.getBoundingClientRect().top;\n    var direction = positionTop > i.scrollbarYTop ? 1 : -1;\n\n    i.element.scrollTop += direction * i.containerHeight;\n    updateGeometry(i);\n\n    e.stopPropagation();\n  });\n\n  i.event.bind(i.scrollbarX, 'mousedown', function (e) { return e.stopPropagation(); });\n  i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {\n    var positionLeft =\n      e.pageX -\n      window.pageXOffset -\n      i.scrollbarXRail.getBoundingClientRect().left;\n    var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;\n\n    i.element.scrollLeft += direction * i.containerWidth;\n    updateGeometry(i);\n\n    e.stopPropagation();\n  });\n}\n\nfunction dragThumb(i) {\n  bindMouseScrollHandler(i, [\n    'containerWidth',\n    'contentWidth',\n    'pageX',\n    'railXWidth',\n    'scrollbarX',\n    'scrollbarXWidth',\n    'scrollLeft',\n    'x',\n    'scrollbarXRail' ]);\n  bindMouseScrollHandler(i, [\n    'containerHeight',\n    'contentHeight',\n    'pageY',\n    'railYHeight',\n    'scrollbarY',\n    'scrollbarYHeight',\n    'scrollTop',\n    'y',\n    'scrollbarYRail' ]);\n}\n\nfunction bindMouseScrollHandler(\n  i,\n  ref\n) {\n  var containerHeight = ref[0];\n  var contentHeight = ref[1];\n  var pageY = ref[2];\n  var railYHeight = ref[3];\n  var scrollbarY = ref[4];\n  var scrollbarYHeight = ref[5];\n  var scrollTop = ref[6];\n  var y = ref[7];\n  var scrollbarYRail = ref[8];\n\n  var element = i.element;\n\n  var startingScrollTop = null;\n  var startingMousePageY = null;\n  var scrollBy = null;\n\n  function mouseMoveHandler(e) {\n    if (e.touches && e.touches[0]) {\n      e[pageY] = e.touches[0].pageY;\n    }\n    element[scrollTop] =\n      startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);\n    addScrollingClass(i, y);\n    updateGeometry(i);\n\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  function mouseUpHandler() {\n    removeScrollingClass(i, y);\n    i[scrollbarYRail].classList.remove(cls.state.clicking);\n    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);\n  }\n\n  function bindMoves(e, touchMode) {\n    startingScrollTop = element[scrollTop];\n    if (touchMode && e.touches) {\n      e[pageY] = e.touches[0].pageY;\n    }\n    startingMousePageY = e[pageY];\n    scrollBy =\n      (i[contentHeight] - i[containerHeight]) /\n      (i[railYHeight] - i[scrollbarYHeight]);\n    if (!touchMode) {\n      i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);\n      i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);\n      e.preventDefault();\n    } else {\n      i.event.bind(i.ownerDocument, 'touchmove', mouseMoveHandler);\n    }\n\n    i[scrollbarYRail].classList.add(cls.state.clicking);\n\n    e.stopPropagation();\n  }\n\n  i.event.bind(i[scrollbarY], 'mousedown', function (e) {\n    bindMoves(e);\n  });\n  i.event.bind(i[scrollbarY], 'touchstart', function (e) {\n    bindMoves(e, true);\n  });\n}\n\nfunction keyboard(i) {\n  var element = i.element;\n\n  var elementHovered = function () { return matches(element, ':hover'); };\n  var scrollbarFocused = function () { return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus'); };\n\n  function shouldPreventDefault(deltaX, deltaY) {\n    var scrollTop = Math.floor(element.scrollTop);\n    if (deltaX === 0) {\n      if (!i.scrollbarYActive) {\n        return false;\n      }\n      if (\n        (scrollTop === 0 && deltaY > 0) ||\n        (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)\n      ) {\n        return !i.settings.wheelPropagation;\n      }\n    }\n\n    var scrollLeft = element.scrollLeft;\n    if (deltaY === 0) {\n      if (!i.scrollbarXActive) {\n        return false;\n      }\n      if (\n        (scrollLeft === 0 && deltaX < 0) ||\n        (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)\n      ) {\n        return !i.settings.wheelPropagation;\n      }\n    }\n    return true;\n  }\n\n  i.event.bind(i.ownerDocument, 'keydown', function (e) {\n    if (\n      (e.isDefaultPrevented && e.isDefaultPrevented()) ||\n      e.defaultPrevented\n    ) {\n      return;\n    }\n\n    if (!elementHovered() && !scrollbarFocused()) {\n      return;\n    }\n\n    var activeElement = document.activeElement\n      ? document.activeElement\n      : i.ownerDocument.activeElement;\n    if (activeElement) {\n      if (activeElement.tagName === 'IFRAME') {\n        activeElement = activeElement.contentDocument.activeElement;\n      } else {\n        // go deeper if element is a webcomponent\n        while (activeElement.shadowRoot) {\n          activeElement = activeElement.shadowRoot.activeElement;\n        }\n      }\n      if (isEditable(activeElement)) {\n        return;\n      }\n    }\n\n    var deltaX = 0;\n    var deltaY = 0;\n\n    switch (e.which) {\n      case 37: // left\n        if (e.metaKey) {\n          deltaX = -i.contentWidth;\n        } else if (e.altKey) {\n          deltaX = -i.containerWidth;\n        } else {\n          deltaX = -30;\n        }\n        break;\n      case 38: // up\n        if (e.metaKey) {\n          deltaY = i.contentHeight;\n        } else if (e.altKey) {\n          deltaY = i.containerHeight;\n        } else {\n          deltaY = 30;\n        }\n        break;\n      case 39: // right\n        if (e.metaKey) {\n          deltaX = i.contentWidth;\n        } else if (e.altKey) {\n          deltaX = i.containerWidth;\n        } else {\n          deltaX = 30;\n        }\n        break;\n      case 40: // down\n        if (e.metaKey) {\n          deltaY = -i.contentHeight;\n        } else if (e.altKey) {\n          deltaY = -i.containerHeight;\n        } else {\n          deltaY = -30;\n        }\n        break;\n      case 32: // space bar\n        if (e.shiftKey) {\n          deltaY = i.containerHeight;\n        } else {\n          deltaY = -i.containerHeight;\n        }\n        break;\n      case 33: // page up\n        deltaY = i.containerHeight;\n        break;\n      case 34: // page down\n        deltaY = -i.containerHeight;\n        break;\n      case 36: // home\n        deltaY = i.contentHeight;\n        break;\n      case 35: // end\n        deltaY = -i.contentHeight;\n        break;\n      default:\n        return;\n    }\n\n    if (i.settings.suppressScrollX && deltaX !== 0) {\n      return;\n    }\n    if (i.settings.suppressScrollY && deltaY !== 0) {\n      return;\n    }\n\n    element.scrollTop -= deltaY;\n    element.scrollLeft += deltaX;\n    updateGeometry(i);\n\n    if (shouldPreventDefault(deltaX, deltaY)) {\n      e.preventDefault();\n    }\n  });\n}\n\nfunction wheel(i) {\n  var element = i.element;\n\n  function shouldPreventDefault(deltaX, deltaY) {\n    var roundedScrollTop = Math.floor(element.scrollTop);\n    var isTop = element.scrollTop === 0;\n    var isBottom =\n      roundedScrollTop + element.offsetHeight === element.scrollHeight;\n    var isLeft = element.scrollLeft === 0;\n    var isRight =\n      element.scrollLeft + element.offsetWidth === element.scrollWidth;\n\n    var hitsBound;\n\n    // pick axis with primary direction\n    if (Math.abs(deltaY) > Math.abs(deltaX)) {\n      hitsBound = isTop || isBottom;\n    } else {\n      hitsBound = isLeft || isRight;\n    }\n\n    return hitsBound ? !i.settings.wheelPropagation : true;\n  }\n\n  function getDeltaFromEvent(e) {\n    var deltaX = e.deltaX;\n    var deltaY = -1 * e.deltaY;\n\n    if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {\n      // OS X Safari\n      deltaX = (-1 * e.wheelDeltaX) / 6;\n      deltaY = e.wheelDeltaY / 6;\n    }\n\n    if (e.deltaMode && e.deltaMode === 1) {\n      // Firefox in deltaMode 1: Line scrolling\n      deltaX *= 10;\n      deltaY *= 10;\n    }\n\n    if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {\n      // IE in some mouse drivers\n      deltaX = 0;\n      deltaY = e.wheelDelta;\n    }\n\n    if (e.shiftKey) {\n      // reverse axis with shift key\n      return [-deltaY, -deltaX];\n    }\n    return [deltaX, deltaY];\n  }\n\n  function shouldBeConsumedByChild(target, deltaX, deltaY) {\n    // FIXME: this is a workaround for <select> issue in FF and IE #571\n    if (!env.isWebKit && element.querySelector('select:focus')) {\n      return true;\n    }\n\n    if (!element.contains(target)) {\n      return false;\n    }\n\n    var cursor = target;\n\n    while (cursor && cursor !== element) {\n      if (cursor.classList.contains(cls.element.consuming)) {\n        return true;\n      }\n\n      var style = get(cursor);\n\n      // if deltaY && vertical scrollable\n      if (deltaY && style.overflowY.match(/(scroll|auto)/)) {\n        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\n        if (maxScrollTop > 0) {\n          if (\n            (cursor.scrollTop > 0 && deltaY < 0) ||\n            (cursor.scrollTop < maxScrollTop && deltaY > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n      // if deltaX && horizontal scrollable\n      if (deltaX && style.overflowX.match(/(scroll|auto)/)) {\n        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\n        if (maxScrollLeft > 0) {\n          if (\n            (cursor.scrollLeft > 0 && deltaX < 0) ||\n            (cursor.scrollLeft < maxScrollLeft && deltaX > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n\n      cursor = cursor.parentNode;\n    }\n\n    return false;\n  }\n\n  function mousewheelHandler(e) {\n    var ref = getDeltaFromEvent(e);\n    var deltaX = ref[0];\n    var deltaY = ref[1];\n\n    if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {\n      return;\n    }\n\n    var shouldPrevent = false;\n    if (!i.settings.useBothWheelAxes) {\n      // deltaX will only be used for horizontal scrolling and deltaY will\n      // only be used for vertical scrolling - this is the default\n      element.scrollTop -= deltaY * i.settings.wheelSpeed;\n      element.scrollLeft += deltaX * i.settings.wheelSpeed;\n    } else if (i.scrollbarYActive && !i.scrollbarXActive) {\n      // only vertical scrollbar is active and useBothWheelAxes option is\n      // active, so let's scroll vertical bar using both mouse wheel axes\n      if (deltaY) {\n        element.scrollTop -= deltaY * i.settings.wheelSpeed;\n      } else {\n        element.scrollTop += deltaX * i.settings.wheelSpeed;\n      }\n      shouldPrevent = true;\n    } else if (i.scrollbarXActive && !i.scrollbarYActive) {\n      // useBothWheelAxes and only horizontal bar is active, so use both\n      // wheel axes for horizontal bar\n      if (deltaX) {\n        element.scrollLeft += deltaX * i.settings.wheelSpeed;\n      } else {\n        element.scrollLeft -= deltaY * i.settings.wheelSpeed;\n      }\n      shouldPrevent = true;\n    }\n\n    updateGeometry(i);\n\n    shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);\n    if (shouldPrevent && !e.ctrlKey) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n\n  if (typeof window.onwheel !== 'undefined') {\n    i.event.bind(element, 'wheel', mousewheelHandler);\n  } else if (typeof window.onmousewheel !== 'undefined') {\n    i.event.bind(element, 'mousewheel', mousewheelHandler);\n  }\n}\n\nfunction touch(i) {\n  if (!env.supportsTouch && !env.supportsIePointer) {\n    return;\n  }\n\n  var element = i.element;\n\n  function shouldPrevent(deltaX, deltaY) {\n    var scrollTop = Math.floor(element.scrollTop);\n    var scrollLeft = element.scrollLeft;\n    var magnitudeX = Math.abs(deltaX);\n    var magnitudeY = Math.abs(deltaY);\n\n    if (magnitudeY > magnitudeX) {\n      // user is perhaps trying to swipe up/down the page\n\n      if (\n        (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||\n        (deltaY > 0 && scrollTop === 0)\n      ) {\n        // set prevent for mobile Chrome refresh\n        return window.scrollY === 0 && deltaY > 0 && env.isChrome;\n      }\n    } else if (magnitudeX > magnitudeY) {\n      // user is perhaps trying to swipe left/right across the page\n\n      if (\n        (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||\n        (deltaX > 0 && scrollLeft === 0)\n      ) {\n        return true;\n      }\n    }\n\n    return true;\n  }\n\n  function applyTouchMove(differenceX, differenceY) {\n    element.scrollTop -= differenceY;\n    element.scrollLeft -= differenceX;\n\n    updateGeometry(i);\n  }\n\n  var startOffset = {};\n  var startTime = 0;\n  var speed = {};\n  var easingLoop = null;\n\n  function getTouch(e) {\n    if (e.targetTouches) {\n      return e.targetTouches[0];\n    } else {\n      // Maybe IE pointer\n      return e;\n    }\n  }\n\n  function shouldHandle(e) {\n    if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {\n      return false;\n    }\n    if (e.targetTouches && e.targetTouches.length === 1) {\n      return true;\n    }\n    if (\n      e.pointerType &&\n      e.pointerType !== 'mouse' &&\n      e.pointerType !== e.MSPOINTER_TYPE_MOUSE\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  function touchStart(e) {\n    if (!shouldHandle(e)) {\n      return;\n    }\n\n    var touch = getTouch(e);\n\n    startOffset.pageX = touch.pageX;\n    startOffset.pageY = touch.pageY;\n\n    startTime = new Date().getTime();\n\n    if (easingLoop !== null) {\n      clearInterval(easingLoop);\n    }\n  }\n\n  function shouldBeConsumedByChild(target, deltaX, deltaY) {\n    if (!element.contains(target)) {\n      return false;\n    }\n\n    var cursor = target;\n\n    while (cursor && cursor !== element) {\n      if (cursor.classList.contains(cls.element.consuming)) {\n        return true;\n      }\n\n      var style = get(cursor);\n\n      // if deltaY && vertical scrollable\n      if (deltaY && style.overflowY.match(/(scroll|auto)/)) {\n        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\n        if (maxScrollTop > 0) {\n          if (\n            (cursor.scrollTop > 0 && deltaY < 0) ||\n            (cursor.scrollTop < maxScrollTop && deltaY > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n      // if deltaX && horizontal scrollable\n      if (deltaX && style.overflowX.match(/(scroll|auto)/)) {\n        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\n        if (maxScrollLeft > 0) {\n          if (\n            (cursor.scrollLeft > 0 && deltaX < 0) ||\n            (cursor.scrollLeft < maxScrollLeft && deltaX > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n\n      cursor = cursor.parentNode;\n    }\n\n    return false;\n  }\n\n  function touchMove(e) {\n    if (shouldHandle(e)) {\n      var touch = getTouch(e);\n\n      var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };\n\n      var differenceX = currentOffset.pageX - startOffset.pageX;\n      var differenceY = currentOffset.pageY - startOffset.pageY;\n\n      if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {\n        return;\n      }\n\n      applyTouchMove(differenceX, differenceY);\n      startOffset = currentOffset;\n\n      var currentTime = new Date().getTime();\n\n      var timeGap = currentTime - startTime;\n      if (timeGap > 0) {\n        speed.x = differenceX / timeGap;\n        speed.y = differenceY / timeGap;\n        startTime = currentTime;\n      }\n\n      if (shouldPrevent(differenceX, differenceY)) {\n        e.preventDefault();\n      }\n    }\n  }\n  function touchEnd() {\n    if (i.settings.swipeEasing) {\n      clearInterval(easingLoop);\n      easingLoop = setInterval(function() {\n        if (i.isInitialized) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        if (!speed.x && !speed.y) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        applyTouchMove(speed.x * 30, speed.y * 30);\n\n        speed.x *= 0.8;\n        speed.y *= 0.8;\n      }, 10);\n    }\n  }\n\n  if (env.supportsTouch) {\n    i.event.bind(element, 'touchstart', touchStart);\n    i.event.bind(element, 'touchmove', touchMove);\n    i.event.bind(element, 'touchend', touchEnd);\n  } else if (env.supportsIePointer) {\n    if (window.PointerEvent) {\n      i.event.bind(element, 'pointerdown', touchStart);\n      i.event.bind(element, 'pointermove', touchMove);\n      i.event.bind(element, 'pointerup', touchEnd);\n    } else if (window.MSPointerEvent) {\n      i.event.bind(element, 'MSPointerDown', touchStart);\n      i.event.bind(element, 'MSPointerMove', touchMove);\n      i.event.bind(element, 'MSPointerUp', touchEnd);\n    }\n  }\n}\n\nvar defaultSettings = function () { return ({\n  handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],\n  maxScrollbarLength: null,\n  minScrollbarLength: null,\n  scrollingThreshold: 1000,\n  scrollXMarginOffset: 0,\n  scrollYMarginOffset: 0,\n  suppressScrollX: false,\n  suppressScrollY: false,\n  swipeEasing: true,\n  useBothWheelAxes: false,\n  wheelPropagation: true,\n  wheelSpeed: 1,\n}); };\n\nvar handlers = {\n  'click-rail': clickRail,\n  'drag-thumb': dragThumb,\n  keyboard: keyboard,\n  wheel: wheel,\n  touch: touch,\n};\n\nvar PerfectScrollbar = function PerfectScrollbar(element, userSettings) {\n  var this$1 = this;\n  if ( userSettings === void 0 ) userSettings = {};\n\n  if (typeof element === 'string') {\n    element = document.querySelector(element);\n  }\n\n  if (!element || !element.nodeName) {\n    throw new Error('no element is specified to initialize PerfectScrollbar');\n  }\n\n  this.element = element;\n\n  element.classList.add(cls.main);\n\n  this.settings = defaultSettings();\n  for (var key in userSettings) {\n    this.settings[key] = userSettings[key];\n  }\n\n  this.containerWidth = null;\n  this.containerHeight = null;\n  this.contentWidth = null;\n  this.contentHeight = null;\n\n  var focus = function () { return element.classList.add(cls.state.focus); };\n  var blur = function () { return element.classList.remove(cls.state.focus); };\n\n  this.isRtl = get(element).direction === 'rtl';\n  if (this.isRtl === true) {\n    element.classList.add(cls.rtl);\n  }\n  this.isNegativeScroll = (function () {\n    var originalScrollLeft = element.scrollLeft;\n    var result = null;\n    element.scrollLeft = -1;\n    result = element.scrollLeft < 0;\n    element.scrollLeft = originalScrollLeft;\n    return result;\n  })();\n  this.negativeScrollAdjustment = this.isNegativeScroll\n    ? element.scrollWidth - element.clientWidth\n    : 0;\n  this.event = new EventManager();\n  this.ownerDocument = element.ownerDocument || document;\n\n  this.scrollbarXRail = div(cls.element.rail('x'));\n  element.appendChild(this.scrollbarXRail);\n  this.scrollbarX = div(cls.element.thumb('x'));\n  this.scrollbarXRail.appendChild(this.scrollbarX);\n  this.scrollbarX.setAttribute('tabindex', 0);\n  this.event.bind(this.scrollbarX, 'focus', focus);\n  this.event.bind(this.scrollbarX, 'blur', blur);\n  this.scrollbarXActive = null;\n  this.scrollbarXWidth = null;\n  this.scrollbarXLeft = null;\n  var railXStyle = get(this.scrollbarXRail);\n  this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);\n  if (isNaN(this.scrollbarXBottom)) {\n    this.isScrollbarXUsingBottom = false;\n    this.scrollbarXTop = toInt(railXStyle.top);\n  } else {\n    this.isScrollbarXUsingBottom = true;\n  }\n  this.railBorderXWidth =\n    toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth);\n  // Set rail to display:block to calculate margins\n  set(this.scrollbarXRail, { display: 'block' });\n  this.railXMarginWidth =\n    toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);\n  set(this.scrollbarXRail, { display: '' });\n  this.railXWidth = null;\n  this.railXRatio = null;\n\n  this.scrollbarYRail = div(cls.element.rail('y'));\n  element.appendChild(this.scrollbarYRail);\n  this.scrollbarY = div(cls.element.thumb('y'));\n  this.scrollbarYRail.appendChild(this.scrollbarY);\n  this.scrollbarY.setAttribute('tabindex', 0);\n  this.event.bind(this.scrollbarY, 'focus', focus);\n  this.event.bind(this.scrollbarY, 'blur', blur);\n  this.scrollbarYActive = null;\n  this.scrollbarYHeight = null;\n  this.scrollbarYTop = null;\n  var railYStyle = get(this.scrollbarYRail);\n  this.scrollbarYRight = parseInt(railYStyle.right, 10);\n  if (isNaN(this.scrollbarYRight)) {\n    this.isScrollbarYUsingRight = false;\n    this.scrollbarYLeft = toInt(railYStyle.left);\n  } else {\n    this.isScrollbarYUsingRight = true;\n  }\n  this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;\n  this.railBorderYWidth =\n    toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);\n  set(this.scrollbarYRail, { display: 'block' });\n  this.railYMarginHeight =\n    toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);\n  set(this.scrollbarYRail, { display: '' });\n  this.railYHeight = null;\n  this.railYRatio = null;\n\n  this.reach = {\n    x:\n      element.scrollLeft <= 0\n        ? 'start'\n        : element.scrollLeft >= this.contentWidth - this.containerWidth\n        ? 'end'\n        : null,\n    y:\n      element.scrollTop <= 0\n        ? 'start'\n        : element.scrollTop >= this.contentHeight - this.containerHeight\n        ? 'end'\n        : null,\n  };\n\n  this.isAlive = true;\n\n  this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });\n\n  this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only\n  this.lastScrollLeft = element.scrollLeft; // for onScroll only\n  this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });\n  updateGeometry(this);\n};\n\nPerfectScrollbar.prototype.update = function update () {\n  if (!this.isAlive) {\n    return;\n  }\n\n  // Recalcuate negative scrollLeft adjustment\n  this.negativeScrollAdjustment = this.isNegativeScroll\n    ? this.element.scrollWidth - this.element.clientWidth\n    : 0;\n\n  // Recalculate rail margins\n  set(this.scrollbarXRail, { display: 'block' });\n  set(this.scrollbarYRail, { display: 'block' });\n  this.railXMarginWidth =\n    toInt(get(this.scrollbarXRail).marginLeft) +\n    toInt(get(this.scrollbarXRail).marginRight);\n  this.railYMarginHeight =\n    toInt(get(this.scrollbarYRail).marginTop) +\n    toInt(get(this.scrollbarYRail).marginBottom);\n\n  // Hide scrollbars not to affect scrollWidth and scrollHeight\n  set(this.scrollbarXRail, { display: 'none' });\n  set(this.scrollbarYRail, { display: 'none' });\n\n  updateGeometry(this);\n\n  processScrollDiff(this, 'top', 0, false, true);\n  processScrollDiff(this, 'left', 0, false, true);\n\n  set(this.scrollbarXRail, { display: '' });\n  set(this.scrollbarYRail, { display: '' });\n};\n\nPerfectScrollbar.prototype.onScroll = function onScroll (e) {\n  if (!this.isAlive) {\n    return;\n  }\n\n  updateGeometry(this);\n  processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);\n  processScrollDiff(\n    this,\n    'left',\n    this.element.scrollLeft - this.lastScrollLeft\n  );\n\n  this.lastScrollTop = Math.floor(this.element.scrollTop);\n  this.lastScrollLeft = this.element.scrollLeft;\n};\n\nPerfectScrollbar.prototype.destroy = function destroy () {\n  if (!this.isAlive) {\n    return;\n  }\n\n  this.event.unbindAll();\n  remove(this.scrollbarX);\n  remove(this.scrollbarY);\n  remove(this.scrollbarXRail);\n  remove(this.scrollbarYRail);\n  this.removePsClasses();\n\n  // unset elements\n  this.element = null;\n  this.scrollbarX = null;\n  this.scrollbarY = null;\n  this.scrollbarXRail = null;\n  this.scrollbarYRail = null;\n\n  this.isAlive = false;\n};\n\nPerfectScrollbar.prototype.removePsClasses = function removePsClasses () {\n  this.element.className = this.element.className\n    .split(' ')\n    .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })\n    .join(' ');\n};\n\nexport default PerfectScrollbar;\n//# sourceMappingURL=perfect-scrollbar.esm.js.map\n","import {InjectionToken} from '@angular/core';\r\n\r\nexport const SUPPORTS_NATIVE_SCROLLBAR_STYLING = new InjectionToken<boolean>('SUPPORTS_NATIVE_SCROLLBAR_STYLING', {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n        // Detect IE, does not support custom scrollbars\r\n        if (navigator.userAgent.indexOf('MSIE') !== -1\r\n            || navigator.appVersion.indexOf('Trident/') > -1) {\r\n            return false;\r\n        }\r\n\r\n        // Tested Element\r\n        const test = document.createElement('div');\r\n        test.className = '__sb-test';\r\n        test.style.overflow = 'scroll';\r\n        test.style.width = '40px';\r\n\r\n        // Is there another way to style pseudo-elements in JS ?\r\n        const style = document.createElement('style');\r\n        style.innerHTML = '.__sb-test::-webkit-scrollbar { width: 0px; }';\r\n\r\n        // Apply\r\n        test.appendChild(style);\r\n        document.body.appendChild(test);\r\n\r\n        // If css scrollbar is supported, than the scrollWidth should not be impacted\r\n        const result = test.scrollWidth == 40;\r\n\r\n        // Cleaning\r\n        document.body.removeChild(test);\r\n\r\n        return result;\r\n    }\r\n});\r\n","import {AfterViewInit, Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Renderer2} from '@angular/core';\r\nimport PerfectScrollbar from 'perfect-scrollbar';\r\nimport {Subscription, Subject} from 'rxjs';\r\nimport {BreakpointsService} from '../breakpoints.service';\r\nimport {MutationObserverFactory} from '@angular/cdk/observers';\r\nimport {Settings} from '../../config/settings.service';\r\nimport {SUPPORTS_NATIVE_SCROLLBAR_STYLING} from './supports-native-scrollbar-styling';\r\n\r\n@Directive({\r\n    selector: '[customScrollbar]'\r\n})\r\nexport class CustomScrollbarDirective implements AfterViewInit, OnDestroy {\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    /**\r\n     * Minimum length for scrollbar drag handle.\r\n     */\r\n    @Input('customScrollbarMinLength') minLength = 100;\r\n\r\n    /**\r\n     * Whether horizontal scrollbar should be always hidden.\r\n     */\r\n    @Input() suppressX = true;\r\n\r\n    /**\r\n     * scrollTop value set via custom setScrollTop() method.\r\n     * Perfect Scrollbar doesn't preserve scrollTop value on DOM\r\n     * element for some reason, so we need to keep it here.\r\n     */\r\n    private scrollTop = 0;\r\n\r\n    /**\r\n     * Whether custom or native scrollbar is used.\r\n     */\r\n    private native = true;\r\n\r\n    private scrollbar: PerfectScrollbar;\r\n\r\n    private observer: MutationObserver;\r\n\r\n    /**\r\n     * Used for debouncing the emitted values to the observeContent event.\r\n     */\r\n    private debouncer = new Subject<MutationRecord[]>();\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        private renderer: Renderer2,\r\n        private breakpoints: BreakpointsService,\r\n        private ngZone: NgZone,\r\n        private mutationObserverFactory: MutationObserverFactory,\r\n        private config: Settings,\r\n        @Inject(SUPPORTS_NATIVE_SCROLLBAR_STYLING) private supportsNativeStyling: boolean,\r\n    ) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (this.suppressX) {\r\n            this.renderer.addClass(this.el.nativeElement, 'scroll-container');\r\n        } else {\r\n            this.renderer.addClass(this.el.nativeElement, 'scroll-container-x');\r\n        }\r\n\r\n        if (this.shouldUseNative()) return;\r\n\r\n        this.scrollbar = new PerfectScrollbar(this.el.nativeElement, {\r\n            minScrollbarLength: this.minLength,\r\n            suppressScrollX: this.suppressX,\r\n            useBothWheelAxes: !this.suppressX,\r\n            wheelSpeed: 2\r\n        });\r\n\r\n        this.native = false;\r\n\r\n        this.bindToContentChange();\r\n    }\r\n\r\n    /**\r\n     * Update custom scrollbar.\r\n     */\r\n    public update() {\r\n        if (this.native) return;\r\n        this.scrollbar.update();\r\n    }\r\n\r\n    /**\r\n     * Scroll container top to given value.\r\n     */\r\n    public setScrollTop(value = 0) {\r\n        this.el.nativeElement.scrollTop = value;\r\n        this.scrollTop = this.el.nativeElement.scrollTop;\r\n        this.update();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(sub => sub.unsubscribe());\r\n        this.subscriptions = [];\r\n\r\n        if ( ! this.native) {\r\n            this.scrollbar.destroy();\r\n        }\r\n\r\n        // disable observer\r\n        this.debouncer.complete();\r\n        this.observer && this.observer.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Check whether native or custom scrollbar should be used.\r\n     */\r\n    private shouldUseNative(): boolean {\r\n        if (this.config.get('vebto.forceCustomScrollbar')) return false;\r\n        if (/Edge/.test(navigator.userAgent)) return false;\r\n        if (this.breakpoints.isMobile$.value) return true;\r\n        return this.supportsNativeStyling;\r\n    }\r\n\r\n    /**\r\n     * Update custom scrollbar when element content changes.\r\n     */\r\n    private bindToContentChange() {\r\n        this.observer = this.ngZone.runOutsideAngular(() => {\r\n            return this.mutationObserverFactory.create((mutations: MutationRecord[]) => {\r\n                this.debouncer.next(mutations);\r\n            });\r\n        });\r\n\r\n        this.observer.observe(this.el.nativeElement, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.debouncer.subscribe((mutations: MutationRecord[]) => this.update());\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\n@Component({\r\n    selector: 'default-preview',\r\n    templateUrl: './default-preview.component.html',\r\n    styleUrls: ['./default-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DefaultPreviewComponent extends BaseFilePreview {\r\n    @Input() message: string;\r\n\r\n    public getMessage() {\r\n        return this.message || 'No file preview available.';\r\n    }\r\n}\r\n","<div class=\"panel preview-object\">\r\n    <div class=\"message\" trans>{{getMessage()}}</div>\r\n    <button mat-raised-button color=\"accent\" (click)=\"download.emit()\" trans>Download</button>\r\n</div>","import {NgModule} from '@angular/core';\r\nimport {CustomScrollbarDirective} from './custom-scrollbar.directive';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CustomScrollbarDirective\r\n    ],\r\n    exports: [\r\n        CustomScrollbarDirective,\r\n    ]\r\n})\r\nexport class CustomScrollbarModule {\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const CURRENT_PREVIEW_FILE = new InjectionToken<any>('CURRENT_PREVIEW_FILE');\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormattedDatePipe} from '@common/core/ui/format-pipes/formatted-date.pipe';\nimport {FormattedFileSizePipe} from '@common/uploads/formatted-file-size.pipe';\n\n\n@NgModule({\n    declarations: [\n        FormattedDatePipe,\n        FormattedFileSizePipe,\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FormattedDatePipe,\n        FormattedFileSizePipe,\n    ]\n})\nexport class FormatPipesModule {\n}\n","<ng-container *ngIf=\"previewFiles.getPortal() | async as portal\">\r\n    <ng-template [cdkPortalOutlet]=\"portal\" (attached)=\"listenForDownloadClick($event)\"></ng-template>\r\n</ng-container>\r\n","import {ChangeDetectionStrategy, Component, ComponentRef, Input, OnChanges, OnDestroy} from '@angular/core';\r\nimport {FileEntry} from '../../uploads/types/file-entry';\r\nimport {PreviewFilesService} from '../preview-files.service';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\nimport {Subscription} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'preview-container',\r\n    templateUrl: './preview-container.component.html',\r\n    styleUrls: ['./preview-container.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PreviewContainerComponent implements OnChanges, OnDestroy {\r\n    @Input() files: FileEntry[];\r\n    @Input() activeFile: number;\r\n    private downloadSub: Subscription;\r\n\r\n    constructor(public previewFiles: PreviewFilesService) {}\r\n\r\n    ngOnChanges(changes) {\r\n        this.previewFiles.set(this.files, this.activeFile);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.previewFiles.destroy();\r\n        if (this.downloadSub) this.downloadSub.unsubscribe();\r\n    }\r\n\r\n    public listenForDownloadClick(comp: ComponentRef<BaseFilePreview>) {\r\n        if (this.downloadSub) this.downloadSub.unsubscribe();\r\n        this.downloadSub = comp.instance.download.subscribe(() => {\r\n            this.previewFiles.download.next();\r\n        });\r\n    }\r\n}\r\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n//# sourceMappingURL=throttle.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n    constructor(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n    constructor(destination, duration, scheduler, leading, trailing) {\n        super(destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    _next(value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n            else if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n    }\n    _complete() {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    clearThrottle() {\n        const throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    }\n}\nfunction dispatchNext(arg) {\n    const { subscriber } = arg;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, OnDestroy } from '@angular/core';\r\nimport { UploadQueueService } from '../upload-queue/upload-queue.service';\r\nimport { animationFrameScheduler, Subscription } from 'rxjs';\r\nimport { throttleTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'upload-progress-bar',\r\n    templateUrl: './upload-progress-bar.component.html',\r\n    styleUrls: ['./upload-progress-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UploadProgressBarComponent implements OnDestroy {\r\n    @HostBinding('class.hidden') hidden = true;\r\n    private subscription: Subscription;\r\n    public progress: number;\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        public uploadQueue: UploadQueueService,\r\n        private cd: ChangeDetectorRef,\r\n    ) {\r\n        this.subscription = this.uploadQueue.totalProgress()\r\n            // material progress bar animation lasts 250ms\r\n            .pipe(throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}))\r\n            .subscribe(progress => {\r\n                this.progress = progress;\r\n                this.hidden = progress === 100 || this.uploadQueue.count$.value.pending === 0;\r\n                this.cd.markForCheck();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n}\r\n\r\n","<mat-progress-bar mode=\"determinate\" [value]=\"progress\" color=\"accent\"></mat-progress-bar>\r\n","import {Component, Inject, ViewEncapsulation} from '@angular/core';\r\nimport {Article} from '../../../../shared/models/Article';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\n\r\ninterface ArticleSettingsModalData {\r\n    article: Article;\r\n}\r\n\r\ninterface ArticleSettingsModel {\r\n    slug?: string;\r\n    description?: string;\r\n    position?: number|string;\r\n}\r\n\r\n@Component({\r\n    selector: 'article-settings-modal',\r\n    templateUrl: './article-settings-modal.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ArticleSettingsModalComponent {\r\n    constructor(\r\n        private dialogRef: MatDialogRef<ArticleSettingsModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: ArticleSettingsModalData,\r\n    ) {\r\n        this.hydrate();\r\n    }\r\n\r\n    public model: ArticleSettingsModel = {};\r\n\r\n    public close(settings?: ArticleSettingsModel) {\r\n        this.dialogRef.close(settings);\r\n    }\r\n\r\n    private hydrate() {\r\n        this.model.slug = this.data.article.slug;\r\n        this.model.description = this.data.article.description;\r\n        this.model.position = this.data.article.position;\r\n    }\r\n\r\n    public confirm() {\r\n        this.close({\r\n            slug: slugifyString(this.model.slug),\r\n            description: this.model.description,\r\n            position: parseInt(this.model.position as string),\r\n        });\r\n    }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h2 mat-dialog-title trans>Article Settings</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<form (ngSubmit)=\"confirm()\" ngNativeValidate>\r\n    <mat-dialog-content class=\"many-inputs\">\r\n        <div class=\"input-container\">\r\n            <label for=\"article-slug\" trans>Slug</label>\r\n            <input type=\"text\" id=\"article-slug\" name=\"article-slug\" [(ngModel)]=\"model.slug\">\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"article-description\" trans>Description</label>\r\n            <textarea name=\"article-description\" id=\"article-description\" rows=\"7\" [(ngModel)]=\"model.description\"></textarea>\r\n            <p trans>This will appear when searching the help center. Excerpt from article will be used otherwise.</p>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"article-position\" trans>Position</label>\r\n            <input type=\"number\" id=\"article-position\" name=\"article-position\" [(ngModel)]=\"model.position\" min=\"0\">\r\n            <p trans>Order for article on help center homepage. Lower position will be first.</p>\r\n        </div>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" class=\"submit-button\" mat-raised-button color=\"accent\" trans>Update</button>\r\n    </mat-dialog-actions>\r\n</form>","export function strContains(haystack: string | string[], needle: string): boolean {\r\n    if (!haystack || !needle) return false;\r\n\r\n    needle = needle.toLowerCase();\r\n\r\n    if (!Array.isArray(haystack)) {\r\n        haystack = [haystack];\r\n    }\r\n\r\n    for (let i = 0; i < haystack.length; i++) {\r\n        if (haystack[i].toLowerCase().indexOf(needle) > -1) return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import {Category} from '../../shared/models/Category';\r\nimport {strContains} from '@common/core/utils/str-contains';\r\n\r\nexport class CategoriesFilterer {\r\n\r\n    /**\r\n     * Filter categories by specified search query.\r\n     */\r\n    public filter(query: string = null, categories: Category[]): Category[] {\r\n        if ( ! query) return categories.slice();\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < categories.length; i++) {\r\n            const category = Object.assign({}, categories[i]);\r\n\r\n            // if category name contains query, push it with all children\r\n            if (strContains(categories[i].name, query)) {\r\n                filtered.push(category);\r\n\r\n            // if one of categories children names contain query,\r\n            // push category only with that child\r\n            } else {\r\n                category.children = category.children.filter(child => {\r\n                    return strContains(child['name'], query);\r\n                });\r\n\r\n                if (category.children.length) {\r\n                    filtered.push(category);\r\n                }\r\n            }\r\n        }\r\n\r\n        return filtered;\r\n    }\r\n}\r\n","<div class=\"panel\" customScrollbar=\"lite\">\r\n    <div class=\"panel-header\">\r\n        <span trans>Categories</span>\r\n        <button class=\"clear-all-button\" mat-icon-button (click)=\"deselectAll()\" [matTooltip]=\"'Clear All' | trans\">\r\n            <mat-icon svgIcon=\"clear-all\"></mat-icon>\r\n        </button>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"input-container\">\r\n            <input type=\"text\" id=\"categories-manager-search\" [formControl]=\"searchQuery\" placeholder=\"Search...\" trans-placeholder>\r\n            <mat-icon svgIcon=\"search\"></mat-icon>\r\n        </div>\r\n\r\n        <section class=\"categories\" customScrollbar=\"lite\">\r\n            <ng-container *ngFor=\"let category of categories; let parentIndex = index;\">\r\n                <div class=\"category parent-category\">\r\n                    <mat-checkbox [id]=\"parentIndex\" [checked]=\"categoryIsSelected(category.id) || childIsSelected(category)\" (change)=\"toggle(category)\">{{category.name}}</mat-checkbox>\r\n                </div>\r\n                <div class=\"category child-category\" *ngFor=\"let childCategory of category.children; let childIndex = index;\">\r\n                    <mat-checkbox [id]=\"parentIndex+''+childIndex\"  [checked]=\"categoryIsSelected(childCategory.id)\" (change)=\"toggle(childCategory, category.id);\">{{childCategory.name}}</mat-checkbox>\r\n                </div>\r\n            </ng-container>\r\n            <div class=\"no-results\" *ngIf=\"!categories.length && searchQuery.value\" trans>No Results Found.</div>\r\n        </section>\r\n\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>","import {Component, ViewEncapsulation, Output, EventEmitter, OnInit, ViewChild, Input} from '@angular/core';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {CategoriesService} from '../../shared/categories.service';\r\nimport {FormControl} from '@angular/forms';\r\nimport {CategoriesFilterer} from '../categories-filterer';\r\nimport {CustomScrollbarDirective} from '@common/core/ui/custom-scrollbar/custom-scrollbar.directive';\r\nimport {LocalStorage} from '@common/core/services/local-storage.service';\r\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'categories-manager',\r\n    templateUrl: './categories-manager.component.html',\r\n    styleUrls: ['./categories-manager.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CategoriesManagerComponent implements OnInit {\r\n    @ViewChild(CustomScrollbarDirective, { static: true }) scrollbar: CustomScrollbarDirective;\r\n\r\n    /**\r\n     * Fired only when changes have originated from component and not setters.\r\n     */\r\n    @Output() public onChange = new EventEmitter();\r\n\r\n    /**\r\n     * Control for categories search field.\r\n     */\r\n    public searchQuery = new FormControl();\r\n\r\n    /**\r\n     * Currently selected categories.\r\n     */\r\n    public selectedCategories: number[] = [];\r\n\r\n    /**\r\n     * Initial categories that should be pre-selected.\r\n     */\r\n    @Input() public initialCategories: number[];\r\n\r\n    /**\r\n     * Categories filtered by search query.\r\n     */\r\n    public categories: Category[] = [];\r\n\r\n    /**\r\n     * All available categories.\r\n     */\r\n    public allCategories: Category[] = [];\r\n\r\n    /**\r\n     * CategoriesManagerComponent Constructor.\r\n     */\r\n    constructor(private api: CategoriesService, private storage: LocalStorage) {}\r\n\r\n    ngOnInit() {\r\n        this.bindSearchQuery();\r\n\r\n        if (this.initialCategories) {\r\n            this.selectedCategories = this.initialCategories.slice();\r\n        } else {\r\n            this.selectedCategories = this.storage.get('selectedCategories', []);\r\n        }\r\n\r\n        if ( ! this.allCategories.length) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return currently selected categories.\r\n     */\r\n    public getSelectedCategories() {\r\n        return this.selectedCategories;\r\n    }\r\n\r\n    /**\r\n     * Select specified categories.\r\n     */\r\n    public setSelectedCategories(categories: Category[]) {\r\n        if ( ! categories) return;\r\n        this.selectedCategories = categories.map(category => category.id);\r\n    }\r\n\r\n    /**\r\n     * Set specified categories on component.\r\n     */\r\n    public setCategories(categories: Category[]) {\r\n        this.categories = categories;\r\n        this.allCategories = categories;\r\n    }\r\n\r\n    /**\r\n     * Refresh all categories from backend.\r\n     */\r\n    public refresh(): Promise<any> {\r\n        return new Promise(resolve => {\r\n            this.api.getCategories().subscribe(response => {\r\n                this.setCategories(response.categories);\r\n                resolve();\r\n            }\r\n        )});\r\n    }\r\n\r\n    /**\r\n     * Check if specified category is selected.\r\n     */\r\n    public categoryIsSelected(id: number) {\r\n        return this.selectedCategories.indexOf(id) > -1;\r\n    }\r\n\r\n    /**\r\n     * Check if any of specified category children are selected.\r\n     */\r\n    public childIsSelected(category: Category): boolean {\r\n        if ( ! category.children.length) return false;\r\n\r\n        for (let i = 0; i < category.children.length; i++) {\r\n            if (this.categoryIsSelected(category.children[i].id)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select or deselect specified category and its parent (if specified)\r\n     */\r\n    public toggle(category: Category, parentId?: number) {\r\n        const index = this.selectedCategories.indexOf(category.id);\r\n\r\n        // toggle category\r\n        if (index > -1) {\r\n            this.selectedCategories.splice(index, 1);\r\n        } else {\r\n            this.selectedCategories.push(category.id);\r\n        }\r\n\r\n        // also select parent if we are toggling child category\r\n        if (parentId && ! this.categoryIsSelected(parentId)) {\r\n            this.selectedCategories.push(parentId);\r\n        }\r\n\r\n        // deselect all child categories as well\r\n        this.deselectChildren(category);\r\n\r\n        this.storage.set('selectedCategories', this.selectedCategories);\r\n        this.onChange.emit();\r\n    }\r\n\r\n    /**\r\n     * Deselect all categories.\r\n     */\r\n    public deselectAll() {\r\n        this.selectedCategories = [];\r\n        this.storage.set('selectedCategories', []);\r\n        this.onChange.emit();\r\n    }\r\n\r\n    /**\r\n     * Deselect all children of specified category.\r\n     */\r\n    private deselectChildren(parent: Category) {\r\n        if ( ! parent.children) return;\r\n\r\n        parent.children.forEach(child => {\r\n            const index = this.selectedCategories.indexOf(child.id);\r\n            index > -1 && this.selectedCategories.splice(index, 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get child categories and parent categories\r\n     * whose children are not selected.\r\n     */\r\n    public getExactSelectedCategories() {\r\n        return this.selectedCategories.filter(id => {\r\n            const category = this.categories.find(category => category.id === id);\r\n            return ! category || ! this.childIsSelected(category);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Bind categories search bar events needed\r\n     * for filtering on keyup.\r\n     */\r\n    private bindSearchQuery() {\r\n        this.searchQuery.valueChanges\r\n            .pipe(debounceTime(400), distinctUntilChanged())\r\n            .subscribe(query => {\r\n                this.categories = (new CategoriesFilterer).filter(query, this.allCategories);\r\n                this.scrollbar.update();\r\n            });\r\n    }\r\n}\r\n","import {Component, Inject, ViewEncapsulation} from '@angular/core';\r\nimport {Article} from '../../../shared/models/Article';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\ninterface ArticleModalData {\r\n    article: Article;\r\n}\r\n\r\n@Component({\r\n    selector: 'article-modal',\r\n    templateUrl: './article-modal.component.html',\r\n    styleUrls: ['./article-modal.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ArticleModalComponent {\r\n    public article: Article;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<ArticleModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: ArticleModalData,\r\n    ) {\r\n        this.hydrate();\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    private hydrate() {\r\n        this.article = this.data.article;\r\n    }\r\n}\r\n","<mat-dialog-content>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n    <article [article]=\"article\"></article>\r\n</mat-dialog-content>","import {Category} from './Category';\r\nimport {ArticleFeedback} from './ArticleFeedback';\r\nimport {FileEntry} from '@common/uploads/types/file-entry';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\n\r\nexport class Article {\r\n    id: number;\r\n    title: string;\r\n    body: string;\r\n    slug?: string;\r\n    extra_data?: string;\r\n    draft: boolean;\r\n    visibility = 'public';\r\n    views: number;\r\n    position: number;\r\n    description?: string;\r\n    created_at?: string;\r\n    updated_at?: string;\r\n    categories?: Category[];\r\n    tags?: Tag[];\r\n    uploads?: FileEntry[];\r\n    feedback?: ArticleFeedback[];\r\n\r\n    constructor(params: Object = {}) {\r\n        for (const name in params) {\r\n            this[name] = params[name];\r\n        }\r\n    }\r\n}\r\n","import {Article} from './Article';\n\nexport class Category {\n    id: number;\n    name: string;\n    description?: string;\n    position: number;\n    parent_id?: number;\n    hidden: boolean;\n    created_at?: string;\n    updated_at?: string;\n    children?: Category[];\n    parent?: Category;\n    articles?: Article[];\n    image?: string;\n    articles_count?: number;\n\n    constructor(params: Object = {}) {\n        for (const name in params) {\n            this[name] = params[name];\n        }\n    }\n}\n","<div class=\"modal-header\">\r\n    <h2 mat-dialog-title>\r\n        <span *ngIf=\"updating\" trans>Update Category</span>\r\n        <span *ngIf=\"!updating\" trans>New Category</span>\r\n    </h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<form (ngSubmit)=\"confirm()\" ngNativeValidate>\r\n    <mat-dialog-content class=\"many-inputs\">\r\n        <div class=\"input-container\">\r\n            <label for=\"name\" trans>Name</label>\r\n            <input type=\"text\" id=\"name\" name=\"name\" [(ngModel)]=\"model.name\">\r\n            <div class=\"error name-error\" *ngIf=\"errors.name\">{{errors.name}}</div>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"image\" trans>Image</label>\r\n            <div class=\"input-with-action action-left\">\r\n                <button mat-flat-button color=\"accent\" type=\"button\" class=\"addon\" (click)=\"openInsertImageDialog()\" [matTooltip]=\"'Upload image' | trans\">\r\n                    <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                </button>\r\n                <input type=\"text\" id=\"image\" name=\"image\" [(ngModel)]=\"model.image\">\r\n            </div>\r\n            <div class=\"error image-error\" *ngIf=\"errors.image\">{{errors.image}}</div>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"name\" trans>Parent Category</label>\r\n            <select type=\"text\" id=\"parent_id\" name=\"parent_id\" [(ngModel)]=\"model.parent_id\">\r\n                <option [ngValue]=\"null\" trans>No Parent Category</option>\r\n                <option [value]=\"category.id\" *ngFor=\"let category of categories\">{{category.name}}</option>\r\n            </select>\r\n            <div class=\"error parent-error\" *ngIf=\"errors.parent_id\">{{errors.parent_id}}</div>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"description\" trans>Description</label>\r\n            <textarea type=\"text\" id=\"description\" name=\"description\" [(ngModel)]=\"model.description\" rows=\"4\"></textarea>\r\n            <div class=\"error description-error\" *ngIf=\"errors.description\">{{errors.description}}</div>\r\n        </div>\r\n\r\n        <div class=\"setting-toggle-container\">\r\n            <mat-slide-toggle name=\"hidden\" id=\"hidden\" [(ngModel)]=\"model.hidden\" trans>Hidden</mat-slide-toggle>\r\n            <p trans>Whether this category should be displayed in help center.</p>\r\n        </div>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" class=\"submit-button\" mat-raised-button color=\"accent\">\r\n            <span *ngIf=\"updating\" trans>Update</span>\r\n            <span *ngIf=\"!updating\" trans>Create</span>\r\n        </button>\r\n    </mat-dialog-actions>\r\n</form>\r\n","import {Component, Inject, ViewEncapsulation} from '@angular/core';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {CategoriesService} from '../../shared/categories.service';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport {AvatarValidator} from '@common/account-settings/avatar-validator';\r\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\n\r\ninterface CategoryModalData {\r\n    category?: Category;\r\n    parentId?: number;\r\n}\r\n\r\ninterface CategoryModalErrors {\r\n    name?: string;\r\n    parent_id?: string;\r\n    description?: string;\r\n    image?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'category-modal',\r\n    templateUrl: './category-modal.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [UploadQueueService],\r\n})\r\nexport class CategoryModalComponent {\r\n    public categories: Category[] = [];\r\n    public model: Category = new Category({parent_id: null});\r\n    public updating = false;\r\n    public errors: CategoryModalErrors = {};\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<CategoryModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: CategoryModalData,\r\n        private api: CategoriesService,\r\n        private imageValidator: AvatarValidator,\r\n        private uploadQueue: UploadQueueService,\r\n        private toast: Toast,\r\n    ) {\r\n       this.hydrate();\r\n    }\r\n\r\n    public close(category?: Category) {\r\n        this.dialogRef.close(category);\r\n    }\r\n\r\n    public confirm() {\r\n        this.api.createOrUpdateCategory(this.getPayload()).subscribe(category => {\r\n            if (this.model.id) {\r\n                this.toast.open('Updated category.');\r\n            } else {\r\n                this.toast.open('Created category.');\r\n            }\r\n            this.close(category);\r\n        }, errorResponse => this.errors = errorResponse.messages);\r\n    }\r\n\r\n    private hydrate() {\r\n        this.fetchCategories(this.data.category);\r\n\r\n        if (this.data.category) {\r\n            this.updating = true;\r\n            this.model = this.data.category;\r\n        }\r\n\r\n        if (this.data.parentId) this.model.parent_id = this.data.parentId;\r\n    }\r\n\r\n    private getPayload() {\r\n        return {\r\n            id: this.model.id,\r\n            name: this.model.name,\r\n            image: this.model.image,\r\n            description: this.model.description,\r\n            parent_id: this.model.parent_id || null,\r\n            hidden: this.model.hidden,\r\n        };\r\n    }\r\n\r\n    private fetchCategories(category?: Category) {\r\n        this.api.getCategories().subscribe(response => {\r\n            // remove category we're currently editing from parent_id\r\n            // select so category can't be select as parent to itself\r\n            this.categories = response.categories.filter(current => {\r\n                return ! category || category.id !== current.id;\r\n            });\r\n        });\r\n    }\r\n\r\n    public openInsertImageDialog() {\r\n        const params = {\r\n            uri: 'uploads/images',\r\n            httpParams: {diskPrefix: 'category'},\r\n            validator: this.imageValidator\r\n        };\r\n        openUploadWindow({types: [UploadInputTypes.image], multiple: false}).then(uploadedFiles => {\r\n            if ( ! uploadedFiles) return;\r\n            this.uploadQueue.start(uploadedFiles, params).subscribe(response => {\r\n                this.model.image = response.fileEntry.url;\r\n            });\r\n        });\r\n    }\r\n}\r\n","<div class=\"action-bar\">\r\n    <div class=\"nav\">\r\n        <a [routerLink]=\"'/help-center'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" [routerLinkActiveOptions]=\"{exact: true}\" trans>Home</a>\r\n        <a [routerLink]=\"'/help-center/manage/categories'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" trans>Categories</a>\r\n        <a [routerLink]=\"'/help-center/manage/articles'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" [routerLinkActiveOptions]=\"{exact: true}\" trans>Articles</a>\r\n    </div>\r\n    <div class=\"actions\">\r\n        <button class=\"no-style action article-settings-action\" (click)=\"openArticleSettingsModal()\"><mat-icon svgIcon=\"settings\"></mat-icon></button>\r\n        <button class=\"no-style publish-article-button new-item-button\" (click)=\"saveOrUpdateArticle()\" id=\"submit\">\r\n            <span class=\"create-article-submit\" *ngIf=\"!articleModel.id\" trans>Create Article</span>\r\n            <span class=\"update-article-submit\" *ngIf=\"articleModel.id\" trans>Update Article</span>\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container\">\r\n    <section class=\"middle-column\">\r\n        <div class=\"input-container title\">\r\n            <input class=\"article-title-input\" type=\"text\" [(ngModel)]=\"articleModel.title\" placeholder=\"Title\" trans-placeholder>\r\n            <select class=\"article-status-input\" [(ngModel)]=\"articleModel.draft\">\r\n                <option value=\"0\" trans>Published</option>\r\n                <option value=\"1\" trans>Draft</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"text-editor-container\">\r\n            <upload-progress-bar></upload-progress-bar>\r\n            <text-editor inlineUploadPrefix=\"article_images\" (onFileUpload)=\"uploadFiles($event)\" class=\"text-editor\" minHeight=\"auto\" [showAdvancedControls]=\"true\" #editorEl></text-editor>\r\n        </div>\r\n    </section>\r\n\r\n    <aside class=\"right-column\" customScrollbar=\"lite\">\r\n        <categories-manager class=\"categories-panel\" [initialCategories]=\"getCategories()\">\r\n            <div class=\"new-category-button\">\r\n                <button mat-flat-button color=\"accent\" (click)=\"openNewCategoryModal()\" trans>+ Add New Category</button>\r\n            </div>\r\n        </categories-manager>\r\n\r\n        <div class=\"panel\">\r\n            <div class=\"panel-header\" trans>Tags</div>\r\n            <div class=\"panel-body\">\r\n                <tags-manager></tags-manager>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"panel\" *ngIf=\"attachments?.length\">\r\n            <div class=\"panel-header\" trans>Attachments</div>\r\n            <div class=\"panel-body\">\r\n                <reply-attachment-list [attachments]=\"attachments\" *ngIf=\"attachments.length\" (detached)=\"removeAttachment($event)\"></reply-attachment-list>\r\n            </div>\r\n        </div>\r\n    </aside>\r\n\r\n    <button class=\"preview-article-button\" (click)=\"openPreviewModal()\" [matTooltip]=\"'Preview Article' | trans\">\r\n        <mat-icon svgIcon=\"remove-red-eye\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n\r\n    <loading-indicator class=\"overlay\" [isVisible]=\"updating\"></loading-indicator>\r\n</div>\r\n","import {Component, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {ArticleSettingsModalComponent} from './article-settings-modal/article-settings-modal.component';\r\nimport {CategoriesManagerComponent} from '../categories-manager/categories-manager.component';\r\nimport {HelpCenterService} from '../../shared/help-center.service';\r\nimport {ArticleModalComponent} from '../../shared/article-modal/article-modal.component';\r\nimport {Article} from '../../../shared/models/Article';\r\nimport {CategoryModalComponent} from '../category-modal/category-modal.component';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {TextEditorComponent} from '@common/text-editor/text-editor.component';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {TagsManagerComponent} from '../../../shared/tags-manager/tags-manager.component';\r\nimport {UploadedFile} from '@common/uploads/uploaded-file';\r\nimport {FileEntry} from '@common/uploads/types/file-entry';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\n\r\n@Component({\r\n    selector: 'new-article',\r\n    templateUrl: './new-article.component.html',\r\n    styleUrls: ['./new-article.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [UploadQueueService],\r\n})\r\nexport class NewArticleComponent implements OnInit {\r\n    @ViewChild(TextEditorComponent, { static: true }) private textEditor: TextEditorComponent;\r\n    @ViewChild(CategoriesManagerComponent, { static: true }) private categoriesManager: CategoriesManagerComponent;\r\n    @ViewChild(TagsManagerComponent, { static: true }) private tagsManager: TagsManagerComponent;\r\n\r\n    public updating = false;\r\n    public articleModel: Article = new Article({categories: [], draft: 0});\r\n    public attachments: FileEntry[] = [];\r\n\r\n    constructor(\r\n        private modal: Modal,\r\n        private helpCenter: HelpCenterService,\r\n        private toast: Toast,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private uploadQueue: UploadQueueService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(resolves => this.hydrate(resolves['data']));\r\n    }\r\n\r\n    public getCategories(): number[] {\r\n        return this.articleModel.categories.map(category => category.id);\r\n    }\r\n\r\n    public saveOrUpdateArticle() {\r\n        const method = this.articleModel.id ? 'updateArticle' : 'createArticle';\r\n        this.updating = true;\r\n\r\n        this.helpCenter[method](this.getPayload()).subscribe(() => {\r\n            this.toast.open('Article ' + (this.articleModel.id ? 'updated.' : 'created.'));\r\n            this.router.navigateByUrl('help-center/manage/articles');\r\n        }, errors => {\r\n            const message = errors['messages'][Object.keys(errors['messages'])[0]];\r\n            this.toast.open(message);\r\n            this.updating = false;\r\n        });\r\n    }\r\n\r\n    public openPreviewModal() {\r\n        this.modal.open(\r\n            ArticleModalComponent,\r\n            {article: this.getPayload()},\r\n            {panelClass: 'article-modal-container'}\r\n        );\r\n    }\r\n\r\n    public openArticleSettingsModal() {\r\n        this.modal.show(ArticleSettingsModalComponent, {article: this.articleModel})\r\n            .afterClosed()\r\n            .subscribe(data => {\r\n                if ( ! data) return;\r\n                this.articleModel = Object.assign(this.articleModel, data);\r\n            });\r\n    }\r\n\r\n    private getPayload() {\r\n        const model  = Object.assign({}, this.articleModel) as {[key: string]: any};\r\n        model.body = this.textEditor.getContents();\r\n        model.categories = this.categoriesManager.getSelectedCategories();\r\n        model.tags = this.tagsManager.getSelectedTags();\r\n        model.uploads = this.attachments.map(a => a.id);\r\n        return model;\r\n    }\r\n\r\n    private hydrate(data: {article?: Article, categories?: Category[]}) {\r\n        if (data.article) {\r\n            this.articleModel = data.article;\r\n            this.textEditor.setContents(data.article.body);\r\n            this.categoriesManager.setSelectedCategories(this.articleModel.categories);\r\n            this.tagsManager.setSelectedTags(this.articleModel.tags.map(tag => tag.name));\r\n            this.attachments = data.article.uploads || [];\r\n        }\r\n\r\n        if (data.categories) {\r\n            this.categoriesManager.setCategories(data.categories);\r\n        }\r\n    }\r\n\r\n    public openNewCategoryModal() {\r\n        this.modal.show(CategoryModalComponent)\r\n            .afterClosed()\r\n            .subscribe(category => {\r\n                if ( ! category) return;\r\n                this.categoriesManager.refresh()\r\n                    .then(() => this.categoriesManager.toggle(category));\r\n            });\r\n    }\r\n\r\n    public uploadFiles(files: UploadedFile[]) {\r\n        this.uploadQueue.start(files).subscribe(response => {\r\n            this.attachments = [...this.attachments, response.fileEntry];\r\n        });\r\n    }\r\n\r\n    public removeAttachment(entry: FileEntry) {\r\n        for (let i = 0; i < this.attachments.length; i++) {\r\n            if (this.attachments[i].id === entry.id) {\r\n                this.attachments.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {Component, ViewEncapsulation, OnInit, EventEmitter, ViewChild, Output} from '@angular/core';\r\nimport {CategoriesManagerComponent} from '../../categories-manager/categories-manager.component';\r\nimport {TagsManagerComponent} from '../../../../shared/tags-manager/tags-manager.component';\r\n\r\n@Component({\r\n    selector: 'articles-list-filters',\r\n    templateUrl: './articles-list-filters.component.html',\r\n    styleUrls: ['./articles-list-filters.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ArticlesListFiltersComponent implements OnInit {\r\n    @ViewChild(TagsManagerComponent, { static: true }) tagsManager: TagsManagerComponent;\r\n    @ViewChild(CategoriesManagerComponent, { static: true }) categoriesManager: CategoriesManagerComponent;\r\n\r\n    /**\r\n     * Fired when any of the filters onChange.\r\n     */\r\n    @Output() public onChange = new EventEmitter();\r\n\r\n    /**\r\n     * Available filters for articles list.\r\n     */\r\n    private filters: {categories?: number[], tags?: string, draft?: number} = {draft: null};\r\n\r\n    ngOnInit() {\r\n        this.categoriesManager.refresh().then(() => this.onChange.emit());\r\n    }\r\n\r\n    /**\r\n     * Get current articles list filters.\r\n     */\r\n    public getFilters() {\r\n        return Object.assign(this.filters, {categories: this.categoriesManager.getExactSelectedCategories()});\r\n    }\r\n\r\n    /**\r\n     * Apply specified filter to articles list.\r\n     */\r\n    public applyFilter(name: string, value: any) {\r\n        this.filters[name] = value;\r\n        this.onChange.emit();\r\n    }\r\n\r\n    /**\r\n     * Check whether specified filter is currently applied to articles list.\r\n     */\r\n    public filterIsActive(name: string, value?: string|number): boolean {\r\n        if (value !== undefined) {\r\n            return this.filters[name] === value;\r\n        } else {\r\n            return this.filters[name] || this.filters[name] === 0;\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Router, Resolve, ActivatedRouteSnapshot} from '@angular/router';\r\nimport {HelpCenterService} from '../../shared/help-center.service';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {Article} from '../../../shared/models/Article';\r\nimport {CategoriesService} from '../../shared/categories.service';\r\nimport {forkJoin} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NewArticleResolve implements Resolve<{categories: Category[], article?: Article}> {\r\n\r\n    constructor(\r\n        private helpCenter: HelpCenterService,\r\n        private categories: CategoriesService,\r\n        private router: Router\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot): any {\r\n        const articleId = route.params['article_id'];\r\n\r\n        if (articleId) {\r\n            return forkJoin(\r\n                this.categories.getCategories(),\r\n                this.helpCenter.getArticle(route.params['article_id'])\r\n            ).toPromise().then(response => {\r\n                return {categories: response[0].categories, article: response[1].article};\r\n            }, () => {\r\n                this.router.navigate(['/help-center/manage/articles']);\r\n                return false;\r\n            });\r\n        } else {\r\n            return this.categories.getCategories().toPromise().then(response => {\r\n                return {categories: response.categories};\r\n            }, () => {\r\n                this.router.navigate(['/help-center/manage/articles']);\r\n                return false;\r\n            });\r\n        }\r\n    }\r\n}\r\n","<div class=\"filters-list\">\r\n    <categories-manager class=\"article-categories-filter\" (onChange)=\"applyFilter('categories', $event)\"></categories-manager>\r\n\r\n    <div class=\"panel tags-filter\">\r\n        <div class=\"panel-header\" trans>Tags</div>\r\n        <div class=\"panel-body\">\r\n            <tags-manager (onChange)=\"applyFilter('tags', $event)\"></tags-manager>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"panel article-type-filter\">\r\n        <div class=\"panel-header\" trans>Article Status</div>\r\n        <div class=\"panel-body\">\r\n            <button mat-flat-button color=\"gray\" class=\"filter-button all-filter-button\" (click)=\"applyFilter('draft', null)\" [class.active]=\"filterIsActive('draft', null)\" trans>All</button>\r\n            <button mat-flat-button color=\"gray\" class=\"filter-button not-draft-filter-button\" (click)=\"applyFilter('draft', 0)\" [class.active]=\"filterIsActive('draft', 0)\" trans>Published</button>\r\n            <button mat-flat-button color=\"gray\" class=\"filter-button draft-filter-button\" (click)=\"applyFilter('draft', 1)\" [class.active]=\"filterIsActive('draft', 1)\" trans>Draft</button>\r\n        </div>\r\n    </div>\r\n</div>","<div class=\"action-bar\">\r\n    <div class=\"nav\">\r\n        <a [routerLink]=\"'/help-center'\" class=\"nav-item home-nav-item\" routerLinkActive=\"router-link-active\" [routerLinkActiveOptions]=\"{exact: true}\" trans>Home</a>\r\n        <a [routerLink]=\"'/help-center/manage/categories'\" class=\"nav-item categories-nav-item\" routerLinkActive=\"router-link-active\" trans>Categories</a>\r\n        <a [routerLink]=\"'/help-center/manage/articles'\" class=\"nav-item articles-nav-item\" routerLinkActive=\"router-link-active\" trans>Articles</a>\r\n    </div>\r\n    <div class=\"actions\">\r\n        <div class=\"search-bar input-container\">\r\n            <input type=\"text\" placeholder=\"Search\" class=\"articles-search-input\" [formControl]=\"searchQuery\" trans-placeholder>\r\n            <mat-icon svgIcon=\"search\"></mat-icon>\r\n        </div>\r\n        <div class=\"action-bar-action change-layout-action\">\r\n            <button class=\"no-style grid-layout-button\" (click)=\"setLayout('grid')\" [class.active]=\"isLayoutActive('grid')\"><mat-icon svgIcon=\"view-comfy\"></mat-icon></button>\r\n            <button class=\"no-style list-layout-button\" (click)=\"setLayout('list')\" [class.active]=\"isLayoutActive('list')\"><mat-icon svgIcon=\"view-list\"></mat-icon></button>\r\n        </div>\r\n        <articles-order-select (onChange)=\"reloadArticles()\" class=\"action-bar-action\"></articles-order-select>\r\n        <a class=\"new-article-button new-item-button\" routerLink=\"new\"><mat-icon svgIcon=\"add\"></mat-icon> <span trans>Create New Article</span></a>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"content\">\r\n    <articles-list-filters (onChange)=\"reloadArticles()\"></articles-list-filters>\r\n\r\n    <div class=\"articles-list-container\" *ngIf=\"paginator.pagination$ | async as pagination\" #scrollContainer>\r\n        <div class=\"articles-list\">\r\n            <div [class.grid-flex-wrapper]=\"selectedLayout === 'grid'\">\r\n                <div class=\"articles-list-item\" *ngFor=\"let article of pagination.data\" (click)=\"goToUpdateArticle(article.id)\" [class.draft]=\"article.draft\">\r\n                    <button class=\"no-style delete-article-button\" (click)=\"maybeDeleteArticle(article); $event.stopPropagation();\" [matTooltip]=\"'Delete Article' | trans\">\r\n                        <mat-icon svgIcon=\"delete\" class=\"size-20\"></mat-icon>\r\n                    </button>\r\n                    <div class=\"article-categories\" *ngIf=\"article.categories.length\">\r\n                        <span class=\"parent-category\" *ngIf=\"article.categories[0]?.parent\">{{article.categories[0].parent.name}} > </span>\r\n                        <span class=\"category\">{{article.categories[0].name}}</span>\r\n                    </div>\r\n                    <div class=\"article-title\">{{article.title}}</div>\r\n                    <div class=\"article-body\">{{article.body}}</div>\r\n                    <div class=\"article-tags\">\r\n                        <span class=\"tag-label large\" *ngFor=\"let tag of article.tags\">{{tag.name}}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <no-results-message *ngIf=\"paginator.noResults$ | async\">\r\n                <span primary-text trans>Could not find any articles.</span>\r\n                <span secondary-text trans>Try to make article files less specific.</span>\r\n            </no-results-message>\r\n        </div>\r\n\r\n        <loading-indicator class=\"overlay\" [isVisible]=\"paginator.loading$ | async\"></loading-indicator>\r\n\r\n        <mat-paginator [pageSize]=\"15\" [pageSizeOptions]=\"[5, 10, 15, 20]\" [length]=\"pagination.total\" [pageIndex]=\"pagination.current_page - 1\" (page)=\"matPaginatorPageChanged($event)\"></mat-paginator>\r\n    </div>\r\n</div>\r\n","import {AfterViewInit, Component, ElementRef, OnDestroy, ViewChild} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {FormControl} from '@angular/forms';\r\nimport {ArticlesListFiltersComponent} from './articles-list-filters/articles-list-filters.component';\r\nimport {ArticlesOrderSelectComponent} from '../../shared/articles-order-select/articles-order-select.component';\r\nimport {HelpCenterService} from '../../shared/help-center.service';\r\nimport {Article} from '../../../shared/models/Article';\r\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {PageEvent} from '@angular/material/paginator';\r\nimport {Paginator} from '@common/shared/paginator.service';\r\n\r\n@Component({\r\n    selector: 'articles-list',\r\n    templateUrl: './articles-list.component.html',\r\n    styleUrls: ['./articles-list.component.scss'],\r\n    providers: [Paginator],\r\n})\r\nexport class ArticlesListComponent implements AfterViewInit, OnDestroy {\r\n    @ViewChild(ArticlesOrderSelectComponent, { static: true }) articlesOrder: ArticlesOrderSelectComponent;\r\n    @ViewChild(ArticlesListFiltersComponent, { static: true }) articlesListFilters: ArticlesListFiltersComponent;\r\n    @ViewChild('scrollContainer', { static: false }) scrollContainer: ElementRef<HTMLElement>;\r\n\r\n    public searchQuery = new FormControl();\r\n    public selectedLayout = 'grid';\r\n\r\n    constructor(\r\n        private helpCenter: HelpCenterService,\r\n        private router: Router,\r\n        public paginator: Paginator<Article>,\r\n        private modal: Modal,\r\n    ) {}\r\n\r\n    ngAfterViewInit() {\r\n        this.searchQuery.valueChanges\r\n            .pipe(debounceTime(400), distinctUntilChanged())\r\n            .subscribe(() => this.reloadArticles());\r\n    }\r\n\r\n    public goToUpdateArticle(articleId: number) {\r\n        this.router.navigate(['/help-center/manage/', 'articles', articleId, 'edit']);\r\n    }\r\n\r\n    public maybeDeleteArticle(article: Article) {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Article',\r\n            body:  'Are you sure you want to delete this article?',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.helpCenter.deleteArticles([article.id]).subscribe(() => this.paginator.paginate());\r\n        });\r\n    }\r\n\r\n    public setLayout(name: string) {\r\n        this.selectedLayout = name;\r\n    }\r\n\r\n    public isLayoutActive(name: string) {\r\n        return this.selectedLayout === name;\r\n    }\r\n\r\n    public reloadArticles(pagination: {page?: number, perPage?: number} = {}) {\r\n        const params = {...this.getQueryParams(), ...pagination};\r\n        this.paginator.paginate(params, 'help-center/articles')\r\n            .subscribe(() => {\r\n                if (this.scrollContainer) {\r\n                    this.scrollContainer.nativeElement.scrollTop = 0;\r\n                }\r\n            });\r\n    }\r\n\r\n    public matPaginatorPageChanged(e: PageEvent) {\r\n        // material paginator is zero based, laravel is one based, need to sync page number here\r\n        const page = e.pageIndex ? e.pageIndex + 1 : undefined;\r\n        this.reloadArticles({page, perPage: e.pageSize});\r\n    }\r\n\r\n    private getQueryParams() {\r\n        const filters = this.articlesListFilters.getFilters(),\r\n            merged  = {} as {[key: string]: string|number};\r\n\r\n        // only specify filters with 'thruthy' or 0 value\r\n        for (const name in filters) {\r\n            if (filters[name] || filters[name] === 0) {\r\n                merged[name] = filters[name];\r\n            }\r\n        }\r\n\r\n        if (this.searchQuery.value) {\r\n            merged.query = this.searchQuery.value;\r\n        }\r\n\r\n        merged.orderBy = this.articlesOrder.selectedValue;\r\n\r\n        return merged;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.paginator.destroy();\r\n    }\r\n}\r\n","import {Component, ViewEncapsulation} from '@angular/core';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {CurrentUser} from '@common/auth/current-user';\r\n\r\n@Component({\r\n    selector: 'help-center-manage',\r\n    templateUrl: './help-center-manage.component.html',\r\n    styleUrls: ['./help-center-manage.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\n\r\nexport class HelpCenterManageComponent {\r\n    constructor(public settings: Settings, public currentUser: CurrentUser) {}\r\n}\r\n","<material-navbar menuPosition=\"agent-mailbox\"></material-navbar>\r\n\r\n<div class=\"body\">\r\n    <router-outlet></router-outlet>\r\n</div>","<div class=\"category-name-container\">\r\n    <button class=\"no-style drag-handle\" cdkDragHandle><mat-icon svgIcon=\"drag-handle\"></mat-icon></button>\r\n    <span class=\"category-name\" (click)=\"navigateToArticlesList(category)\">{{category.name}}</span>\r\n    <mat-icon svgIcon=\"visibility-off\" class=\"hidden-icon\" *ngIf=\"category.hidden\" color=\"warn\"></mat-icon>\r\n</div>\r\n\r\n<div class=\"info\">\r\n    <div class=\"articles-count\">\r\n        <span class=\"no-articles\" *ngIf=\"!category.articles_count\" trans>No Articles</span>\r\n        <span class=\"has-articles\" *ngIf=\"category.articles_count\">\r\n            <span class=\"plural\" *ngIf=\"category.articles_count > 1\">{{ category.articles_count}} <span trans>Articles</span></span>\r\n            <span class=\"singular\" *ngIf=\"category.articles_count== 1\" trans>1 Article</span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"actions\">\r\n    <button mat-icon-button class=\"update-category-button\" (click)=\"openUpdateCategoryModal(category)\" [matTooltip]=\"'Update Category' | trans\">\r\n        <mat-icon svgIcon=\"settings\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n\r\n    <button mat-icon-button class=\"new-child-category-button\" (click)=\"openCreateChildCategoryModal()\" *ngIf=\"!category.parent_id\" [matTooltip]=\"'Create Child Category' | trans\">\r\n        <mat-icon svgIcon=\"create-new-folder\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n\r\n    <button mat-icon-button class=\"detach-category-button\" (click)=\"maybeDetachCategory(category.id)\" *ngIf=\"category.parent_id\" [matTooltip]=\"'Detach Category' | trans\">\r\n        <mat-icon svgIcon=\"delete\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n\r\n    <button mat-icon-button class=\"delete-category-button\" (click)=\"maybeDeleteCategory(category.id)\" [matTooltip]=\"'Delete Category' | trans\">\r\n        <mat-icon svgIcon=\"delete-forever\" class=\"size-20\"></mat-icon>\r\n    </button>\r\n</div>\r\n","import {Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter} from '@angular/core';\r\nimport {CategoryModalComponent} from '../../category-modal/category-modal.component';\r\nimport {Category} from '../../../../shared/models/Category';\r\nimport {CategoriesService} from '../../../shared/categories.service';\r\nimport {Router} from '@angular/router';\r\nimport {LocalStorage} from '@common/core/services/local-storage.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Component({\r\n    selector: 'category-list-item',\r\n    templateUrl: './category-list-item.component.html',\r\n    styleUrls: ['./category-list-item.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CategoryListItemComponent {\r\n    constructor(\r\n        private modal: Modal,\r\n        private api: CategoriesService,\r\n        private router: Router,\r\n        private storage: LocalStorage,\r\n    ) {}\r\n\r\n    /**\r\n     * Help center category model instance.\r\n     */\r\n    @Input() public category: Category;\r\n\r\n    /**\r\n     * Fired when this category model changes or is deleted.\r\n     */\r\n    @Output() public onChange = new EventEmitter();\r\n\r\n    /**\r\n     * Show modal for creating child category.\r\n     */\r\n    public openCreateChildCategoryModal() {\r\n        this.modal.show(CategoryModalComponent, {parentId: this.category.id})\r\n            .afterClosed().subscribe(() => this.onChange.emit());\r\n    }\r\n\r\n    /**\r\n     * Show modal for updating specified category.\r\n     */\r\n    public openUpdateCategoryModal(category: Category) {\r\n        this.modal.show(CategoryModalComponent, {category})\r\n            .afterClosed().subscribe(() => this.onChange.emit());\r\n    }\r\n\r\n    /**\r\n     * Delete specified category if user confirms.\r\n     */\r\n    public maybeDeleteCategory(id: number) {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Category',\r\n            body: 'Are you sure you want to delete this category?',\r\n            bodyBold: 'Children of this category will not be deleted.',\r\n            ok: 'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.api.deleteCategory(id).subscribe(() => this.onChange.emit());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach specified category from parent if user confirms.\r\n     */\r\n    public maybeDetachCategory(id: number) {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Detach Category',\r\n            body:  'Are you sure you want to detach this category from its parent?',\r\n            ok:    'Detach'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.api.detachCategory(id).subscribe(() => this.onChange.emit());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Select specified category and navigate to articles list route.\r\n     */\r\n    public navigateToArticlesList(category: Category) {\r\n        const ids = [category.id];\r\n        if (category.parent_id) ids.push(category.parent_id);\r\n        this.storage.set('selectedCategories', ids);\r\n\r\n        this.router.navigate(['/help-center/manage/articles']);\r\n    }\r\n}\r\n","<div class=\"action-bar\">\r\n    <div class=\"nav\">\r\n        <a [routerLink]=\"'/help-center'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" [routerLinkActiveOptions]=\"{exact: true}\" trans>Home</a>\r\n        <a [routerLink]=\"'/help-center/manage/categories'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" trans>Categories</a>\r\n        <a [routerLink]=\"'/help-center/manage/articles'\" class=\"nav-item\" routerLinkActive=\"router-link-active\" trans>Articles</a>\r\n    </div>\r\n    <div class=\"actions\">\r\n        <div class=\"action\">\r\n            <button mat-icon-button (click)=\"toggleCategoryChildren()\" class=\"toggle-children-btn\" [class.active]=\"categoryChildrenVisible\" [matTooltip]=\"'Toggle child categories' | trans\">\r\n                <mat-icon svgIcon=\"unfold-more\"></mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"search-bar input-container\">\r\n            <input type=\"text\" placeholder=\"Search\" class=\"categories-search-input\" [formControl]=\"searchQuery\" trans-placeholder>\r\n            <mat-icon svgIcon=\"search\"></mat-icon>\r\n        </div>\r\n        <button class=\"new-category-button new-item-button\" (click)=\"showNewCategoryModal()\">\r\n            <mat-icon svgIcon=\"add\"></mat-icon> <span trans>New Category</span>\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container\">\r\n    <section class=\"categories-list\" cdkDropList (cdkDropListDropped)=\"reorderCategories($event)\" [cdkDropListDisabled]=\"shouldDisableReorder()\">\r\n        <div class=\"category-container\" *ngFor=\"let category of filteredCategories\">\r\n            <category-list-item\r\n                    cdkDrag\r\n                    [cdkDragData]=\"category\"\r\n                    class=\"category-list-item parent-category\"\r\n                    [category]=\"category\"\r\n                    (onChange)=\"updateCategories()\"\r\n                    [attr.data-id]=\"category.id\"\r\n            ></category-list-item>\r\n            <div class=\"category-children\" *ngIf=\"category.children.length\" [class.hidden]=\"!categoryChildrenVisible\" cdkDropList (cdkDropListDropped)=\"reorderCategories($event, category)\" [cdkDropListDisabled]=\"shouldDisableReorder()\">\r\n                <category-list-item\r\n                        cdkDrag\r\n                        [cdkDragData]=\"child\"\r\n                        class=\"category-list-item child-category\"\r\n                        *ngFor=\"let child of category.children\"\r\n                        [category]=\"child\"\r\n                        (onChange)=\"updateCategories()\"\r\n                        [attr.data-id]=\"child.id\"\r\n                ></category-list-item>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</div>","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {CategoryModalComponent} from '../category-modal/category-modal.component';\r\nimport {Category} from '../../../shared/models/Category';\r\nimport {CategoriesService} from '../../shared/categories.service';\r\nimport {CategoriesFilterer} from '../categories-filterer';\r\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n    selector: 'categories-list',\r\n    templateUrl: './categories-list.component.html',\r\n    styleUrls: ['./categories-list.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CategoriesListComponent implements OnInit {\r\n    public searchQuery = new FormControl();\r\n    public allCategories: Category[] = [];\r\n    public filteredCategories: Category[] = [];\r\n    public categoryChildrenVisible = true;\r\n\r\n    constructor(\r\n        public api: CategoriesService,\r\n        private modal: Modal\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.updateCategories();\r\n        this.bindSearchQuery();\r\n    }\r\n\r\n    public showNewCategoryModal() {\r\n        this.modal.show(CategoryModalComponent).\r\n            afterClosed()\r\n            .subscribe(category => {\r\n                if ( ! category) return;\r\n                this.updateCategories();\r\n            });\r\n    }\r\n\r\n    public updateCategories() {\r\n        this.api.getCategories().subscribe(response => {\r\n            this.filteredCategories = response.categories;\r\n            this.allCategories      = response.categories;\r\n            this.filterCategories(this.searchQuery.value);\r\n        });\r\n    }\r\n\r\n    private bindSearchQuery() {\r\n        this.searchQuery.valueChanges\r\n            .pipe(debounceTime(400), distinctUntilChanged())\r\n            .subscribe(query => this.filterCategories(query));\r\n    }\r\n\r\n    private filterCategories(searchQuery: string) {\r\n        this.filteredCategories = (new CategoriesFilterer).filter(searchQuery, this.allCategories);\r\n    }\r\n\r\n    public reorderCategories(e: CdkDragDrop<Category>, parent?: Category) {\r\n        const array = parent ? parent.children : this.filteredCategories;\r\n        moveItemInArray(array, e.previousIndex, e.currentIndex);\r\n        const ids = array.map(category => category.id);\r\n        this.api.reorderCategories(ids, parent ? parent.id : null).subscribe();\r\n    }\r\n\r\n    public toggleCategoryChildren() {\r\n        this.categoryChildrenVisible = !this.categoryChildrenVisible;\r\n    }\r\n\r\n    public shouldDisableReorder(): boolean {\r\n        return this.searchQuery.value;\r\n    }\r\n}\r\n","import {RouterModule} from '@angular/router';\r\nimport {NewArticleComponent} from './new-article/new-article.component';\r\nimport {NewArticleResolve} from './new-article/new-article-resolve.service';\r\nimport {ArticlesListComponent} from './articles-list/articles-list.component';\r\nimport {HelpCenterManageComponent} from './help-center-manage.component';\r\nimport {CategoriesListComponent} from './categories-list/categories-list.component';\r\nimport {AuthGuard} from '@common/guards/auth-guard.service';\r\n\r\nexport const routing = RouterModule.forChild([\r\n    {\r\n        path: '',\r\n        component: HelpCenterManageComponent,\r\n        canActivate: [AuthGuard],\r\n        children: [\r\n            {\r\n                path: '',\r\n                redirectTo: 'articles'\r\n            },\r\n            {\r\n                path: 'articles',\r\n                component: ArticlesListComponent,\r\n                data: {permissions: ['categories.view', 'tags.view', 'articles.view', 'articles.create']}\r\n            },\r\n            {\r\n                path: 'categories',\r\n                component: CategoriesListComponent,\r\n                data: {permissions: ['categories.view', 'categories.create']}\r\n            },\r\n            {\r\n                path: 'articles/new',\r\n                component: NewArticleComponent,\r\n                resolve: {data: NewArticleResolve},\r\n                data: {permissions: ['articles.create']}\r\n            },\r\n            {\r\n                path: 'articles/:article_id/edit',\r\n                component: NewArticleComponent,\r\n                resolve: {data: NewArticleResolve},\r\n                data: {permissions: ['articles.update']}\r\n            },\r\n        ]\r\n    },\r\n]);\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {RouterModule} from '@angular/router';\r\nimport {NewArticleComponent} from './new-article/new-article.component';\r\nimport {ArticlesListFiltersComponent} from './articles-list/articles-list-filters/articles-list-filters.component';\r\nimport {ArticlesListComponent} from './articles-list/articles-list.component';\r\nimport {ArticleSettingsModalComponent} from './new-article/article-settings-modal/article-settings-modal.component';\r\nimport {CategoriesManagerComponent} from './categories-manager/categories-manager.component';\r\nimport {HelpCenterManageComponent} from './help-center-manage.component';\r\nimport {CategoryModalComponent} from './category-modal/category-modal.component';\r\nimport {CategoriesListComponent} from './categories-list/categories-list.component';\r\nimport {CategoryListItemComponent} from './categories-list/category-list-item/category-list-item.component';\r\nimport {routing} from './help-center-manage.routing';\r\nimport {HelpCenterSharedModule} from '../shared/help-center-shared.module';\r\nimport {TextEditorModule} from '@common/text-editor/text-editor.module';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {MaterialNavbarModule} from '@common/core/ui/material-navbar/material-navbar.module';\r\nimport {TranslationsModule} from '@common/core/translations/translations.module';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {NoResultsMessageModule} from '@common/core/ui/no-results-message/no-results-message.module';\r\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {CustomScrollbarModule} from '@common/core/ui/custom-scrollbar/custom-scrollbar.module';\r\nimport {ReplyAttachmentListModule} from '../../shared/reply-attachment-list/reply-attachment-list.module';\r\nimport {TagsManagerModule} from '../../shared/tags-manager/tags-manager.module';\r\nimport {UploadsModule} from '@common/uploads/uploads.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        RouterModule,\r\n        TextEditorModule,\r\n        HelpCenterSharedModule,\r\n        MaterialNavbarModule,\r\n        TranslationsModule,\r\n        NoResultsMessageModule,\r\n        LoadingIndicatorModule,\r\n        CustomScrollbarModule,\r\n        ReplyAttachmentListModule,\r\n        TagsManagerModule,\r\n        UploadsModule,\r\n        routing,\r\n\r\n        // material\r\n        MatDialogModule,\r\n        MatPaginatorModule,\r\n        MatSlideToggleModule,\r\n        DragDropModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatTooltipModule,\r\n        MatCheckboxModule,\r\n    ],\r\n    declarations: [\r\n        HelpCenterManageComponent,\r\n        ArticlesListComponent,\r\n        ArticlesListFiltersComponent,\r\n        CategoriesManagerComponent,\r\n        NewArticleComponent,\r\n        CategoryModalComponent,\r\n        ArticleSettingsModalComponent,\r\n        CategoriesListComponent,\r\n        CategoryListItemComponent,\r\n    ],\r\n})\r\nexport class HcManageModule { }\r\n","/**\r\n * Download file from specified url.\r\n */\r\nexport function downloadFileFromUrl(url: string, name?: string) {\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    if (name) link.download = name;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n}\r\n","<default-preview *ngIf=\"fileTooLarge$ | async; else textPreview\" message=\"This file is too large to preview.\"></default-preview>\r\n<ng-template #textPreview>\r\n    <div class=\"text-wrapper preview-object\">\r\n        <pre>{{ content$ | async }}</pre>\r\n    </div>\r\n</ng-template>","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\nconst FIVE_MB = 5242880;\r\n\r\n@Component({\r\n    selector: 'text-preview',\r\n    templateUrl: './text-preview.component.html',\r\n    styleUrls: ['./text-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TextPreviewComponent extends BaseFilePreview implements OnInit {\r\n    public content$ = new BehaviorSubject('');\r\n    public fileTooLarge$ = new BehaviorSubject(false);\r\n\r\n    ngOnInit() {\r\n        if (this.file.file_size > FIVE_MB) {\r\n            this.fileTooLarge$.next(true);\r\n        } else {\r\n            this.loadFileContents();\r\n        }\r\n    }\r\n\r\n    private loadFileContents() {\r\n        this.getContents()\r\n            .subscribe(content => {\r\n                this.content$.next(content);\r\n            });\r\n    }\r\n}\r\n","<audio #playerEl controls=\"controls\" class=\"preview-object\" [class.hidden]=\"invalidMedia\" controlsList=\"nodownload noremoteplayback\"></audio>\r\n\r\n<default-preview *ngIf=\"invalidMedia\"></default-preview>","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\n@Component({\r\n    selector: 'audio-preview',\r\n    templateUrl: './audio-preview.component.html',\r\n    styleUrls: ['./audio-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AudioPreviewComponent extends BaseFilePreview implements OnInit {\r\n    @ViewChild('playerEl', { static: true }) playerEl: ElementRef;\r\n    public invalidMedia = false;\r\n\r\n    ngOnInit() {\r\n        this.invalidMedia = !this.canPlayVideo();\r\n\r\n        if ( ! this.invalidMedia) {\r\n            this.player().src = this.getSrc();\r\n            this.player().play();\r\n        }\r\n    }\r\n\r\n    protected canPlayVideo(): boolean {\r\n        return !!this.player().canPlayType(this.file.mime);\r\n    }\r\n\r\n    protected player() {\r\n        return this.playerEl.nativeElement as HTMLVideoElement|HTMLAudioElement;\r\n    }\r\n}\r\n","<video #playerEl controls=\"controls\" class=\"preview-object\" [class.hidden]=\"invalidMedia\" controlsList=\"nodownload noremoteplayback\"></video>\r\n\r\n<default-preview *ngIf=\"invalidMedia\"></default-preview>","import {ChangeDetectionStrategy, Component} from '@angular/core';\r\nimport {AudioPreviewComponent} from '../audio-preview/audio-preview.component';\r\n\r\n@Component({\r\n    selector: 'video-preview',\r\n    templateUrl: './video-preview.component.html',\r\n    styleUrls: ['./video-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VideoPreviewComponent extends AudioPreviewComponent {\r\n}\r\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\n@Component({\r\n    selector: 'image-preview',\r\n    templateUrl: './image-preview.component.html',\r\n    styleUrls: ['./image-preview.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ImagePreviewComponent extends BaseFilePreview {}\r\n","import {ChangeDetectionStrategy, Component, HostBinding,} from '@angular/core';\r\nimport {BaseFilePreview} from '../base-file-preview';\r\n\r\n@Component({\r\n  selector: 'pdf-preview',\r\n  templateUrl: './pdf-preview.component.html',\r\n  styleUrls: ['./pdf-preview.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PdfPreviewComponent extends BaseFilePreview {\r\n    @HostBinding('class') className = 'preview-object';\r\n\r\n    public getSrc() {\r\n        return super.getSrc() + '#toolbar=0';\r\n    }\r\n}\r\n","<img [src]=\"getSafeSrc()\" class=\"preview-object\">","<iframe [src]=\"getSafeSrc()\"></iframe>","<ng-container *ngIf=\"!(showDefaultPreview$ | async); else defaultPreview\">\r\n    <iframe class=\"preview-object\" #iframe></iframe>\r\n    <div class=\"pop-out-block\" (click)=\"openInNewWindow()\"></div>\r\n</ng-container>\r\n<ng-template #defaultPreview>\r\n    <default-preview></default-preview>\r\n</ng-template>\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, ViewChild } from '@angular/core';\nimport { BaseFilePreview } from '../base-file-preview';\nimport { BehaviorSubject } from 'rxjs';\nimport { GenericBackendResponse } from '@common/core/types/backend-response';\nimport { isAbsoluteUrl } from '@common/core/utils/is-absolute-url';\n\n@Component({\n    selector: 'google-docs-viewer',\n    templateUrl: './google-docs-viewer.component.html',\n    styleUrls: ['./google-docs-viewer.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GoogleDocsViewerComponent extends BaseFilePreview implements AfterViewInit {\n    @ViewChild('iframe') iframe: ElementRef<HTMLIFrameElement>;\n    public loading$ = new BehaviorSubject(true);\n    public showDefaultPreview$ = new BehaviorSubject(false);\n    private timeoutRef: number;\n\n    ngAfterViewInit() {\n        // google docs viewer only supports file up to 25MB\n        if (this.file.file_size > 25000000) {\n            return this.showDefaultPreview();\n        }\n\n        this.iframe.nativeElement.onload = () => {\n            clearTimeout(this.timeoutRef);\n            this.stopLoading();\n        };\n\n        this.getIframeSrc().then(url => {\n            this.iframe.nativeElement.src = url;\n        }).catch(() => {\n            this.showDefaultPreview();\n        });\n\n        // if google docs preview iframe is not loaded\n        // after 6 seconds, bail and show default preview\n        this.timeoutRef = setTimeout(() => {\n            this.showDefaultPreview();\n        }, 5000);\n    }\n\n    public stopLoading() {\n        this.loading$.next(false);\n    }\n\n    public showDefaultPreview() {\n        this.stopLoading();\n        this.showDefaultPreview$.next(true);\n    }\n\n    public openInNewWindow() {\n        window.open(window.location.href, '_blank');\n    }\n\n    private getIframeSrc(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            let previewUrl = this.getSrc();\n\n            // if we're not trying to preview shareable link we will need to generate\n            // preview token, otherwise google won't be able to access this file\n            if (previewUrl.indexOf('shareable_link') === -1) {\n                this.http.post<GenericBackendResponse<{preview_token: string}>>(`uploads/${this.file.id}/add-preview-token`).subscribe(response => {\n                    previewUrl += `?preview_token=${response.preview_token}`;\n                    resolve(this.getGoogleDocsUrl(previewUrl));\n                }, () => reject);\n            } else {\n                resolve(this.getGoogleDocsUrl(previewUrl));\n            }\n        });\n    }\n\n    private getGoogleDocsUrl(previewUrl: string) {\n        previewUrl = isAbsoluteUrl(previewUrl) ? previewUrl : this.settings.getBaseUrl() + previewUrl;\n        return 'https://docs.google.com/gview?embedded=true&url=' + encodeURIComponent(previewUrl);\n    }\n}\n","import { InjectionToken, Injectable } from '@angular/core';\r\nimport { TextPreviewComponent } from './text-preview/text-preview.component';\r\nimport { VideoPreviewComponent } from './video-preview/video-preview.component';\r\nimport { ImagePreviewComponent } from './image-preview/image-preview.component';\r\nimport { PdfPreviewComponent } from './pdf-preview/pdf-preview.component';\r\nimport { AudioPreviewComponent } from './audio-preview/audio-preview.component';\r\nimport { GoogleDocsViewerComponent } from './google-docs-viewer/google-docs-viewer.component';\r\n\r\nexport const AVAILABLE_PREVIEWS = new InjectionToken<any>('AVAILABLE_PREVIEWS');\r\n\r\n@Injectable()\nexport class DefaultPreviews {\r\n    text = TextPreviewComponent;\r\n    video = VideoPreviewComponent;\r\n    audio = AudioPreviewComponent;\r\n    image = ImagePreviewComponent;\r\n    pdf = PdfPreviewComponent;\r\n    spreadsheet = GoogleDocsViewerComponent;\r\n    powerPoint = GoogleDocsViewerComponent;\r\n    word = GoogleDocsViewerComponent;\r\n}\r\n\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnInit,\r\n    Output,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Tag} from '../models/Tag';\r\nimport {TagService} from '../tag.service';\r\nimport {FormControl} from '@angular/forms';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n\r\n@Component({\r\n    selector: 'tags-manager',\r\n    templateUrl: './tags-manager.component.html',\r\n    styleUrls: ['./tags-manager.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TagsManagerComponent implements OnInit {\r\n    @Output() public onChange: EventEmitter<string[]> = new EventEmitter();\r\n    @Input() public selectedTags: string[] = [];\r\n    @Input() public readonly = false;\r\n\r\n    public formControl = new FormControl();\r\n    public allTags$ = new BehaviorSubject<Tag[]>([]);\r\n    public suggestedTags$ = new BehaviorSubject<Tag[]>([]);\r\n\r\n    constructor(private tagService: TagService) {}\r\n\r\n    ngOnInit() {\r\n        this.tagService.getTags({perPage: 15}).subscribe(response => {\r\n            this.allTags$.next(response.pagination.data.filter(tag => tag.type !== 'status'));\r\n        });\r\n        this.formControl.valueChanges.subscribe(q => {\r\n            const suggestions = q ?\r\n                this.allTags$.value.filter(t => t.name.toLowerCase().includes(q.toLowerCase())) :\r\n                [];\r\n            this.suggestedTags$.next(suggestions);\r\n        });\r\n    }\r\n\r\n    public getSelectedTags(): string[] {\r\n        return this.selectedTags.slice();\r\n    }\r\n\r\n    public setSelectedTags(tags: string[]) {\r\n        return this.selectedTags = tags;\r\n    }\r\n\r\n    public addTags(tags?: string) {\r\n        tags = tags || this.formControl.value;\r\n        if ( ! tags) return;\r\n\r\n        const tagsArray = tags.split(',');\r\n\r\n        tagsArray.forEach(name => {\r\n            const tagName = name.trim();\r\n\r\n            if (this.selectedTags.indexOf(tagName) === -1) {\r\n                this.selectedTags.push(tagName);\r\n            }\r\n        });\r\n\r\n        this.formControl.reset();\r\n        this.onChange.emit(this.selectedTags);\r\n    }\r\n\r\n    public addTag(tagName: string) {\r\n        if (this.selectedTags.indexOf(tagName) === -1) {\r\n            this.selectedTags.push(tagName);\r\n            this.onChange.emit(this.selectedTags);\r\n        }\r\n    }\r\n\r\n    public removeTag(tagName: string) {\r\n        const index = this.selectedTags.indexOf(tagName);\r\n        this.selectedTags.splice(index, 1);\r\n        this.onChange.emit(this.selectedTags);\r\n    }\r\n\r\n    public deselectAll() {\r\n        this.selectedTags = [];\r\n        this.onChange.emit(this.selectedTags);\r\n    }\r\n}\r\n","<form class=\"input-container input-group\" *ngIf=\"!readonly\" ngNativeValidate (ngSubmit)=\"addTags()\">\r\n    <input type=\"text\" name=\"tag-input\" class=\"tags-string-model\" [matAutocomplete]=\"auto\" [formControl]=\"formControl\" required>\r\n    <button type=\"submit\" class=\"add-tags-button\" mat-flat-button color=\"accent\" trans>Add</button>\r\n</form>\r\n\r\n<p class=\"main-info\" *ngIf=\"!readonly\" trans>Separate tags with comma.</p>\r\n\r\n<div class=\"selected-tags\">\r\n    <mat-chip-list [selectable]=\"false\">\r\n        <mat-chip (removed)=\"removeTag(tag)\" [removable]=\"!readonly\" *ngFor=\"let tag of selectedTags\">\r\n            <span>{{tag}}</span>\r\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\r\n        </mat-chip>\r\n    </mat-chip-list>\r\n</div>\r\n\r\n<div class=\"existing-tags\" *ngIf=\"!readonly && (allTags$ | async).length\">\r\n    <p trans>Choose from existing tags:</p>\r\n    <div class=\"tags-list\">\r\n        <div class=\"tag-name\" *ngFor=\"let tag of allTags$ | async\" (click)=\"addTag(tag.name)\">{{tag.display_name}}</div>\r\n    </div>\r\n</div>\r\n\r\n<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"addTags($event.option.value)\">\r\n    <mat-option *ngFor=\"let tag of suggestedTags$ | async\" [value]=\"tag.name\">{{tag.display_name}}</mat-option>\r\n</mat-autocomplete>\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TagsManagerComponent} from './tags-manager.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\n\n\n@NgModule({\n    declarations: [\n        TagsManagerComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        TranslationsModule,\n\n        // material\n        MatChipsModule,\n        MatIconModule,\n        MatButtonModule,\n        MatAutocompleteModule,\n    ],\n    exports: [\n        TagsManagerComponent,\n    ]\n})\nexport class TagsManagerModule {\n}\n"]}