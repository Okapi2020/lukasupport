{"version":3,"sources":["webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme.service.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.component.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service.ts","webpack:///src/common/core/ui/custom-menu/menu-item.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.ts","webpack:///src/common/shared/icon-selector/icon-selector.component.html","webpack:///src/common/shared/icon-selector/icon-selector.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.html","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.html","webpack:///src/common/admin/appearance/appearance.component.html","webpack:///src/common/admin/appearance/appearance.component.ts","webpack:///src/common/admin/appearance/can-deactivate-appearance.guard.ts","webpack:///src/common/admin/appearance/appearance-editor/appearance-editor-resolver.service.ts","webpack:///src/common/admin/appearance/appearance-routing.module.ts","webpack:///src/common/shared/icon-selector/icon-selector.module.ts","webpack:///src/common/admin/appearance/base-appearance.module.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.module.ts","webpack:///src/app/admin/appearance/app-appearance.module.ts","webpack:///src/common/core/ui/overlay-panel/positions/right-position.ts"],"names":["GeneralAppearancePanelComponent","CssThemeService","fb","editor","form","this","group","defaults","Object","keys","controls","forEach","key","currentValue","patchValue","valueChanges","subscribe","value","addChanges","defaultSettings","http","get","params","post","id","put","ids","delete","CrupdateCssThemeModalComponent","ColorPickerInputComponent","dialogRef","data","cssTheme","toast","loading$","BehaviorSubject","errors$","name","is_dark","default_dark","default_light","theme","pipe","filter","setValue","update","create","response","open","close","err","next","messages","overlayPanel","color$","pickerSub","unsubscribe","fn","propagateChange","e","BeColorPickerModule","components","panel","origin","target","position","color","valueChanged","provide","useExisting","multi","openColorPicker","CssThemeColorsPanelComponent","themes","colorCache","setSaveRequest","saveColors","bind","entries","colors","addControl","initiated$","setColors","payload","postMessage","replace","$event","stopPropagation","ThemesAppearancePanelComponent","MenuEditor","MenuItemCategoriesService","appearance","modal","router","route","loadedThemes$","selectedTheme$","path$","map","path","push","reloadThemes","querySub","afterClosed","newTheme","navigate","queryParams","queryParamsHandling","setSelectedTheme","closeActivePanel","show","title","body","ok","confirmed","deleteTheme","all","finalize","pagination","bindToQueryParams","find","t","openPreviousPanel","MenuItem","type","order","condition","activeExact","Math","floor","random","settings","allMenus$","activeMenu$","allMenus","commitChanges","previousIndex","currentIndex","activeMenu","items","i","indexOf","splice","item","transformLocalLinksToRoutes","baseUrl","getBaseUrl","action","menus","JSON","stringify","setConfig","json","parse","menuData","menu","getWithCache","AddMenuItemPanelComponent","overlayPanelRef","itemCategories","linkForm","label","menuItemCategories","categories","addItem","reset","addLinkMenuItem","IconSelectorComponent","icons$","iconSelected","icons","icon","observers","length","emitValue","MenuItemsComponent","cd","subscriptions","subscription","reorderActiveMenuItems","selectedMenuItem","removeItem","menuItem","detectChanges","MenusAppearancePanelComponent","el","setFromJson","slice","offsetX","panelClass","deleteActive","SeoAppearancePanelComponent","seoFields","field","control","CodeEditorModalComponent","CustomCodeAppearancePanelComponent","lazyLoader","syntaxInvalid$","initEditor","contents","language","overrideDialogCloseEvents","getValue","loadAsset","then","ace","edit","editorEl","nativeElement","getSession","setMode","setTheme","$blockScrolling","Infinity","on","annotations","getAnnotations","test","text","setAnnotations","syntaxInvalid","a","disableClose","backdropClick","keydownEvents","event","keyCode","confirm","initialValue","newValue","saveChanges","addCodeToPreview","content","openModal","CanDeactivateAppearance","AppearanceComponent","AppearanceEditorResolver","AppearanceRoutingModule","IconSelectorModule","BaseAppearanceModule","ColorPickerInputModule","breakpoints","leftColumnIsHidden","panelPortal$","activePanel$","component","isMobile$","init","iframe","snapshot","routerSub","openPanel","str","closeEditor","toggleLeftSidebar","changes$","bodyBold","cancel","routes","permissions","resolve","state","catchError","mergeMap","of","canActivate","canDeactivate","children","forChild","AppAppearanceModule","RIGHT_POSITION","originX","originY","overlayX","overlayY"],"mappings":"0qDAWaA,ECAAC,E,gODAN,IAAMD,EAAN,WASH,WACYE,EACDC,2BADC,KAAAD,KACD,KAAAC,SAVJ,KAAAC,KAAOC,KAAKH,GAAGI,MAAM,CACxB,sBAAuB,CAAC,IACxB,qBAAsB,CAAC,IACvB,mBAAoB,CAAC,IACrB,eAAgB,CAAC,IACjB,4BAA6B,CAAC,MAN/B,wDAcO,WACAC,EAAW,GACjBC,OAAOC,KAAKJ,KAAKD,KAAKM,UAAUC,SAAQC,YACtCL,EAASK,GAAOP,EAAKF,OAAOU,aAAaD,MAE3CP,KAAKD,KAAKU,WAAWP,GAErBF,KAAKD,KAAKW,aAAaC,WAAUC,YAC7BZ,EAAKF,OAAOe,WAAWD,QAtB5B,mCA0BiBL,GAChB,OAAOP,KAAKF,OAAOgB,gBAAgBP,OA3BpC,M,oCAAMZ,GAA+B,sB,uBAA/BA,EAA+B,q1BEX5C,kCAA4C,gCAAQ,EAAAG,OAAA,sBAA2B,OAE/E,gBACI,mCACI,qCACJ,OAEA,mCACI,sCACJ,OAEA,mCACI,oBACJ,OAEA,gBACI,kBAAgC,qBAAS,OACzC,mBACJ,OAEA,iBACI,mBAA6C,4BAAgB,OAC7D,sBACJ,OACJ,Q,MAxBuB,uBAElB,iCACuB,mEAIA,kEAIA,gEAMiB,2DAKI,0E,oIDX1C,IAAMF,EAAN,WACH,WAAoBmB,2BAAA,KAAAA,OADjB,mDAIC,OAAOf,KAAKe,KAAKC,IATR,eAKV,6BAOWC,GACV,OAAOjB,KAAKe,KAAKG,KAbR,YAauBD,KARjC,6BAWWE,EAAIF,GACd,OAAOjB,KAAKe,KAAKK,IAAVpB,oBAA6BmB,GAAMF,KAZ3C,6BAeWI,GACV,OAAOrB,KAAKe,KAAKO,OAAVtB,oBAAgCqB,QAhBxC,M,oCAAMzB,GAAe,Y,yBAAfA,EAAe,QAAfA,EAAe,qBAFZ,S,qCEPR,iBAA+B,uBAAY,Q,sBAC3C,iBAAgC,uBAAY,Q,yBAYxC,iBAAuC,QAAe,Q,uBAAf,sB,sBAsBvC,eAAwC,iBAAM,Q,sBAE1C,eAAM,iBAAM,Q,qCA7B5B,iBAAM,gEACF,+BACI,gBACI,mBAAwB,eAAI,OAC5B,mBACA,uBACJ,OAEA,iBACI,8BAA+D,qBAAU,OACzE,eAAS,iEAAqD,OAClE,OAEA,kBACI,+BAAyE,8BAAkB,OAC3F,eAAS,oEAAwD,OACrE,OAEA,kBACI,+BAA2E,+BAAmB,OAC9F,eAAS,qEAAyD,OACtE,OACJ,OAEA,8BACI,qBAAQ,2DAAiD,kBAAM,OAC/D,qB,iBACI,yBACA,0CAGJ,OACJ,OACJ,O,yCAjC8C,yBAKf,4BAqBgC,gDAC7C,kCAAiC,eClB5C,IAAM2B,ECFAC,EDEN,IAAMD,EAAN,WAUH,WACYE,EACwBC,EACxBC,EACAC,EACA/B,sCAJA,KAAA4B,YACwB,KAAAC,OACxB,KAAAC,WACA,KAAAC,QACA,KAAA/B,KAdL,KAAAgC,SAAW,IAAIC,EAAA,MACf,KAAAC,QAAU,IAAID,EAAA,EAA0D,IACxE,KAAA/B,KAAOC,KAAKH,GAAGI,MAAM,CACxB+B,KAAM,CAAC,IACPC,QAAS,EAAC,GACVC,aAAc,EAAC,GACfC,cAAe,EAAC,KAUZT,EAAKU,OACLpC,KAAKD,KAAKU,WAAWiB,EAAKU,OAK9BpC,KAAKD,KAAKiB,IAAI,gBACTN,aACA2B,KAAK,OAAAC,EAAA,IAAO1B,YAAKA,QAAMA,MACvBD,WAAU,WACPX,EAAKD,KAAKiB,IAAI,iBAAiBuB,UAASA,MAEhDvC,KAAKD,KAAKiB,IAAI,iBACTN,aACA2B,KAAK,OAAAC,EAAA,IAAO1B,YAAKA,QAAMA,MACvBD,WAAU,WACPX,EAAKD,KAAKiB,IAAI,gBAAgBuB,UAASA,MAjChD,uDAqCa,YACIvC,KAAK0B,KAAKU,MACtBpC,KAAK2B,SAASa,OAAOxC,KAAK0B,KAAKU,MAAMjB,GAAInB,KAAKD,KAAKa,OACnDZ,KAAK2B,SAASc,OAAOzC,KAAKD,KAAKa,QAE3BD,WAAU+B,YACd1C,EAAK4B,MAAMe,KAAK3C,EAAK0B,KAAKU,MAAQ,gBAAkB,iBACpDpC,EAAK4C,MAAMF,EAASN,UACrBS,YAAGA,OAAI7C,EAAK+B,QAAQe,KAAKD,EAAIE,eA7CjC,4BAgDUX,GACTpC,KAAKyB,UAAUmB,MAAMR,OAjDtB,M,oCAAMb,GAA8B,eAY3B,KAAe,8B,uBAZlBA,EAA8B,27BDnB3C,gBACI,eACI,uBACA,uBACJ,OACA,mBAAsB,iCAAS,EAAAqB,WAC3B,qBACJ,OACJ,OAEA,wB,uBARc,kCACA,mCAOmD,2C,sREO1D,IAAMpB,EAAN,WAKH,WACYwB,2BAAA,KAAAA,eAHL,KAAAC,OAAS,IAAInB,EAAA,EAAgB,MAHjC,2DAUC9B,KAAKkD,WAAalD,KAAKkD,UAAUC,gBAVlC,iCAaevC,GACdZ,KAAKiD,OAAOH,KAAKlC,KAdlB,uCAiBqBwC,GACpBpD,KAAKqD,gBAAkBD,IAlBxB,mFAuB0BE,G,2KACjBC,O,SAA8B,iC,gBAA9BA,E,EAAF,oBACNvD,KAAKkD,UAAYlD,KAAKgD,aAAaL,KAC/BY,EAAoBC,WAAWC,MAC/B,CACIC,OAAQ,IAAI,IAAWJ,EAAEK,QACzBC,SAAU,IACVlC,KAAM,CAACmC,MAAO7D,KAAKiD,OAAOrC,SAEhCkD,eAAenD,WAAUkD,YACvB7D,EAAKiD,OAAOH,KAAKe,GACjB7D,EAAKqD,gBAAgBrD,EAAKiD,OAAOrC,U,oDAlCtC,M,oCAAMY,GAAyB,Y,uBAAzBA,EAAyB,kDANvB,CAAC,CACRuC,QAAS,IACTC,YAAaxC,EACbyC,OAAMA,MACR,6N,OCfN,mBAAwD,iCAAS,EAAAC,gBAAA,MAC7D,qB,gBAAkF,OAClF,iBAAyB,QAAyB,OAClD,iBAA2B,iBAAM,OACrC,Q,MAHuD,2C,40BCAnD,aACI,+BAAwD,QAAuB,OACnF,Q,gCADwB,sCAAoC,iCCWzD,IAAMC,EAAN,IAAMA,EAAN,WAKH,WACYrE,EACAsE,2BADA,KAAAtE,SACA,KAAAsE,SALL,KAAArE,KAAO,IAAI,IAAU,IACpB,KAAAsE,WAA6B,GAHlC,wDAUO,WACNrE,KAAKF,OAAOwE,eAAetE,KAAKuE,WAAWC,KAAKxE,OAGhDG,OAAOsE,QAAQzE,KAAKoC,MAAMsC,QAAQpE,SAAQ,YAAQuD,0BAAN7B,EAAM6B,YAC9C7D,EAAKD,KAAK4E,WAAW3C,EAAM,IAAI,IAAY6B,OAG/C7D,KAAKF,OAAO8E,WAAWjE,WAAU,WAC7BX,EAAK6E,UAAU7E,EAAKoC,MAAMsC,QAC1B1E,EAAKD,KAAKW,aAAaC,WAAWC,YAC9BZ,EAAK6E,UAAUjE,GACfZ,EAAKF,OAAOe,WAAW,CAAC,OAAUD,YAtB3C,oCA4BCZ,KAAKF,OAAOwE,eAAe,QA5B5B,iCA+BgBQ,GACf,OAAO9E,KAAKoE,OAAO5B,OAAOxC,KAAKoC,MAAMjB,GAAI2D,KAhC1C,gCAmCeJ,cACdvE,OAAOsE,QAAQC,GAAQpE,SAAQ,YAAQuD,0BAAN7B,EAAM6B,YAG/B7D,EAAKqE,WAAWrC,KAAU6B,IAC1B7D,EAAKF,OAAOiF,YAAY,IAAI,IAAU/C,EAAM6B,IAC5C7D,EAAKqE,WAAWrC,GAAQ6B,QAzCjC,+BA8Ca7B,GACZ,OAAOA,EAAKgD,QAAQ,MAAO,IAAIA,QAAQ,KAAM,SA/C9C,M,oCAAMb,GAA4B,oB,uBAA5BA,EAA4B,0LDbzC,eACI,qB,mBAGJ,Q,MAJI,yBACI,mD,2GEEJ,mC,KACQ,a,6CAOA,eAAiE,0FAC7D,gBAAkB,QAAc,OAChC,iBAAqB,yCAASc,EAAOC,qBACjC,oBAAsC,0FAClC,sBACJ,OACA,oBAAsC,gGAClC,sBACJ,OACA,oBAAsC,+FAClC,sBACJ,OACJ,OACJ,O,0BAZsB,sB,qCAH1B,mBAAgF,4EAAyC,oBAAS,OAClI,aACI,sB,gBAcJ,O,qBAdyB,mDCO1B,IAAMC,GCPAC,GCHAC,GFUN,KAAMF,GAAN,WAYH,WACWG,EACCC,EACAnB,EACAxC,EACA4D,EACAC,2BALD,KAAAH,aACC,KAAAC,QACA,KAAAnB,SACA,KAAAxC,QACA,KAAA4D,SACA,KAAAC,QAjBL,KAAA5D,SAAW,IAAIC,EAAA,MACf,KAAA4D,cAAgB,IAAI5D,EAAA,EAA4B,IAChD,KAAA6D,eAAiB,IAAI7D,EAAA,EAA0B,MAG/C,KAAA8D,MAAQ5F,KAAK2F,eAAetD,KAAK,OAAAwD,EAAA,IAAIzD,YACxC,IAAM0D,EAAO,CAAC,UAEd,OADI1D,GAAO0D,EAAKC,KAAK3D,EAAMJ,MACpB8D,MATR,wDAsBC9F,KAAKgG,iBAtBN,oCA0BChG,KAAKiG,UAAYjG,KAAKiG,SAAS9C,gBA1BhC,6CA6B2Bf,cAC1BpC,KAAKuF,MAAM5C,KAAK,EAAgC,CAACP,UAC5C8D,cACAvF,WAAUwF,YACHA,GACAnG,EAAKgG,oBAlClB,uCAuCqB5D,GACpBpC,KAAKwF,OAAOY,SAAS,GAAI,CAACC,YAAa,CAACjE,MAAOA,GAASA,EAAMjB,IAAKmF,oBAAqB,YAxCzF,0CA4CKtG,KAAK2F,eAAe/E,MACpBZ,KAAKuG,mBAELvG,KAAKsF,WAAWkB,qBA/CrB,4CAmD0BpE,cACzBpC,KAAKuF,MAAMkB,KAAK,IAAuB,CACnCC,MAAO,eACPC,KAAO,8CACPC,GAAO,WACRV,cAAcvF,WAAUkG,YAChBA,GACP7G,EAAK8G,YAAY1E,QA1DtB,qCA8DmB,WAClBpC,KAAK6B,SAASiB,MAAKA,GACnB9C,KAAKoE,OAAO2C,MACP1E,KAAK,OAAA2E,EAAA,IAAS,kBAAMhH,EAAK6B,SAASiB,MAAKA,OACvCnC,WAAU+B,YACP1C,EAAK0F,cAAc5C,KAAKJ,EAASuE,WAAWvF,MAC5C1B,EAAKkH,yBApEd,kCAwEiB9E,cAChBpC,KAAKoE,OAAO9C,OAAO,CAACc,EAAMjB,KAAKR,WAAU,WACrCX,EAAK4B,MAAMe,KAAK,iBAChB3C,EAAKgG,oBA3EV,0CA+EwB,WACnBhG,KAAKiG,WACTjG,KAAKiG,SAAWjG,KAAKyF,MAAMY,YAAY1F,WAAWM,YAC9C,IAAMmB,EAAQpC,EAAK0F,cAAc9E,MAAMuG,MAAKC,YAACA,OAAIA,EAAEjG,MAAQF,EAAOmB,SAClEpC,EAAK2F,eAAe7C,KAAKV,WAnF9B,M,oCAAM+C,IAA8B,4D,wBAA9BA,GAA8B,2jB,GAAA,MDlB3C,kCAA8C,gCAAQ,EAAAkC,uB,gBAAqB,OAE3E,gBACI,yC,gBAKA,wCAmBJ,OAEA,8B,oCA7BuB,+BAKX,gDAA+D,cAwBxD,iD,gKI7BNC,GAgBT,aAA2C,IAA/BrG,EAA+B,uDAAH,GACpC,IAAK,IAAMe,KAD4B,wBAR3C,KAAAuF,KAAkC,OAClC,KAAAC,MAAQ,EAER,KAAAC,UAA+B,KAC/B,KAAA9D,OAAiB,KACjB,KAAAC,SAAW,EACX,KAAA8D,eAGuBzG,EACfjB,KAAKgC,GAAQf,EAAOe,GAExBhC,KAAKmB,GAAKwG,KAAKC,MAAsB,IAAhBD,KAAKE,W,uCFT3B,KAAMzC,GAAN,WAIH,WACY0C,EACAxC,2BADA,KAAAwC,WACA,KAAAxC,aALL,KAAAyC,UAAY,IAAIjG,EAAA,EAAyB,IACzC,KAAAkG,YAAc,IAAIlG,EAAA,EAAsB,MAF5C,sDAUC,IAAMmG,EAAQA,mBAAOjI,KAAK+H,UAAUnH,OACpCZ,KAAKgI,YAAYlF,KAAK,IAAI,KAAK,CAACd,KAAM,cACtCiG,EAASlC,KAAK/F,KAAKgI,YAAYpH,OAC/BZ,KAAK+H,UAAUjF,KAAKmF,GACpBjI,KAAKkI,kBAdN,6CAiB2BC,EAAuBC,GACjD,IAAMC,EAAa,OAAH,UAAOrI,KAAKgI,YAAYpH,OACxC,aAAgByH,EAAWC,MAAOH,EAAeC,GACjDpI,KAAKgI,YAAYlF,KAAKuF,GACtBrI,KAAKkI,kBArBN,qCAyBC,IAAMD,EAAQA,mBAAOjI,KAAK+H,UAAUnH,OAC9B2H,EAAIN,EAASO,QAAQxI,KAAKgI,YAAYpH,OAC5CqH,EAASQ,OAAOF,EAAG,GACnBvI,KAAKgI,YAAYlF,KAAK,MACtB9C,KAAK+H,UAAUjF,KAAKmF,GACpBjI,KAAKkI,kBA9BN,8BAiCYQ,GACX,IAAML,EAAa,OAAH,UAAOrI,KAAKgI,YAAYpH,OACxC8H,EAAO1I,KAAK2I,4BAA4BD,GACxCL,EAAWC,MAAMvC,KAAK2C,GACtB1I,KAAKgI,YAAYlF,KAAKuF,GACtBrI,KAAKkI,kBAtCN,iCAyCeQ,GACd,IAAML,EAAa,OAAH,UAAOrI,KAAKgI,YAAYpH,OAClC2H,EAAIvI,KAAKgI,YAAYpH,MAAM0H,MAAME,QAAQE,GAC/CL,EAAWC,MAAMG,OAAOF,EAAG,GAC3BvI,KAAKgI,YAAYlF,KAAKuF,GACtBrI,KAAKkI,kBA9CN,kDAiDiCQ,GAChC,IAAME,EAAU5I,KAAK8H,SAASe,aAE9B,MAAkB,SAAdH,EAAKnB,OAAqD,IAAlCmB,EAAKI,OAAON,QAAQI,GAAwBF,GAExEA,EAAKnB,KAAO,QACZmB,EAAKI,OAASJ,EAAKI,OAAO9D,QAAQhF,KAAK8H,SAASe,aAAc,IACvDH,KAxDR,sCA4DC,IAAMK,EAAQC,KAAKC,UAAUjJ,KAAK+H,UAAUnH,OAC5CZ,KAAKsF,WAAW4D,UAAU,QAASH,GACnC/I,KAAKsF,WAAWzE,WAAW,CAAC,MAASkI,MA9DtC,kCAiEgBI,GACf,GAAOA,EAAP,CACA,IAAMJ,EAAQC,KAAKI,MAAMD,GAEzB,GAAOJ,EAAP,CAEA,IAAMd,EAAWc,EAAMlD,KAAIwD,YACvB,IAAMC,EAAO,IAAI,KAAKD,GAEtB,OADAC,EAAKhB,MAAQgB,EAAKhB,MAAMzC,KAAI6C,YAAIA,OAAI,IAAIpB,GAASoB,MAC1CY,KAEXtJ,KAAK+H,UAAUjF,KAAKmF,SA5ErB,M,oCAAM7C,IAAU,uB,0BAAVA,GAAU,QAAVA,GAAU,qBAFP,S,8BCDT,KAAMC,GAAN,WACH,WAAoBtE,2BAAA,KAAAA,OADjB,mDAIC,OAAOf,KAAKe,KAAKwI,aAAa,wCAJ/B,M,oCAAMlE,IAAyB,a,0BAAzBA,GAAyB,QAAzBA,GAAyB,qBAFtB,S,uDEqBA,iBACK,yFAAkC,QACvC,O,0BADuC,wB,sCAOvC,iBAAsD,2FAAkC,QAAc,O,0BAAd,uB,0BAHhG,gCACI,qCAA4B,4BAAuB,QAAiB,OAAkB,OACtF,iBACI,wBACJ,OACJ,Q,uBAJuD,qBAE7B,iCCpB3B,IAAMmE,GAAN,KAAMA,GAAN,WAOH,WACW1J,EACAwF,EACCmE,EACA5J,EACA6J,2BAJD,KAAA5J,SACA,KAAAwF,aACC,KAAAmE,kBACA,KAAA5J,KACA,KAAA6J,iBAXL,KAAAC,SAAW3J,KAAKH,GAAGI,MAAM,CAC5B6I,OAAQ,CAAC,IACTc,MAAO,CAAC,MAHT,wDAeO,WACN5J,KAAK0J,eAAe1I,MAAML,WAAU+B,YAChC1C,EAAK6J,mBAAqBnH,EAASoH,gBAjBxC,wCAsBC9J,KAAKF,OAAOiK,QAAQ,IAAIzC,GAAS,CAC7BC,KAAM,OACNqC,MAAO5J,KAAK2J,SAAS/I,MAAMgJ,MAC3Bd,OAAQ9I,KAAK2J,SAAS/I,MAAMkI,UAGhC9I,KAAK2J,SAASK,QACdhK,KAAK4C,UA7BN,uCAgCqB6C,GACpBzF,KAAKF,OAAOiK,QAAQ,IAAIzC,GAAS,CAC7BC,KAAM,QACNqC,MAAOnE,EACPqD,OAAQrD,KAEZzF,KAAK4C,UAtCN,wCAyCsB8F,GACrB1I,KAAKF,OAAOiK,QAAQ,IAAIzC,GAASoB,IACjC1I,KAAK4C,UA3CN,8BA+CC5C,KAAKyJ,gBAAgB7G,YA/CtB,M,oCAAM4G,IAAyB,mD,wBAAzBA,GAAyB,qxBDftC,gBACI,iBAA0B,wBAAa,OACvC,qBAA0B,iCAAS,EAAA5G,WAAS,OAChD,OACA,gBACI,wBACI,iBAAM,oCAAY,EAAAqH,qBACd,gCACI,qCAA4B,4BAAuB,gBAAI,OAAkB,OACzE,iBACI,iBACI,mBAAqC,eAAG,OACxC,oBACJ,OACA,iBACI,oBAAsC,qBAAS,OAC/C,oBACJ,OACJ,OACA,0BACI,qBAAsD,eAAG,OAC7D,OACJ,OACJ,OACA,iCACI,sCAA4B,6BAAuB,iBAAK,OAAkB,OAC1E,kBACI,yBAGJ,OACJ,OACA,yCAMJ,OACJ,Q,MAjC6C,qCAqBX,mEAKmB,+C,g7CEhCrD,mBAAwB,mFACtB,qBACF,O,0BADY,2BCYL,IAAMC,GAAN,KAAMA,GAAN,WAMH,WACYnJ,EACA0I,2BADA,KAAA1I,OACA,KAAA0I,kBAPL,KAAAU,OAAoC,IAAIrI,EAAA,EAAgB,IACxD,KAAAD,SAAqC,IAAIC,EAAA,MAEtC,KAAAsI,aAAe,IAAI,IAJ1B,wDAWO,WACNpK,KAAK6B,SAASiB,MAAKA,GACnB9C,KAAKe,KAAKC,IAA+C,eACpDqB,KAAK,OAAA2E,EAAA,IAAS,kBAAMhH,EAAK6B,SAASiB,MAAKA,OACvCnC,WAAU+B,YACP1C,EAAKmK,OAAOrH,KAAKJ,EAAS2H,YAhBnC,iCAoBeC,GAEVtK,KAAKoK,aAAaG,UAAUC,OAC5BxK,KAAKoK,aAAatH,KAAKwH,IAGvBtK,KAAKyJ,gBAAgBgB,UAAUH,GAC/BtK,KAAKyJ,gBAAgB7G,aA3B1B,M,oCAAMsH,IAAqB,wB,wBAArBA,GAAqB,2QDblC,0B,gBAIA,8B,uBAJmD,mCAIhC,iD,suBEDf,gCAIQ,yFAAmC,oFAIvC,qCACI,0BACI,qBACA,iBAAmB,QAAkB,OACzC,OACJ,OAEA,gBACI,gBACI,mBAA8C,gBAAK,OACnD,oBAAmB,wEAA4B,oDAAkDnB,MAAA,mBAAjG,OACJ,OAEA,iBACI,oBAA6C,gBAAI,OACjD,qBAAQ,uEAA2B,oDAAiDA,MAAA,mBAChF,qBAA2B,gBAAI,OAC/B,qBAA4B,iBAAK,OACjC,qBAA2B,gBAAI,OACnC,OACJ,OAEA,iBACI,oBAA+C,kBAAM,OACrD,oBAAmB,yEAA6B,oDAAmDA,MAAA,mBAAnG,OACJ,OAEA,iBACI,oBAAkD,qBAAS,OAC3D,qBAAQ,4EAAgC,oDAAsDA,MAAA,mBAC1F,qBAA+B,gBAAI,OACnC,qBAA2B,wCAA4B,OACvD,qBAA4B,oCAAwB,OACpD,qBAA4B,8BAAkB,OAClD,OACJ,OAEA,iBACI,oBAA+C,wBAAY,OAC3D,qBAAQ,yEAA6B,oDAAmDA,MAAA,mBACpF,qBAA+B,uBAAW,OAC1C,qBAA6B,sBAAU,OAC3C,OACJ,OAEA,qBAA6D,uGACzD,oBAA6C,gBAAI,OACjD,oBAA4B,uEAA5B,OACA,uBACJ,OACJ,OAEA,0BACI,qBAAsD,8EAA0C,kBAAM,OAC1G,OACJ,O,0BAzDQ,qBAKuB,sBAMZ,kCACyC,oBAAA5H,GAAA,UAA7B,wBAIZ,iCAC6B,oBAAAA,GAAA,SAA5B,uBAQD,mCAC0C,oBAAAA,GAAA,WAA9B,yBAIZ,sCACkC,oBAAAA,GAAA,cAAjC,4BACI,6BAQL,mCAC+B,oBAAAA,GAAA,WAA9B,yBACI,6BAML,iCACiD,oBAAAA,GAAA,SAA5B,uBAClB,gC,sCAzD1B,0BAA2B,oFACvB,yCAgEJ,O,qBA7DY,iC,uBAgER,iBAAiC,sCAA2B,QCrDzD,IAAMuJ,GAAN,KAAMA,GAAN,WAIH,WACW3B,EACCxD,EACAvC,EACA2H,2BAHD,KAAA5B,QACC,KAAAxD,QACA,KAAAvC,eACA,KAAA2H,KANL,KAAAC,cAAgC,GAFpC,2DAYC5K,KAAK4K,cAActK,SAAQuK,YACvBA,GAAgBA,EAAa1H,mBAblC,uCAiBqBG,GACpBtD,KAAK+I,MAAM+B,uBAAuBxH,EAAE6E,cAAe7E,EAAE8E,gBAlBtD,qCAwBmBM,GAEd1I,KAAK+K,iBADL/K,KAAK+K,mBAAqBrC,EACF,KAEAA,IA5B7B,gDAmC6B,WAC5B1I,KAAKuF,MAAMkB,KAAK,IAAuB,CACnCC,MAAO,mBACPC,KAAM,kDACNC,GAAI,WACLV,cAAcvF,WAAUkG,YAChBA,IACP7G,EAAK+I,MAAMiC,WAAWhL,EAAK+K,kBAC3B/K,EAAK+K,iBAAmB,WA3C7B,uCA+CqBrH,EAAqBuH,cACzCjL,KAAKgD,aAAaL,KAAK,GAAuB,CAC1CiB,SAAU,KACVF,OAAQ,IAAI,IAAWA,KACxBI,eAAenD,WAAU2J,YACxBW,EAASX,KAAOA,EAChBtK,EAAK+I,MAAMb,gBACXlI,EAAK2K,GAAGO,uBAtDb,M,oCAAMR,IAAkB,yC,wBAAlBA,GAAkB,yoC,GAAA,MDjB/B,gBAAyB,qBAAU,OAEnC,iC,gBAmEA,0C,mBAnE2E,mDAAkE,gB,olDEWzH,oBAAwF,QAA4B,Q,iCAA5G,kBAAgF,mC,sCAVxG,gBACI,gBACI,gBACI,kBAA6B,oBAAS,OACtC,kBAAkC,kEAA6B,mDAAkB3B,MAAA,mBAAjF,OACJ,OAEA,gBACI,kBAAiC,wBAAa,OAC9C,oBAA2B,sEAAiC,mDAAkBA,MAAA,mBAC1E,4BACJ,OACJ,OACJ,OAEA,sBAEA,kBACI,qBAAgC,yEAAsC,uBAAW,OACjF,qBAAsE,sEAAmC,oBAAQ,OACrH,OACJ,O,8BAjB8C,+BAKP,mCACM,6D,sCAerC,iBAAwE,uFACpE,kBAAmB,QAAa,OAChC,sBACJ,O,0BAFuB,sB,sCAF3B,iBACI,wB,gBAKA,iBACI,oBAAyD,gDAASA,MAAA,YAAsB,qBAAU,OACtG,OACJ,O,qBAR+B,qD,ICX1BoC,G,kCAAN,KAAMA,GAAN,WACH,WACW7F,EACAyD,EACCxD,EACAuC,EACArE,EACA2H,2BALD,KAAA9F,aACA,KAAAyD,QACC,KAAAxD,QACA,KAAAuC,WACA,KAAArE,QACA,KAAA2H,KAERpL,KAAK+I,MAAMsC,YAAYrL,KAAK8H,SAAS9G,IAAI,UAT1C,gEAaC,IAAM4C,EAAW,KAAe0H,QAChC1H,EAAS,GAAG2H,QAAU,GACtB3H,EAAS,GAAG2H,QAAU,GACtBvL,KAAKyD,MAAMd,KAAK,GAA2B,CACvCiB,SAAUA,EACVF,OAAQ1D,KAAKoL,GACbI,WAAY,oCAnBjB,0CAwBKxL,KAAK+I,MAAMf,YAAYpH,MACvBZ,KAAK+I,MAAMf,YAAYlF,KAAK,MAE5B9C,KAAKsF,WAAWkB,qBA3BrB,oCA+BkB8C,GACjBtJ,KAAK+I,MAAMf,YAAYlF,KAAKwG,KAhC7B,4CAmCyB,WACxBtJ,KAAKuF,MAAMkB,KAAK,IAAuB,CACnCC,MAAO,cACPC,KAAM,6CACNC,GAAI,WACLV,cAAcvF,WAAUkG,YAChBA,GACP7G,EAAK+I,MAAM0C,oBA1ChB,qCA8CmBzJ,GAClB,OAAOA,EAAKgD,QAAQ,KAAM,SA/C3B,M,oCAAMmG,IAA6B,8D,wBAA7BA,GAA6B,k4B,GAAA,MDjB1C,kCAAmG,gCAAQ,EAAA9D,uBAAqB,OAEhI,gBACI,wB,gBAuBA,yCAYJ,Q,mBAtCuB,kFAGK,mDAAiE,gB,mXEAzF,QACI,gBACI,kBAA+B,QAAc,OAC7C,qBACJ,OACJ,Q,uBAHe,0BAAwB,qBACT,yBAAgB,wBAAhB,CAAgB,+B,ICWrCqE,G,sCAAN,KAAMA,GAAN,WAIH,WACW5L,EACCD,2BADD,KAAAC,SACC,KAAAD,KAJL,KAAAE,KAAOC,KAAKH,GAAGI,MAAM,IAFzB,wDASO,WACND,KAAK2L,UAAY3L,KAAKF,OAAOgB,gBAA4B,WAEzDd,KAAK2L,UAAUrL,SAAQsL,YACnB5L,EAAKD,KAAK4E,WAAWiH,EAAMrL,IAAKP,EAAKH,GAAGgM,QAAQD,EAAMhL,WAG1DZ,KAAKD,KAAKW,aAAaC,WAAUC,YAC7BZ,EAAKF,OAAOe,WAAWD,UAjB5B,M,oCAAM8K,IAA2B,sB,wBAA3BA,GAA2B,0SDjBxC,kCAAiD,gCAAQ,EAAA5L,OAAA,sBAA2B,OAEpF,gBACI,gCAMJ,Q,MATuB,wBAElB,iCACa,sC,mMEMV,eAAuD,uEAAiE,QCWzH,IAAMgM,GCNAC,GDMN,KAAMD,GAAN,WAOH,WACYrK,EACwBC,EACxBsK,2BAFA,KAAAvK,YACwB,KAAAC,OACxB,KAAAsK,aAPL,KAAAnK,SAAW,IAAIC,EAAA,MACf,KAAAmK,eAAiB,IAAInK,EAAA,MAJzB,wDAcC9B,KAAKkM,WAAWlM,KAAK0B,KAAKyK,SAAUnM,KAAK0B,KAAK0K,UAC9CpM,KAAKqM,8BAfN,gCAmBCrM,KAAK4C,MAAM5C,KAAKF,OAAOwM,cAnBxB,4BAsBU1L,GACTZ,KAAKyB,UAAUmB,MAAMhC,KAvBtB,iCA0BgBuL,GAA6B,WAAXC,EAAW,8DAC5CpM,KAAK6B,SAASiB,MAAKA,GACnB9C,KAAKgM,WAAWO,UAAU,gBAAiB,CAAChF,KAAM,OAAOiF,MAAK,WAC1DxM,EAAKF,OAAS2M,IAAIC,KAAK1M,EAAK2M,SAASC,eACrC5M,EAAKF,OAAO+M,aAAaC,QAAQ,YAAcV,GAC/CpM,EAAKF,OAAOiN,SAAS,oBACrB/M,EAAKF,OAAOkN,gBAAkBC,IAC1Bd,GAAUnM,EAAKF,OAAOyC,SAAS4J,EAAU,GAE7CnM,EAAKF,OAAO+M,aAAaK,GAAG,oBAAoB,WAC5C,IAAMC,EAAcnN,EAAKF,OAAO+M,aAAaO,iBAG7C,GAAID,EAAY,IAAM,gBAAgBE,KAAKF,EAAY,GAAGG,MAGtD,OAFAH,EAAY1E,OAAO,EAAG,QACtBzI,EAAKF,OAAO+M,aAAaU,eAAeJ,GAK5C,IAAMK,EAAgBxN,EAAKF,OACtB+M,aACAO,iBACA9K,QAAOmL,YAACA,MAAe,UAAXA,EAAElG,QACdiD,OAAS,EACdxK,EAAKiM,eAAenJ,KAAK0K,MAE7BxN,EAAK6B,SAASiB,MAAKA,QArDxB,kDA8DgC,WAC/B9C,KAAKyB,UAAUiM,gBAGf1N,KAAKyB,UAAUkM,gBAAgBhN,WAAU,WACrCX,EAAK4C,WAIT5C,KAAKyB,UAAUmM,gBACVvL,KAAK,OAAAC,EAAA,IAAOuL,YAAKA,OAAIA,EAAMC,UAAY,SACvCnN,WAAU,kBAAMX,EAAK4C,eAzE3B,M,oCAAMkJ,IAAwB,eASrB,KAAe,a,wBATlBA,GAAwB,0D,MAAA,K,yiBDpBrC,gBACI,eAA+C,sBAAW,OAC1D,mBAAsB,iCAAS,EAAAlJ,WAC3B,qBACJ,OACJ,OAEA,6BACI,gBACI,qBACA,kBACJ,OACJ,OAEA,8BACI,oBAAQ,iCAAS,EAAAA,WAAwC,kBAAM,OAC/D,oBAAuD,iCAAS,EAAAmL,a,iBAAqD,kBAAM,OAC/H,OAEA,gC,wBAVwB,8CAOuD,qDAG5D,kD,6YELZ,KAAMhC,GAAN,WAMH,WACWjM,EACCD,EACA0F,EACA3D,2BAHD,KAAA9B,SACC,KAAAD,KACA,KAAA0F,QACA,KAAA3D,QATL,KAAA7B,KAAOC,KAAKH,GAAGI,MAAM,CACxB,kBAAmB,CAAC,IACpB,mBAAoB,CAAC,MAHtB,wDAaO,WACAC,EAAW,GACjBC,OAAOC,KAAKJ,KAAKD,KAAKM,UAAUC,SAAQC,YACpCL,EAASK,GAAOP,EAAKF,OAAOU,aAAaD,MAE7CP,KAAKD,KAAKU,WAAWP,KAlBtB,gCAqBcqH,cACPhH,EAAM,eAAiBgH,EACvByG,EAAehO,KAAKD,KAAKa,MAAML,IAAQ,GAE7CP,KAAKuF,MAAM5C,KAAK,GADH,CAACwJ,SAAUnM,KAAKD,KAAKa,MAAML,GAAM6L,SAAU7E,IAEnDrB,cACAvF,WAAUC,YAEP,YAAIA,GAAuBoN,IAAiBpN,EAA5C,CACA,IAAMqN,EAAQA,mBAAK1N,EAAMK,GACzBZ,EAAKD,KAAKU,WAAWwN,GACrBjO,EAAKF,OAAOoO,YAAYD,GAAUtN,WAAU,WACxCX,EAAKmO,iBAAiB5G,EAAM3G,GAC5BZ,EAAK4B,MAAMe,KAAK,8BAlC7B,uCAuCsB4E,EAAoB6G,GAErCpO,KAAKF,OAAOiF,YADH,QAATwC,EACwB,IAAI,IAAa6G,GAEjB,IAAI,IAAcA,QA3C/C,M,oCAAMrC,IAAkC,0C,wBAAlCA,GAAkC,qQCd/C,kCAAgD,gCAAQ,EAAAjM,OAAA,sBAA2B,OAEnF,gBACG,mBAAuC,iCAAS,EAAAuO,UAAU,UACvD,iBAAyB,qBAAU,OACnC,iBAA4B,iBAAM,OACrC,OACA,mBAAyB,iCAAS,EAAAA,UAAU,WACzC,iBAAyB,mCAAwB,OACjD,kBAA4B,kBAAM,OACrC,OACH,Q,KAXuB,yB,gKCcP,kBAAwD,eAAI,Q,uBAExD,kBAAY,gBAAK,Q,sBAOrB,mC,sBACA,kC,sBACA,iC,sBACA,+B,sBACA,uC,wCAEI,gC,KAAoD,uB,kCADxD,QACI,yB,gBACJ,Q,mBADiB,+C,0BARzB,QACI,WACI,6CACA,4CACA,2CACA,yCACA,iDACA,iCAGJ,OACJ,Q,kBAVkB,gCACgB,uCACD,sCACD,qCACF,4CACQ,4C,sFAS9B,eACI,kBAAyB,QAA0B,OACnD,sBACJ,Q,iCAHoB,8BAAiB,4CACR,kC,0BAFjC,iBACI,sBAIJ,Q,kBAJyF,kDCrB9F,ICJMC,GDIAC,GELAC,GCiBAC,GCJAC,GCuDAC,GC1DAC,GNLN,KAAML,GAAN,WASH,WACWzO,EACC0F,EACAC,EACDoJ,2BAHA,KAAA/O,SACC,KAAA0F,SACA,KAAAC,QACD,KAAAoJ,cAVJ,KAAAC,sBAEA,KAAAC,aAAe/O,KAAKF,OAAOkP,aAAa3M,KAAK,OAAAwD,EAAA,IAAIpC,YAAKA,OACjDA,GAASA,EAAMwL,UAAa,IAAI,IAAgBxL,EAAMwL,WAAa,SAN5E,wDAgBO,WACNjP,KAAK8O,mBAAqB9O,KAAK6O,YAAYK,UAAUtO,MACrDZ,KAAKF,OAAOqP,KACRnP,KAAKoP,OAAOxC,cACZ5M,KAAKyF,MAAM4J,SAAS3N,KAAKZ,iBAE7Bd,KAAKsP,UAAYtP,KAAKyF,MAAMY,YACvB1F,WAAWM,YACRjB,EAAKF,OAAOyP,UAAUtO,EAAOwC,YAxBtC,oCA6BCzD,KAAKsP,WAAatP,KAAKsP,UAAUnM,gBA7BlC,oCAiCCnD,KAAKwF,OAAOY,SAAS,CAAC,YAjCvB,8BAoCYoJ,GACX,OAAO,YAAcA,KArCtB,+BAwCaxN,GACZ,OAAOA,EAAKgD,QAAQ,IAAK,OAzC1B,0CA6CChF,KAAK8O,oBAAsB9O,KAAK8O,uBA7CjC,M,oCAAMP,IAAmB,0C,wBAAnBA,GAAmB,mD,MAAA,K,20BDfhC,gCACI,wB,gBACI,gBACI,gBAAyB,iCAAS,EAAAkB,iBAC9B,qBACJ,OACA,gBAAyB,4BAAiB,OAC1C,mBAIQ,iCAAS,EAAA3P,OAAA,iB,iCAGb,yB,iBACA,0CAGJ,OACJ,OAEA,iC,iBAaA,0CASJ,OAEA,+BACI,kBACI,wBACJ,OACJ,OACJ,OAEA,qBAAgB,iCAAS,EAAA4P,uBACrB,uBACJ,Q,+BArDiB,6CAA8B,wDAW3B,qFAEE,mDAA2C,cAO3C,uDAAmE,gB,8hDEVlF,KAAMpB,GAAN,WACH,WACYxO,EACAyF,2BADA,KAAAzF,SACA,KAAAyF,QAHT,6DAOC,OAAOvF,KAAKF,OAAO6P,SAAS/O,OAErBZ,KAAKuF,MAAMkB,KAAK,IAAuB,CAC1CC,MAAO,0BACPC,KAAM,oDACNiJ,SAAU,oCACVhJ,GAAI,QACJiJ,OAAQ,SACT3J,kBAfJ,M,oCAAMoI,IAAuB,sB,0BAAvBA,GAAuB,QAAvBA,GAAuB,qBAFpB,S,qEEFVwB,GAAiB,CACnB,CACIhK,KAAM,GACNmJ,UAAW,GACXvN,KAAM,CAACqO,YAAa,CAAC,sBACrBC,QAAS,CAAClP,iBDFL0N,GAAN,WACH,WACYhJ,EACAzE,2BADA,KAAAyE,SACA,KAAAzE,OAHT,qDAMK0E,EAA+BwK,cACnC,OAAOjQ,KAAKe,KAAKC,IAAkD,2BAA2BqB,KAC1F,OAAA6N,GAAA,IAAW,kBACPlQ,EAAKwF,OAAOY,SAAS,CAAC,WACf,QAEX,OAAA+J,GAAA,IAASzN,YAAQA,OACTA,EACO,OAAA0N,GAAA,GAAG1N,IAEV1C,EAAKwF,OAAOY,SAAS,CAAC,WACf,cAjBpB,K,uCAAMoI,IAAwB,sB,0BAAxBA,GAAwB,QAAxBA,GAAwB,qBAFrB,S,KCKR6B,YAAa,CAAC,MACdC,cAAe,CAAC,IAChBC,SAAU,CACN,CAACzK,KAAM,IACP,CAACA,KAAM,UACP,CAACA,KAAM,yBASZ,KAAM2I,GAAN,uC,qBAAMA,K,qDAAAA,KAAuB,SAHvB,CAAC,IAAa+B,SAASV,KACtB,O,iBCFP,KAAMpB,GAAN,uC,qBAAMA,K,qDAAAA,KAAkB,SAXlB,CACL,IACA,KAEA,IACA,Q,wDEGD,KAAME,GAAN,uC,qBAAMA,K,qDAAAA,KAAsB,SATtB,CACL,IACA,KACA,Q,IDgED,KAAMD,GAAN,uC,qBAAMA,K,qDAAAA,KAAoB,SA5CpB,CACL,GACA,IACA,IACA,IACA,GACA,KACA,KACA,KACA,GAGA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,IACA,Q,IErDR,qDAyBO,IAAM8B,GAAN,KAAMA,GAAN,uC,qBAAMA,K,qDAAAA,KAAmB,SAVnB,CACL,IACA,GAEA,IACA,IACA,KACA,Q,uCCrBR,kCAAO,IAAMC,EAAsC,CAC/C,CAACC,QAAS,MAAOC,QAAS,SAAUC,SAAU,QAASC,SAAU,SAAUvF,QAAS,GACpF,CAACoF,QAAS,QAASC,QAAS,SAAUC,SAAU,MAAOC,SAAU,SAAUvF,QAAS","file":"x","sourcesContent":["import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Component({\n    selector: 'general-appearance-panel',\n    templateUrl: './general-appearance-panel.component.html',\n    styleUrls: ['./general-appearance-panel.component.scss'],\n    host: {'class': 'appearance-panel'},\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeneralAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'branding.logo_light': [''],\n        'branding.logo_dark': [''],\n        'branding.favicon': [''],\n        'env.app_name': [''],\n        'branding.site_description': [''],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public editor: AppearanceEditor,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n          defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n\n    public defaultValue(key: string) {\n        return this.editor.defaultSettings[key];\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\n\nconst BASE_URI = 'css-theme';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CssThemeService {\n    constructor(private http: AppHttpClient) {}\n\n    public all(): PaginatedBackendResponse<CssTheme> {\n        return this.http.get(BASE_URI);\n    }\n\n    public create(params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.post(BASE_URI, params);\n    }\n\n    public update(id, params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.put(`${BASE_URI}/${id}`, params);\n    }\n\n    public delete(ids: number[]): BackendResponse<void> {\n        return this.http.delete(`${BASE_URI}/${ids}`);\n    }\n}\n","<appearance-panel-meta [path]=\"['General']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_light')\" formControlName=\"branding.logo_light\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #1 (For top navbar)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_dark')\" formControlName=\"branding.logo_dark\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #2 (Everywhere else)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.favicon')\" backendUri=\"uploads/favicon\" diskPrefix=\"branding_media\" formControlName=\"branding.favicon\">\n        Favicon\n    </appearance-image-input>\n\n    <div class=\"input-container\">\n        <label for=\"env.app_name\" trans>Site Name</label>\n        <input type=\"text\" id=\"env.app_name\" [placeholder]=\"defaultValue('env.app_name')\" formControlName=\"env.app_name\">\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"branding.site_description\" trans>Site Description</label>\n        <textarea id=\"branding.site_description\" [placeholder]=\"defaultValue('branding.site_description')\" rows=\"4\" formControlName=\"branding.site_description\"></textarea>\n    </div>\n</div>\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title>\n        <span *ngIf=\"data.theme\" trans>Update Theme</span>\n        <span *ngIf=\"!data.theme\" trans>Create Theme</span>\n    </h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" ngNativeValidate [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <mat-dialog-content class=\"many-inputs\">\n        <div class=\"input-container\">\n            <label for=\"name\" trans>Name</label>\n            <input type=\"text\" id=\"name\" formControlName=\"name\" required minlength=\"3\">\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"is_dark\" formControlName=\"is_dark\" trans>Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme has light text on dark background.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_dark\" formControlName=\"default_dark\" trans>Default Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default dark theme.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_light\" formControlName=\"default_light\" trans>Default Light Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default light theme.</p>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n            <span *ngIf=\"data.theme; else creating\">Update</span>\n            <ng-template #creating>\n                <span>Create</span>\n            </ng-template>\n        </button>\n    </mat-dialog-actions>\n</form>\n\n\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {FormBuilder} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {filter} from 'rxjs/operators';\n\ninterface CrupdateCssThemeModalData {\n    theme: CssTheme;\n}\n\n@Component({\n    selector: 'crupdate-css-theme-modal',\n    templateUrl: './crupdate-css-theme-modal.component.html',\n    styleUrls: ['./crupdate-css-theme-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateCssThemeModalComponent {\n    public loading$ = new BehaviorSubject(false);\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<CssTheme>]: string}>({});\n    public form = this.fb.group({\n        name: [''],\n        is_dark: [false],\n        default_dark: [false],\n        default_light: [false],\n    });\n\n    constructor(\n        private dialogRef: MatDialogRef<CrupdateCssThemeModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCssThemeModalData,\n        private cssTheme: CssThemeService,\n        private toast: Toast,\n        private fb: FormBuilder,\n    ) {\n        if (data.theme) {\n            this.form.patchValue(data.theme);\n        }\n\n        // make sure \"default_light\" and \"default_dark\"\n        // can't be toggled on at the same time\n        this.form.get('default_dark')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_light').setValue(false);\n            });\n        this.form.get('default_light')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_dark').setValue(false);\n            });\n    }\n\n    public confirm() {\n        const request = this.data.theme ?\n            this.cssTheme.update(this.data.theme.id, this.form.value) :\n            this.cssTheme.create(this.form.value);\n\n        request.subscribe(response => {\n            this.toast.open(this.data.theme ? 'Theme updated' : 'Theme created');\n            this.close(response.theme);\n        }, err => this.errors$.next(err.messages));\n    }\n\n    public close(theme?: CssTheme) {\n        this.dialogRef.close(theme);\n    }\n}\n","import {ChangeDetectionStrategy, Component, ElementRef, OnDestroy} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BOTTOM_POSITION} from '@common/core/ui/overlay-panel/positions/bottom-position';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\n\n@Component({\n    selector: 'color-picker-input',\n    templateUrl: './color-picker-input.component.html',\n    styleUrls: ['./color-picker-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: ColorPickerInputComponent,\n        multi: true,\n    }]\n})\nexport class ColorPickerInputComponent implements OnDestroy, ControlValueAccessor {\n    private pickerSub: Subscription;\n    public propagateChange: Function;\n    public color$ = new BehaviorSubject(null);\n\n    constructor(\n        private overlayPanel: OverlayPanel,\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.pickerSub && this.pickerSub.unsubscribe();\n    }\n\n    public writeValue(value: string) {\n        this.color$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public async openColorPicker(e: MouseEvent) {\n        const { BeColorPickerModule } = await import('@common/core/ui/color-picker/be-color-picker.module');\n        this.pickerSub = this.overlayPanel.open(\n            BeColorPickerModule.components.panel,\n            {\n                origin: new ElementRef(e.target),\n                position: BOTTOM_POSITION,\n                data: {color: this.color$.value}\n            }\n        ).valueChanged().subscribe(color => {\n            this.color$.next(color);\n            this.propagateChange(this.color$.value);\n        });\n    }\n}\n","<button type=\"button\" class=\"no-style color-picker-btn\" (click)=\"openColorPicker($event)\">\n    <mat-icon svgIcon=\"drop-custom\" class=\"color-icon\" [style.color]=\"color$ | async\"></mat-icon>\n    <span class=\"name\" trans><ng-content></ng-content></span>\n    <span class=\"change\" trans>Change</span>\n</button>","<ul [formGroup]=\"form\">\n    <li *ngFor=\"let color of theme.colors | keyvalue\">\n        <color-picker-input [formControlName]=\"color.key\" trans>{{viewName(color.key)}}</color-picker-input>\n    </li>\n</ul>\n","import {ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CssTheme, CssThemeColors} from '@common/core/types/models/CssTheme';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {SetColors} from '@common/shared/appearance/commands/appearance-commands';\nimport {AppearanceEditor, EditorChanges} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\n\n@Component({\n    selector: 'css-theme-colors-panel',\n    templateUrl: './css-theme-colors-panel.component.html',\n    styleUrls: ['./css-theme-colors-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CssThemeColorsPanelComponent implements OnInit, OnDestroy {\n    @Input() theme: CssTheme;\n    public form = new FormGroup({});\n    private colorCache: CssThemeColors = {};\n\n    constructor(\n        private editor: AppearanceEditor,\n        private themes: CssThemeService,\n    ) {}\n\n    ngOnInit() {\n        this.editor.setSaveRequest(this.saveColors.bind(this));\n\n        // build form\n        Object.entries(this.theme.colors).forEach(([name, color]) => {\n            this.form.addControl(name, new FormControl(color));\n        });\n\n        this.editor.initiated$.subscribe(() => {\n            this.setColors(this.theme.colors);\n            this.form.valueChanges.subscribe((value: CssThemeColors) => {\n                this.setColors(value);\n                this.editor.addChanges({'colors': value});\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.editor.setSaveRequest(null);\n    }\n\n    private saveColors(payload: EditorChanges) {\n        return this.themes.update(this.theme.id, payload);\n    }\n\n    private setColors(colors: CssThemeColors) {\n        Object.entries(colors).forEach(([name, color]) => {\n            // make sure we only set colors that actually changed\n            // to keep performance as good as possible\n            if (this.colorCache[name] !== color) {\n                this.editor.postMessage(new SetColors(name, color));\n                this.colorCache[name] = color;\n            }\n        });\n    }\n\n    public viewName(name: string) {\n        return name.replace('be-', '').replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\r\n\r\n<div class=\"appearance-panel-content\">\r\n    <css-theme-colors-panel\r\n            [theme]=\"selectedTheme\"\r\n            *ngIf=\"selectedTheme$ | async as selectedTheme else themesList\"\r\n    ></css-theme-colors-panel>\r\n\r\n    <ng-template #themesList>\r\n        <button mat-raised-button color=\"accent\" type=\"button\" class=\"new-theme-button\" (click)=\"openCrupdateThemeModal()\" trans>New Theme</button>\r\n        <ul>\r\n            <li class=\"nav-item\" *ngFor=\"let theme of loadedThemes$ | async\" (click)=\"setSelectedTheme(theme)\">\r\n                <div class=\"name\">{{theme.name}}</div>\r\n                <div class=\"actions\" (click)=\"$event.stopPropagation()\">\r\n                    <button mat-icon-button type=\"button\" (click)=\"setSelectedTheme(theme)\">\r\n                        <mat-icon svgIcon=\"drop-custom\"></mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button type=\"button\" (click)=\"openCrupdateThemeModal(theme);\">\r\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button type=\"button\" (click)=\"maybeDeleteThemeModal(theme)\">\r\n                        <mat-icon svgIcon=\"delete\"></mat-icon>\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </ng-template>\r\n</div>\r\n\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {CrupdateCssThemeModalComponent} from '@common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n    selector: 'themes-appearance-panel',\n    templateUrl: './themes-appearance-panel.component.html',\n    styleUrls: ['./themes-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemesAppearancePanelComponent implements OnInit, OnDestroy {\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public loadedThemes$ = new BehaviorSubject<CssTheme[]>([]);\n    public selectedTheme$ = new BehaviorSubject<CssTheme>(null);\n    private querySub: Subscription;\n\n    public path$ = this.selectedTheme$.pipe(map(theme => {\n        const path = ['Themes'];\n        if (theme) path.push(theme.name);\n        return path;\n    }));\n\n    constructor(\n        public appearance: AppearanceEditor,\n        private modal: Modal,\n        private themes: CssThemeService,\n        private toast: Toast,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.reloadThemes();\n    }\n\n    ngOnDestroy() {\n        this.querySub && this.querySub.unsubscribe();\n    }\n\n    public openCrupdateThemeModal(theme?: CssTheme) {\n        this.modal.open(CrupdateCssThemeModalComponent, {theme})\n            .afterClosed()\n            .subscribe(newTheme => {\n                if (newTheme) {\n                    this.reloadThemes();\n                }\n            });\n    }\n\n    public setSelectedTheme(theme?: CssTheme) {\n        this.router.navigate([], {queryParams: {theme: theme && theme.id}, queryParamsHandling: 'merge'});\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedTheme$.value) {\n            this.setSelectedTheme();\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public maybeDeleteThemeModal(theme: CssTheme) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Theme',\n            body:  'Are you sure you want to delete this theme?',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.deleteTheme(theme);\n        });\n    }\n\n    private reloadThemes() {\n        this.loading$.next(true);\n        this.themes.all()\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.loadedThemes$.next(response.pagination.data);\n                this.bindToQueryParams();\n            });\n    }\n\n    private deleteTheme(theme: CssTheme) {\n        this.themes.delete([theme.id]).subscribe(() => {\n            this.toast.open('Theme deleted');\n            this.reloadThemes();\n        });\n    }\n\n    private bindToQueryParams() {\n        if (this.querySub) return;\n        this.querySub = this.route.queryParams.subscribe((params: {theme?: string}) => {\n            const theme = this.loadedThemes$.value.find(t => t.id === +params.theme);\n            this.selectedTheme$.next(theme);\n        });\n    }\n}\n","import {Injectable} from '@angular/core';\r\nimport {moveItemInArray} from '@angular/cdk/drag-drop';\r\nimport {Menu} from '@common/core/ui/custom-menu/menu';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MenuEditor {\r\n    public allMenus$ = new BehaviorSubject< Menu[]>([]);\r\n    public activeMenu$ = new BehaviorSubject<Menu>(null);\r\n\r\n    constructor(\r\n        private settings: Settings,\r\n        private appearance: AppearanceEditor,\r\n    ) {}\r\n\r\n    public create() {\r\n        const allMenus = [...this.allMenus$.value];\r\n        this.activeMenu$.next(new Menu({name: 'New Menu'}));\r\n        allMenus.push(this.activeMenu$.value);\r\n        this.allMenus$.next(allMenus);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public reorderActiveMenuItems(previousIndex: number, currentIndex: number) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        moveItemInArray(activeMenu.items, previousIndex, currentIndex);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public deleteActive() {\r\n        const allMenus = [...this.allMenus$.value];\r\n        const i = allMenus.indexOf(this.activeMenu$.value);\r\n        allMenus.splice(i, 1);\r\n        this.activeMenu$.next(null);\r\n        this.allMenus$.next(allMenus);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public addItem(item: MenuItem) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        item = this.transformLocalLinksToRoutes(item);\r\n        activeMenu.items.push(item);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public removeItem(item: MenuItem) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        const i = this.activeMenu$.value.items.indexOf(item);\r\n        activeMenu.items.splice(i, 1);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    private transformLocalLinksToRoutes(item: MenuItem): MenuItem {\r\n        const baseUrl = this.settings.getBaseUrl();\r\n\r\n        if (item.type !== 'link' || item.action.indexOf(baseUrl) === -1) return item;\r\n\r\n        item.type = 'route';\r\n        item.action = item.action.replace(this.settings.getBaseUrl(), '');\r\n        return item;\r\n    }\r\n\r\n    public commitChanges() {\r\n        const menus = JSON.stringify(this.allMenus$.value);\r\n        this.appearance.setConfig('menus', menus);\r\n        this.appearance.addChanges({'menus': menus});\r\n    }\r\n\r\n    public setFromJson(json: string) {\r\n        if ( ! json) return;\r\n        const menus = JSON.parse(json);\r\n\r\n        if ( ! menus) return;\r\n\r\n        const allMenus = menus.map(menuData => {\r\n            const menu = new Menu(menuData);\r\n            menu.items = menu.items.map(item => new MenuItem(item));\r\n            return menu;\r\n        });\r\n        this.allMenus$.next(allMenus);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuItemCategoriesService {\n    constructor(private http: HttpCacheClient) {}\n\n    public get(): BackendResponse<{categories: MenuItemCategory[]}> {\n        return this.http.getWithCache('admin/appearance/menu-categories');\n    }\n}\n","export class MenuItem {\r\n    id: number|string;\r\n    label: string;\r\n    action: string;\r\n\r\n    // ID for model if action matches to specific model. If action\r\n    // points to a specific custom page, model_id will be that page's ID.\r\n    model_id: number;\r\n    type: 'page' | 'link' | 'route' = 'link';\r\n    order = 1;\r\n    icon: string;\r\n    condition: MenuItemCondition = null;\r\n    target: string = null;\r\n    position = 0;\r\n    activeExact = false;\r\n\r\n    constructor(params: Partial<MenuItem> = {}) {\r\n        for (const name in params) {\r\n            this[name] = params[name];\r\n        }\r\n        this.id = Math.floor(Math.random() * (1000 - 1));\r\n    }\r\n}\r\n\r\nexport type MenuItemCondition = string|string[]|Function;\r\n","<div class=\"header\">\r\n    <span class=\"title\" trans>New Menu Item</span>\r\n    <mat-icon svgIcon=\"close\" (click)=\"close()\"></mat-icon>\r\n</div>\r\n<div class=\"new-item-tabs\">\r\n    <mat-accordion>\r\n        <form (ngSubmit)=\"addLinkMenuItem()\" [formGroup]=\"linkForm\" ngNativeValidate>\r\n            <mat-expansion-panel class=\"mat-elevation-z\">\r\n                <mat-expansion-panel-header><mat-panel-title trans>Link</mat-panel-title></mat-expansion-panel-header>\r\n                <div class=\"many-inputs expansion-panel-content\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"external-link-url\" trans>URL</label>\r\n                        <input type=\"url\" id=\"external-link-url\" formControlName=\"action\" required>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"external-link-text\" trans>Link Text</label>\r\n                        <input type=\"text\" id=\"external-link-text\" formControlName=\"label\" required>\r\n                    </div>\r\n                </div>\r\n                <mat-action-row>\r\n                    <button mat-button color=\"accent\" type=\"submit\" trans>Add</button>\r\n                </mat-action-row>\r\n            </mat-expansion-panel>\r\n        </form>\r\n        <mat-expansion-panel class=\"mat-elevation-z\">\r\n            <mat-expansion-panel-header><mat-panel-title trans>Route</mat-panel-title></mat-expansion-panel-header>\r\n            <div class=\"items-list expansion-panel-content\">\r\n                <div class=\"item\" *ngFor=\"let route of appearance.config.menus.availableRoutes\"\r\n                     (click)=\"addRouteMenuItem(route)\">{{route}}\r\n                </div>\r\n            </div>\r\n        </mat-expansion-panel>\r\n        <mat-expansion-panel class=\"mat-elevation-z\" *ngFor=\"let category of menuItemCategories\">\r\n            <mat-expansion-panel-header><mat-panel-title trans>{{category.name}}</mat-panel-title></mat-expansion-panel-header>\r\n            <div class=\"items-list expansion-panel-content\">\r\n                <div class=\"item\" *ngFor=\"let item of category.items\" (click)=\"addCustomMenuItem(item)\">{{item.label}}</div>\r\n            </div>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n</div>","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\r\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {FormBuilder} from '@angular/forms';\r\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\r\nimport {MenuItemCategoriesService} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service';\r\n\r\n@Component({\r\n    selector: 'add-menu-item-panel',\r\n    templateUrl: './add-menu-item-panel.component.html',\r\n    styleUrls: ['./add-menu-item-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddMenuItemPanelComponent implements OnInit {\r\n    public linkForm = this.fb.group({\r\n        action: [''],\r\n        label: [''],\r\n    });\r\n    public menuItemCategories: MenuItemCategory[];\r\n\r\n    constructor(\r\n        public editor: MenuEditor,\r\n        public appearance: AppearanceEditor,\r\n        private overlayPanelRef: OverlayPanelRef,\r\n        private fb: FormBuilder,\r\n        private itemCategories: MenuItemCategoriesService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.itemCategories.get().subscribe(response => {\r\n            this.menuItemCategories = response.categories;\r\n        });\r\n    }\r\n\r\n    public addLinkMenuItem() {\r\n        this.editor.addItem(new MenuItem({\r\n            type: 'link',\r\n            label: this.linkForm.value.label,\r\n            action: this.linkForm.value.action,\r\n        }));\r\n\r\n        this.linkForm.reset();\r\n        this.close();\r\n    }\r\n\r\n    public addRouteMenuItem(route: string) {\r\n        this.editor.addItem(new MenuItem({\r\n            type: 'route',\r\n            label: route,\r\n            action: route,\r\n        }));\r\n        this.close();\r\n    }\r\n\r\n    public addCustomMenuItem(item: Partial<MenuItem>) {\r\n        this.editor.addItem(new MenuItem(item));\r\n        this.close();\r\n    }\r\n\r\n    public close() {\r\n        this.overlayPanelRef.close();\r\n    }\r\n}\r\n","<button mat-icon-button (click)=\"selectIcon(icon)\" *ngFor=\"let icon of icons$ | async\">\n  <mat-icon [svgIcon]=\"icon\"></mat-icon>\n</button>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Component({\n    selector: 'icon-selector',\n    templateUrl: './icon-selector.component.html',\n    styleUrls: ['./icon-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconSelectorComponent implements OnInit {\n    public icons$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n    public loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    @Output() iconSelected = new EventEmitter<string>();\n\n    constructor(\n        private http: HttpCacheClient,\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    ngOnInit() {\n        this.loading$.next(true);\n        this.http.get<GenericBackendResponse<{icons: string[]}>>('admin/icons')\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.icons$.next(response.icons);\n            });\n    }\n\n    public selectIcon(icon: string) {\n        // component is used inline\n        if (this.iconSelected.observers.length) {\n            this.iconSelected.next(icon);\n        // component is used as overlay panel\n        } else {\n            this.overlayPanelRef.emitValue(icon);\n            this.overlayPanelRef.close();\n        }\n\n    }\n}\n","<div class=\"title\" trans>Menu Items</div>\r\n\r\n<mat-accordion cdkDropList (cdkDropListDropped)=\"reorderMenuItems($event)\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else noActiveMenu\">\r\n    <mat-expansion-panel\r\n            class=\"mat-elevation-z menu-item-container\"\r\n            cdkDrag\r\n            *ngFor=\"let menuItem of activeMenu.items\"\r\n            (opened)=\"toggleMenuItem(menuItem)\"\r\n            (closed)=\"toggleMenuItem(menuItem)\"\r\n            [attr.data-id]=\"menuItem.id\"\r\n    >\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n                <mat-icon class=\"drag-handle\" cdkDragHandle svgIcon=\"drag-handle\"></mat-icon>\r\n                <span class=\"name\">{{menuItem.label}}</span>\r\n            </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n\r\n        <div class=\"many-inputs menu-item-list\">\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-label'}}\" trans>Label</label>\r\n                <input type=\"text\" [(ngModel)]=\"menuItem.label\" id=\"{{menuItem.id + '-label'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-type'}}\" trans>Type</label>\r\n                <select [(ngModel)]=\"menuItem.type\" id=\"{{menuItem.id + '-type'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option value=\"link\" trans>Link</option>\r\n                    <option value=\"route\" trans>Route</option>\r\n                    <option value=\"page\" trans>Page</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-action'}}\" trans>Action</label>\r\n                <input type=\"text\" [(ngModel)]=\"menuItem.action\" id=\"{{menuItem.id + '-action'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-condition'}}\" trans>Condition</label>\r\n                <select [(ngModel)]=\"menuItem.condition\" id=\"{{menuItem.id + '-condition'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option [ngValue]=\"null\" trans>None</option>\r\n                    <option value=\"auth\" trans>Show to Logged in Users Only</option>\r\n                    <option value=\"guest\" trans>Show to Guest Users Only</option>\r\n                    <option value=\"admin\" trans>Show to Admin Only</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-target'}}\" trans>Open link in</label>\r\n                <select [(ngModel)]=\"menuItem.target\" id=\"{{menuItem.id + '-target'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option [ngValue]=\"null\" trans>Same Window</option>\r\n                    <option value=\"_blank\" trans>New Window</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container icon-input-container\" #iconInput (click)=\"openIconSelector(iconInput, menuItem)\">\r\n                <label for=\"{{menuItem.id + '-icon'}}\" trans>Icon</label>\r\n                <input type=\"text\" readonly [(ngModel)]=\"menuItem.icon\" id=\"{{menuItem.id + '-icon'}}\" placeholder=\"(Optional)\" trans-placeholder>\r\n                <mat-icon [svgIcon]=\"menuItem.icon\"></mat-icon>\r\n            </div>\r\n        </div>\r\n\r\n        <mat-action-row>\r\n            <button mat-button color=\"warn\" class=\"delete-button\" (click)=\"confirmMenuItemDeletion()\" trans>Remove</button>\r\n        </mat-action-row>\r\n    </mat-expansion-panel>\r\n</mat-accordion>\r\n\r\n<ng-template #noActiveMenu>\r\n    <div class=\"no-menu-items\" trans>This menu has no items yet.</div>\r\n</ng-template>\r\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\r\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\r\n\r\n@Component({\r\n    selector: 'menu-items',\r\n    templateUrl: './menu-items.component.html',\r\n    styleUrls: ['./menu-items.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MenuItemsComponent implements OnDestroy {\r\n    public selectedMenuItem: MenuItem;\r\n    public subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        public menus: MenuEditor,\r\n        private modal: Modal,\r\n        private overlayPanel: OverlayPanel,\r\n        private cd: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => {\r\n            subscription && subscription.unsubscribe();\r\n        });\r\n    }\r\n\r\n    public reorderMenuItems(e: CdkDragDrop<void>) {\r\n        this.menus.reorderActiveMenuItems(e.previousIndex, e.currentIndex);\r\n    }\r\n\r\n    /**\r\n     * Toggle specified menu item settings panel visibility.\r\n     */\r\n    public toggleMenuItem(item: MenuItem) {\r\n        if (this.selectedMenuItem === item) {\r\n            this.selectedMenuItem = null;\r\n        } else {\r\n            this.selectedMenuItem = item;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ask user to confirm menu item deletion.\r\n     */\r\n    public confirmMenuItemDeletion() {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Menu Item',\r\n            body: 'Are you sure you want to delete this menu item?',\r\n            ok: 'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.menus.removeItem(this.selectedMenuItem);\r\n            this.selectedMenuItem = null;\r\n        });\r\n    }\r\n\r\n    public openIconSelector(origin: HTMLElement, menuItem: MenuItem) {\r\n        this.overlayPanel.open(IconSelectorComponent, {\r\n            position: RIGHT_POSITION,\r\n            origin: new ElementRef(origin),\r\n        }).valueChanged().subscribe(icon => {\r\n            menuItem.icon = icon;\r\n            this.menus.commitChanges();\r\n            this.cd.detectChanges();\r\n        });\r\n    }\r\n}\r\n","<appearance-panel-meta [path]=\"['Menus', menus.activeMenu$.value && menus.activeMenu$.value.name]\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\r\n\r\n<div class=\"appearance-panel-content\">\r\n    <div class=\"menu-panel\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else allMenuList\">\r\n        <div class=\"many-inputs menu-settings\">\r\n            <div class=\"input-container\">\r\n                <label for=\"menu-name\" trans>Menu Name</label>\r\n                <input type=\"text\" id=\"menu-name\" [(ngModel)]=\"activeMenu.name\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"menu-position\" trans>Menu Position</label>\r\n                <select id=\"menu-position\" [(ngModel)]=\"activeMenu.position\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option [ngValue]=\"position\" *ngFor=\"let position of appearance.config.menus.positions\">{{getDisplayName(position)}}</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <menu-items></menu-items>\r\n\r\n        <div class=\"action-buttons\">\r\n            <button mat-button color=\"warn\" (click)=\"confirmMenuDeletion()\" trans>Delete Menu</button>\r\n            <button class=\"button flat add-item-button\" mat-button color=\"accent\" (click)=\"openAddItemPanel()\" trans>Add Item</button>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #allMenuList>\r\n        <div class=\"menus\">\r\n            <div class=\"menu nav-item\" *ngFor=\"let menu of menus.allMenus$ | async\" (click)=\"setActiveMenu(menu)\">\r\n                <span class=\"name\">{{menu.name}}</span>\r\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"actions\"></mat-icon>\r\n            </div>\r\n\r\n            <div class=\"action-buttons\">\r\n                <button mat-button color=\"accent\" class=\"button primary\" (click)=\"menus.create()\" trans>Add a Menu</button>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</div>","import {ChangeDetectionStrategy, Component, ElementRef} from '@angular/core';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\r\nimport {AddMenuItemPanelComponent} from '@common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\r\nimport {Menu} from '@common/core/ui/custom-menu/menu';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Component({\r\n    selector: 'menus-appearance-panel',\r\n    templateUrl: './menus-appearance-panel.component.html',\r\n    styleUrls: ['./menus-appearance-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MenusAppearancePanelComponent {\r\n    constructor(\r\n        public appearance: AppearanceEditor,\r\n        public menus: MenuEditor,\r\n        private modal: Modal,\r\n        private settings: Settings,\r\n        private panel: OverlayPanel,\r\n        private el: ElementRef<HTMLElement>,\r\n    ) {\r\n        this.menus.setFromJson(this.settings.get('menus'));\r\n    }\r\n\r\n    public openAddItemPanel() {\r\n        const position = RIGHT_POSITION.slice();\r\n        position[0].offsetX = 10;\r\n        position[1].offsetX = 10;\r\n        this.panel.open(AddMenuItemPanelComponent, {\r\n            position: position,\r\n            origin: this.el,\r\n            panelClass: 'add-menu-item-panel-container'\r\n        });\r\n    }\r\n\r\n    public openPreviousPanel() {\r\n        if (this.menus.activeMenu$.value) {\r\n            this.menus.activeMenu$.next(null);\r\n        } else {\r\n            this.appearance.closeActivePanel();\r\n        }\r\n    }\r\n\r\n    public setActiveMenu(menu: Menu) {\r\n        this.menus.activeMenu$.next(menu);\r\n    }\r\n\r\n    public confirmMenuDeletion() {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Menu',\r\n            body: 'Are you sure you want to delete this menu?',\r\n            ok: 'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.menus.deleteActive();\r\n        });\r\n    }\r\n\r\n    public getDisplayName(name: string) {\r\n        return name.replace(/-/g, ' ');\r\n    }\r\n}\r\n","<appearance-panel-meta [path]=\"['Seo Settings']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <ng-container *ngFor=\"let field of seoFields\">\n        <div class=\"input-container\">\n            <label [for]=\"field.key\" trans>{{field.name}}</label>\n            <textarea type=\"text\" [id]=\"field.key\" [formControlName]=\"field.key\" [placeholder]=\"field.defaultValue\" rows=\"2\"></textarea>\n        </div>\n    </ng-container>\n</div>","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\n\ninterface SeoField {\n    name: string;\n    key: string;\n    defaultValue: string;\n    value: string;\n}\n\n@Component({\n    selector: 'seo-appearance-panel',\n    templateUrl: './seo-appearance-panel.component.html',\n    styleUrls: ['./seo-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeoAppearancePanelComponent implements OnInit {\n    public seoFields: SeoField[];\n    public form = this.fb.group({});\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n    ) {}\n\n    ngOnInit() {\n        this.seoFields = this.editor.defaultSettings['seo_fields'];\n\n        this.seoFields.forEach(field => {\n            this.form.addControl(field.key, this.fb.control(field.value));\n        });\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n}\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title trans>Code Editor</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<mat-dialog-content>\r\n    <div class=\"editor-container\">\r\n        <p class=\"info\" *ngIf=\"data.language === 'html'\" trans>If entering javascript, wrap it with &lt;script>&lt;/script> tag.</p>\r\n        <div class=\"editor\" #editor></div>\r\n    </div>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions>\r\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n    <button type=\"submit\" mat-raised-button color=\"accent\" (click)=\"confirm()\" [disabled]=\"syntaxInvalid$ | async\" trans>Update</button>\r\n</mat-dialog-actions>\r\n\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import {ChangeDetectionStrategy, Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {filter} from 'rxjs/operators';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {LazyLoaderService} from '@common/core/utils/lazy-loader.service';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\ndeclare let ace;\r\n\r\nexport interface CodeEditorModalData {\r\n    contents?: string;\r\n    language: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'code-editor-modal',\r\n    templateUrl: './code-editor-modal.component.html',\r\n    styleUrls: ['./code-editor-modal.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CodeEditorModalComponent implements OnInit {\r\n    @ViewChild('editor', { static: true }) editorEl: ElementRef;\r\n\r\n    public loading$ = new BehaviorSubject<boolean>(false);\r\n    public syntaxInvalid$ = new BehaviorSubject<boolean>(false);\r\n    private editor;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<CodeEditorModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: CodeEditorModalData,\r\n        private lazyLoader: LazyLoaderService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.initEditor(this.data.contents, this.data.language);\r\n        this.overrideDialogCloseEvents();\r\n    }\r\n\r\n    public confirm() {\r\n        this.close(this.editor.getValue());\r\n    }\r\n\r\n    public close(value?: string) {\r\n        this.dialogRef.close(value);\r\n    }\r\n\r\n    private initEditor(contents: string, language = 'html') {\r\n        this.loading$.next(true);\r\n        this.lazyLoader.loadAsset('js/ace/ace.js', {type: 'js'}).then(() => {\r\n            this.editor = ace.edit(this.editorEl.nativeElement);\r\n            this.editor.getSession().setMode('ace/mode/' + language);\r\n            this.editor.setTheme('ace/theme/chrome');\r\n            this.editor.$blockScrolling = Infinity;\r\n            if (contents) this.editor.setValue(contents, 1);\r\n\r\n            this.editor.getSession().on('changeAnnotation', () => {\r\n                const annotations = this.editor.getSession().getAnnotations() as any[];\r\n\r\n                // hide !doctype syntax error\r\n                if (annotations[0] && /doctype first/.test(annotations[0].text)) {\r\n                    annotations.splice(0, 1);\r\n                    this.editor.getSession().setAnnotations(annotations);\r\n                    return;\r\n                }\r\n\r\n                // prevent editor submit if there are syntax errors\r\n                const syntaxInvalid = this.editor\r\n                    .getSession()\r\n                    .getAnnotations()\r\n                    .filter(a => a.type === 'error')\r\n                    .length > 0;\r\n                this.syntaxInvalid$.next(syntaxInvalid);\r\n            });\r\n            this.loading$.next(false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Need to always send dialog data, regardless of how it was closed.\r\n     * Angular material does not provide easy way to do this, so\r\n     * we need to override backdrop click and escape key close events.\r\n     */\r\n    private overrideDialogCloseEvents() {\r\n        this.dialogRef.disableClose = true;\r\n\r\n        // close on backdrop click\r\n        this.dialogRef.backdropClick().subscribe(() => {\r\n            this.close();\r\n        });\r\n\r\n        // close on escape key\r\n        this.dialogRef.keydownEvents()\r\n            .pipe(filter(event => event.keyCode === ESCAPE))\r\n            .subscribe(() => this.close());\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\nimport {CodeEditorModalComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {SetCustomCss, SetCustomHtml} from '@common/shared/appearance/commands/appearance-commands';\n\n@Component({\n    selector: 'custom-code-appearance-panel',\n    templateUrl: './custom-code-appearance-panel.component.html',\n    styleUrls: ['./custom-code-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomCodeAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'custom-code.css': [''],\n        'custom-code.html': [''],\n    });\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n        private modal: Modal,\n        private toast: Toast,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n            defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n    }\n\n    public openModal(type: 'css'|'html') {\n        const key = 'custom-code.' + type;\n        const initialValue = this.form.value[key] || '',\n            params = {contents: this.form.value[key], language: type};\n        this.modal.open(CodeEditorModalComponent, params)\n            .afterClosed()\n            .subscribe(value => {\n                // undefined means user closed modal without clicking \"update\" button\n                if (value === undefined || initialValue === value) return;\n                const newValue = {[key]: value};\n                this.form.patchValue(newValue);\n                this.editor.saveChanges(newValue).subscribe(() => {\n                    this.addCodeToPreview(type, value);\n                    this.toast.open('Custom code saved');\n                });\n            });\n    }\n\n    private addCodeToPreview(type: 'css'|'html', content: string) {\n        if (type === 'css') {\n            this.editor.postMessage(new SetCustomCss(content));\n        } else {\n            this.editor.postMessage(new SetCustomHtml(content));\n        }\n    }\n}\n","<appearance-panel-meta [path]=\"['Custom Code']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n   <button type=\"button\" class=\"nav-item\" (click)=\"openModal('css')\">\n      <span class=\"text\" trans>Custom CSS</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n   <button class=\"nav-item\" (click)=\"openModal('html')\">\n      <span class=\"text\" trans>Custom HTML & Javascript</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n</div>","<mat-sidenav-container>\r\n    <mat-sidenav [opened]=\"!leftColumnIsHidden\" [mode]=\"(breakpoints.isMobile$ | async) ? 'over' : 'side'\" class=\"sidebar\">\r\n        <div class=\"header\">\r\n            <div class=\"back-button\" (click)=\"closeEditor()\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </div>\r\n            <div class=\"title\" trans>Appearance Editor</div>\r\n            <button\r\n                    mat-raised-button\r\n                    color=\"accent\"\r\n                    class=\"button primary save-button\"\r\n                    (click)=\"editor.saveChanges()\"\r\n                    [disabled]=\"!(editor.changes$ | async) || (editor.loading$ | async)\"\r\n            >\r\n                <span *ngIf=\"editor.changes$ | async; else saved\" trans>Save</span>\r\n                <ng-template #saved>\r\n                    <span trans>Saved</span>\r\n                </ng-template>\r\n            </button>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"editor.activePanel$ | async as activePanel; else navigation\">\r\n            <ng-container [ngSwitch]=\"activePanel.name\">\r\n                <general-appearance-panel *ngSwitchCase=\"'general'\"></general-appearance-panel>\r\n                <themes-appearance-panel *ngSwitchCase=\"'themes'\"></themes-appearance-panel>\r\n                <menus-appearance-panel *ngSwitchCase=\"'menus'\"></menus-appearance-panel>\r\n                <seo-appearance-panel *ngSwitchCase=\"'seo-settings'\"></seo-appearance-panel>\r\n                <custom-code-appearance-panel *ngSwitchCase=\"'custom-code'\"></custom-code-appearance-panel>\r\n                <ng-container *ngSwitchDefault>\r\n                    <ng-template *ngIf=\"panelPortal$ | async as portal\" [cdkPortalOutlet]=\"portal\"></ng-template>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <ng-template #navigation>\r\n            <div class=\"root-navigation\">\r\n                <a class=\"nav-item\" [routerLink]=\"[]\" [queryParams]=\"{panel: slugify(section.name)}\" *ngFor=\"let section of editor.config.sections\">\r\n                    <span class=\"text\" trans>{{viewName(section.name)}}</span>\r\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n                </a>\r\n            </div>\r\n        </ng-template>\r\n\r\n    </mat-sidenav>\r\n\r\n    <mat-sidenav-content>\r\n        <div class=\"live-preview\">\r\n            <iframe src=\"about:blank\" #iframe></iframe>\r\n        </div>\r\n    </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n\r\n<button mat-fab (click)=\"toggleLeftSidebar()\" class=\"sidebar-toggle-button\">\r\n    <mat-icon svgIcon=\"edit\"></mat-icon>\r\n</button>","import {ChangeDetectionStrategy, Component, ElementRef, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {AppearanceEditor} from './appearance-editor/appearance-editor.service';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\nimport {Subscription} from 'rxjs';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {map} from 'rxjs/operators';\r\nimport {BreakpointsService} from '@common/core/ui/breakpoints.service';\r\n\r\n@Component({\r\n    selector: 'appearance',\r\n    templateUrl: './appearance.component.html',\r\n    styleUrls: ['./appearance.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppearanceComponent implements OnInit, OnDestroy {\r\n    @ViewChild('iframe', { static: true }) iframe: ElementRef;\r\n    private routerSub: Subscription;\r\n    public leftColumnIsHidden = false;\r\n\r\n    public panelPortal$ = this.editor.activePanel$.pipe(map(panel => {\r\n        return (panel && panel.component) ? new ComponentPortal(panel.component) : null;\r\n    }));\r\n\r\n    constructor(\r\n        public editor: AppearanceEditor,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        public breakpoints: BreakpointsService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.leftColumnIsHidden = this.breakpoints.isMobile$.value;\r\n        this.editor.init(\r\n            this.iframe.nativeElement,\r\n            this.route.snapshot.data.defaultSettings\r\n        );\r\n        this.routerSub = this.route.queryParams\r\n            .subscribe((params: {panel?: string}) => {\r\n                this.editor.openPanel(params.panel);\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.routerSub && this.routerSub.unsubscribe();\r\n    }\r\n\r\n    public closeEditor() {\r\n        this.router.navigate(['admin']);\r\n    }\r\n\r\n    public slugify(str: string) {\r\n        return slugifyString(str);\r\n    }\r\n\r\n    public viewName(name: string) {\r\n        return name.replace('-', ' ');\r\n    }\r\n\r\n    public toggleLeftSidebar() {\r\n        this.leftColumnIsHidden = !this.leftColumnIsHidden;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {CanDeactivate} from '@angular/router';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CanDeactivateAppearance implements CanDeactivate<AppearanceComponent> {\r\n    constructor(\r\n        private editor: AppearanceEditor,\r\n        private modal: Modal,\r\n    ) {}\r\n\r\n    canDeactivate(): Observable<boolean>|boolean {\r\n        if ( ! this.editor.changes$.value) return true;\r\n\r\n        return this.modal.show(ConfirmModalComponent, {\r\n            title: 'Close Appearance Editor',\r\n            body: 'Are you sure you want to close appearance editor?',\r\n            bodyBold: 'All unsaved changes will be lost.',\r\n            ok: 'Close',\r\n            cancel: 'Stay',\r\n        }).afterClosed();\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {catchError, mergeMap} from 'rxjs/operators';\r\nimport {EMPTY, Observable, of} from 'rxjs';\r\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\r\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AppearanceEditorResolver implements Resolve<GenericBackendResponse<{[key: string]: any}>> {\r\n    constructor(\r\n        private router: Router,\r\n        private http: AppHttpClient\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<GenericBackendResponse<{[key: string]: any}>> {\r\n        return this.http.get<GenericBackendResponse<{[key: string]: any}>>('admin/appearance/values').pipe(\r\n            catchError(() => {\r\n                this.router.navigate(['/admin']);\r\n                return EMPTY;\r\n            }),\r\n            mergeMap(response => {\r\n                if (response) {\r\n                    return of(response);\r\n                } else {\r\n                    this.router.navigate(['/admin']);\r\n                    return EMPTY;\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\n","import {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {CanDeactivateAppearance} from './can-deactivate-appearance.guard';\r\nimport {AuthGuard} from '../../guards/auth-guard.service';\r\nimport {AppearanceEditorResolver} from './appearance-editor/appearance-editor-resolver.service';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AppearanceComponent,\r\n        data: {permissions: ['appearance.update']},\r\n        resolve: {defaultSettings: AppearanceEditorResolver},\r\n        canActivate: [AuthGuard],\r\n        canDeactivate: [CanDeactivateAppearance],\r\n        children: [\r\n            {path: ''},\r\n            {path: ':panel'},\r\n            {path: ':panel/:activeItem'},\r\n        ]\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppearanceRoutingModule {}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n\n@NgModule({\n    declarations: [\n        IconSelectorComponent,\n    ],\n    imports: [\n        CommonModule,\n        LoadingIndicatorModule,\n\n        MatButtonModule,\n        MatIconModule,\n    ],\n    exports: [\n        IconSelectorComponent,\n    ]\n})\nexport class IconSelectorModule {\n}\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {MenusAppearancePanelComponent} from './panels/menus-appearance-panel/menus-appearance-panel.component';\r\nimport {AddMenuItemPanelComponent} from './panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\r\nimport {AppearancePanelMetaComponent} from './appearance-panel-meta/appearance-panel-meta.component';\r\nimport {MenuItemsComponent} from './panels/menus-appearance-panel/menus/menu-items/menu-items.component';\r\nimport {AppearanceRoutingModule} from './appearance-routing.module';\r\nimport {CodeEditorModalComponent} from './panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\r\nimport {ThemesAppearancePanelComponent} from './panels/themes-appearance-panel/themes-appearance-panel.component';\r\nimport {CrupdateCssThemeModalComponent} from './panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\r\nimport {CssThemeColorsPanelComponent} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component';\r\nimport {GeneralAppearancePanelComponent} from '@common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component';\r\nimport {HighlightInPreviewDirective} from './highlight-in-preview.directive';\r\nimport {SeoAppearancePanelComponent} from '@common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component';\r\nimport {CustomCodeAppearancePanelComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component';\r\nimport {AppearanceImageInputComponent} from '@common/admin/appearance/appearance-image-input/appearance-image-input.component';\r\nimport {IconSelectorModule} from '@common/shared/icon-selector/icon-selector.module';\r\nimport {TranslationsModule} from '@common/core/translations/translations.module';\r\nimport {ImageOrIconModule} from '@common/core/ui/image-or-icon/image-or-icon.module';\r\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\n\r\n@NgModule({\r\n    imports: [\r\n        AppearanceRoutingModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        IconSelectorModule,\r\n        TranslationsModule,\r\n        ImageOrIconModule,\r\n        LoadingIndicatorModule,\r\n        ColorPickerInputModule,\r\n\r\n        // material\r\n        MatMenuModule,\r\n        MatProgressBarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        MatExpansionModule,\r\n        DragDropModule,\r\n        MatSidenavModule,\r\n        PortalModule,\r\n    ],\r\n    exports: [\r\n        AppearancePanelMetaComponent,\r\n        HighlightInPreviewDirective,\r\n        AppearanceImageInputComponent,\r\n    ],\r\n    declarations: [\r\n        AppearanceComponent,\r\n        AddMenuItemPanelComponent,\r\n        AppearancePanelMetaComponent,\r\n        MenuItemsComponent,\r\n        CodeEditorModalComponent,\r\n        CrupdateCssThemeModalComponent,\r\n        CssThemeColorsPanelComponent,\r\n        AppearanceImageInputComponent,\r\n        MenusAppearancePanelComponent,\r\n        ThemesAppearancePanelComponent,\r\n        GeneralAppearancePanelComponent,\r\n        SeoAppearancePanelComponent,\r\n        CustomCodeAppearancePanelComponent,\r\n        HighlightInPreviewDirective,\r\n    ],\r\n})\r\nexport class BaseAppearanceModule {\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ColorPickerInputComponent} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatIconModule} from '@angular/material/icon';\n\n\n@NgModule({\n    declarations: [\n        ColorPickerInputComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        MatIconModule,\n    ],\n    exports: [\n        ColorPickerInputComponent,\n    ]\n})\nexport class ColorPickerInputModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BaseAppearanceModule} from '@common/admin/appearance/base-appearance.module';\nimport {NewTicketAppearancePanelComponent} from './new-ticket-appearance-panel/new-ticket-appearance-panel.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {HelpCenterHomeAppearancePanelComponent} from './help-center-home-appearance-panel/help-center-home-appearance-panel.component';\n\n\n@NgModule({\n    declarations: [\n        NewTicketAppearancePanelComponent,\n        HelpCenterHomeAppearancePanelComponent,\n    ],\n    imports: [\n        CommonModule,\n        BaseAppearanceModule,\n\n        MatIconModule,\n        MatButtonModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n    ]\n})\nexport class AppAppearanceModule {\n}\n","import { ConnectedPosition } from '@angular/cdk/overlay';\r\n\r\nexport const RIGHT_POSITION: ConnectedPosition[] = [\r\n    {originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 5},\r\n    {originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: 5},\r\n];\r\n"]}